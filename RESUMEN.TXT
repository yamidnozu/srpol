
/* Directorio:  */
├── .prettierrc.json [8]
├── eslint.config.js [16]
├── firebase.json [13]
├── index.html [17]
├── package.json [57]
├── postcss.config.js [7]
├── 📂 src
│   ├── App.tsx [162]
│   ├── 📂 components
│   │   ├── 📂 auth
│   │   │   ├── LoginForm.tsx [83]
│   │   │   └── RegisterForm.tsx [83]
│   │   ├── 📂 forms
│   │   │   ├── MenuForm.tsx [222]
│   │   │   └── PedidoForm.tsx [228]
│   │   ├── 📂 layout
│   │   │   ├── MainLayout.tsx [37]
│   │   │   ├── Navbar.tsx [59]
│   │   │   ├── PublicLayout.tsx [19]
│   │   │   └── Sidebar.tsx [120]
│   │   ├── 📂 menu
│   │   │   ├── GroupOrderPage.tsx [695]
│   │   │   ├── JoinOrderModal.tsx [57]
│   │   │   ├── MenuForm.tsx [223]
│   │   │   ├── MenuItem.tsx [95]
│   │   │   ├── MenuList.tsx [29]
│   │   │   ├── MenuModal.tsx [77]
│   │   │   ├── NameModal.tsx [63]
│   │   │   ├── 📂 partials
│   │   │   │   ├── OrderReview.tsx [197]
│   │   │   │   ├── PeopleSelection.tsx [63]
│   │   │   │   ├── PersonOrder.tsx [225]
│   │   │   │   └── SharedOrder.tsx [174]
│   │   │   └── PersonMenuModal.tsx [201]
│   │   ├── 📂 payment
│   │   │   └── PaymentForm.tsx [80]
│   │   ├── 📂 pedidos
│   │   │   ├── PedidoForm.tsx [228]
│   │   │   ├── PedidoItem.tsx [9]
│   │   │   └── PedidoList.tsx [395]
│   │   └── 📂 ui
│   │       ├── Button.tsx [79]
│   │       ├── Container.tsx [17]
│   │       ├── ErrorBoundry.tsx [46]
│   │       ├── ListItem.tsx [64]
│   │       └── TextField.tsx [34]
│   ├── 📂 context
│   │   ├── AppContext.tsx [69]
│   │   └── AuthContext.tsx [172]
│   ├── 📂 hooks
│   │   ├── useAuth.ts [10]
│   │   └── useMenu.ts [10]
│   ├── main.tsx [10]
│   ├── 📂 pages
│   │   ├── Dashboard.tsx [754]
│   │   ├── GestionMenu.tsx [359]
│   │   ├── GestionUsuarios.tsx [82]
│   │   ├── Login.tsx [56]
│   │   ├── MenuPage.tsx [406]
│   │   ├── PedidosPage.tsx [18]
│   │   ├── Perfil.tsx [97]
│   │   └── Success.tsx [41]
│   ├── 📂 payment
│   │   └── payment.ts [87]
│   ├── 📂 types
│   │   ├── css.d.ts [2]
│   │   └── global.d.ts [22]
│   └── 📂 utils
│       ├── constants.ts [6]
│       ├── firebase.ts [16]
│       └── theme.ts [43]
├── tailwind.config.js [9]
├── tsconfig.app.json [26]
├── tsconfig.json [32]
├── tsconfig.node.json [25]
└── vite.config.ts [38]


Total de líneas resumidas: 6572


/* Inicio .prettierrc.json */
{
  "semi": false,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false
}
/* Fin .prettierrc.json */

/* Inicio eslint.config.js */
import js from "@eslint/js";
import tseslint from "typescript-eslint";

export default tseslint.config(
  {
    files: ["**/*.{ts,tsx}"], // Asegúrate de incluir esto para que se aplique a archivos TS/TSX
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.json'], //  <- Ruta a tu tsconfig.json
        tsconfigRootDir: import.meta.dirname, // <-  Directorio raíz para tsconfig.json
      },
    },
  },
  js.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
);
/* Fin eslint.config.js */

/* Inicio firebase.json */
{
  "hosting": {
    "public": "dist",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

/* Fin firebase.json */

/* Inicio index.html */
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- <link rel="manifest" href="/manifest.json" /> -->
    <meta name="theme-color" content="#ffffff" />
    <title>SrPol</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

/* Fin index.html */

/* Inicio package.json */
{
  "name": "srpol",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "format": "npx eslint . --fix && npx prettier . --write"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mercadopago/sdk-js": "^0.0.3",
    "@mui/icons-material": "^6.4.1",
    "@mui/material": "^6.4.1",
    "@mui/x-data-grid": "^7.24.1",
    "@stripe/stripe-js": "^5.5.0",
    "axios": "^1.7.9",
    "chart.js": "^4.4.7",
    "firebase": "^11.2.0",
    "firebase-admin": "^13.0.2",
    "firebase-functions": "^6.3.0",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "react-router-dom": "^7.1.3",
    "stripe": "^17.5.0",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@typescript-eslint/eslint-plugin": "^8.22.0",
    "@typescript-eslint/parser": "^8.22.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.17",
    "eslint": "^9.19.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.35",
    "prettier": "^3.4.2",
    "tailwindcss": "^3.4.1",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5",
    "vite-plugin-pwa": "^0.21.1"
  }
}
/* Fin package.json */

/* Inicio postcss.config.js */
import autoprefixer from 'autoprefixer'
import tailwindcss from 'tailwindcss'

export default {
  plugins: [tailwindcss('./tailwind.config.js'), autoprefixer],
}

/* Fin postcss.config.js */

/* Inicio src\App.tsx */
/* src\App.tsx */
/* Inicio src\App.tsx */
import React from "react";
import {
  Navigate,
  Route,
  BrowserRouter as Router,
  Routes,
} from "react-router-dom";
import MainLayout from "./components/layout/MainLayout";
import PublicLayout from "./components/layout/PublicLayout";
import ErrorBoundary from "./components/ui/ErrorBoundry";
import { AppProvider } from "./context/AppContext";
import { AuthProvider } from "./context/AuthContext";
import { useAuth } from "./hooks/useAuth";
import Dashboard from "./pages/Dashboard";
import GestionMenu from "./pages/GestionMenu";
import GestionUsuarios from "./pages/GestionUsuarios";
import Login from "./pages/Login";

import GroupOrderPage from "./components/menu/GroupOrderPage";
import MenuPage from "./pages/MenuPage"; // Importa MenuPage
import PedidosPage from "./pages/PedidosPage";
import Perfil from "./pages/Perfil";
import Success from "./pages/Success";
import "./styles/global.css";

const PrivateRoute: React.FC<{
  children: React.ReactNode;
  allowedRoles?: string[];
}> = ({ children, allowedRoles }) => {
  const { user, loading, userRole } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  if (!user) {
    return <Navigate to="/login" />;
  }

  if (allowedRoles && !allowedRoles.includes(userRole || "client")) {
    return <Navigate to="/" />;
  }

  return <MainLayout>{children}</MainLayout>;
};

const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  return !user ? <PublicLayout>{children}</PublicLayout> : <Navigate to="/" />;
};

const App: React.FC = () => {
  return (
    <AuthProvider>
      <AppProvider>
        <Router>
          <ErrorBoundary>
            <Routes>
              <Route
                path="/login"
                element={
                  <PublicRoute>
                    <Login />
                  </PublicRoute>
                }
              />
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <Success />
                  </PrivateRoute>
                }
              />
              <Route
                path="/"
                element={
                  <PrivateRoute>
                    <Dashboard />
                  </PrivateRoute>
                }
              />
              {/* Ruta modificada para GroupOrderPage que recibe groupOrderId como parámetro */}
              <Route
                path="/menu/:groupOrderId"
                element={
                  <PrivateRoute>
                    <GroupOrderPage name="" />
                  </PrivateRoute>
                }
              />
              {/* Nueva ruta para MenuPage (punto de entrada) */}
              <Route
                path="/menu"
                element={
                  <PrivateRoute>
                    <MenuPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/pedidos"
                element={
                  <PrivateRoute>
                    <PedidosPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/gestion-menu"
                element={
                  <PrivateRoute allowedRoles={["admin", "encargado"]}>
                    <GestionMenu />
                  </PrivateRoute>
                }
              />
              <Route
                path="/perfil"
                element={
                  <PrivateRoute>
                    <Perfil />
                  </PrivateRoute>
                }
              />
              <Route
                path="/gestion-usuarios"
                element={
                  <PrivateRoute allowedRoles={["admin"]}>
                    <GestionUsuarios />
                  </PrivateRoute>
                }
              />
              {/* Ruta para manejar pagos exitosos */}
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <Success />
                  </PrivateRoute>
                }
              />
              {/* Ruta por defecto */}
              <Route path="*" element={<Navigate to="/" />} />
            </Routes>
          </ErrorBoundary>
        </Router>
      </AppProvider>
    </AuthProvider>
  );
};

export default App;

/* Fin src\App.tsx */

/* Fin src\App.tsx */

/* Inicio src\components\auth\LoginForm.tsx */
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";

const LoginForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const { login } = useAuth();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await login(email, password);
    } catch (error) {
      setError((error as { message: string }).message);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-6 space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Iniciar Sesión</h2>
      <div>
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700"
          >
            Correo electrónico
          </label>
          <input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700"
          >
            Contraseña
          </label>
          <input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
      </div>
      {error && (
        <div
          className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-2"
          role="alert"
        >
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Iniciar Sesión
        </button>
      </div>
    </form>
  );
};

export default LoginForm;

/* Fin src\components\auth\LoginForm.tsx */

/* Inicio src\components\auth\RegisterForm.tsx */
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";

const RegisterForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const { register } = useAuth();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await register(email, password);
    } catch (error) {
      setError((error as { message: string }).message);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Registrarse</h2>
      <div className="space-y-4">
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700"
          >
            Correo electrónico
          </label>
          <input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700"
          >
            Contraseña
          </label>
          <input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
      </div>
      {error && (
        <div
          className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-2"
          role="alert"
        >
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Registrarse
        </button>
      </div>
    </form>
  );
};

export default RegisterForm;

/* Fin src\components\auth\RegisterForm.tsx */

/* Inicio src\components\forms\MenuForm.tsx */
/* Inicio src\components\forms\MenuForm.tsx */
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
  onClose: () => void; // Add onClose prop
}

const MenuForm: React.FC<MenuFormProps> = ({
  initialValues,
  onSubmit,
  onClose,
}) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );
  // Nuevo estado para el estado de disponibilidad
  const [availabilityStatus, setAvailabilityStatus] = useState<
    "disponible" | "noDisponibleMomento" | "noDisponibleLargoPlazo"
  >(initialValues?.availabilityStatus || "disponible");

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
      availabilityStatus, // Incluir el nuevo estado en los valores enviados
    });
    onClose(); // Close modal on submit
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Formulario con espaciado vertical */}
      <div className="grid grid-cols-1 gap-4">
        {" "}
        {/* Grid para los campos */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Nombre del Item
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Descripción
          </label>
          <textarea /* Usamos textarea para la descripción */
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="price"
            className="block text-sm font-medium text-gray-700"
          >
            Precio
          </label>
          <input
            type="number"
            id="price"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="imageUrl"
            className="block text-sm font-medium text-gray-700"
          >
            URL de Imagen
          </label>
          <input
            type="url"
            id="imageUrl"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="recommendation"
            className="block text-sm font-medium text-gray-700"
          >
            Recomendaciones (Opcional)
          </label>
          <input
            type="text"
            id="recommendation"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="observations"
            className="block text-sm font-medium text-gray-700"
          >
            Observaciones (Opcional)
          </label>
          <input
            type="text"
            id="observations"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        {/* Nuevo campo para el estado de disponibilidad */}
        <div>
          <label
            htmlFor="availabilityStatus"
            className="block text-sm font-medium text-gray-700"
          >
            Estado de Disponibilidad
          </label>
          <select
            id="availabilityStatus"
            value={availabilityStatus}
            onChange={(e) =>
              setAvailabilityStatus(
                e.target.value as
                  | "disponible"
                  | "noDisponibleMomento"
                  | "noDisponibleLargoPlazo"
              )
            }
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          >
            <option value="disponible">Disponible</option>
            <option value="noDisponibleMomento">
              No disponible en el momento
            </option>
            <option value="noDisponibleLargoPlazo">Ya no disponible</option>
          </select>
        </div>
      </div>
      <div className="flex items-center justify-between mt-4">
        {" "}
        {/* Contenedor para checkbox y botones */}
        <div className="flex items-center">
          <input
            type="checkbox"
            id="available"
            className="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
            checked={available}
            onChange={(e) => setAvailable(e.target.checked)}
          />
          <label htmlFor="available" className="ml-2 text-sm text-gray-700">
            Disponible (Visible en Menu)
          </label>
        </div>
        <div className="space-x-2">
          <button
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            onClick={onClose}
            type="button" /* Importante: type="button" para evitar submit del form al cancelar */
          >
            Cancelar
          </button>
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            {initialValues?.id ? "Guardar" : "Agregar"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\forms\MenuForm.tsx */

/* Inicio src\components\forms\PedidoForm.tsx */
// src/components/pedidos/PedidoForm.tsx
import { Timestamp, addDoc, collection } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { db } from '../../utils/firebase'

/** Mismo tipo que uses en GroupOrderPage */
interface Person {
  personIndex: number
  userId: string | null
  name: string
  items: { id: string; quantity: number }[]
  locked?: boolean
  finished?: boolean
}

interface SharedOrderItem {
  itemId: string
  quantity: number
  personIds: string[]
}

interface PedidoFormProps {
  onClose: () => void
  people?: Person[] // Aquí usamos la interface Person
  sharedOrderItems?: SharedOrderItem[]
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people, sharedOrderItems }) => {
  const { menu } = useMenu()
  const { user, addPoints } = useAuth()
  const [items, setItems] = useState<
    {
      id: string
      quantity: number
      assignedTo: string
    }[]
  >([])

  const [peopleOrder, setPeopleOrder] = useState<{ userId: string | null; name: string }[]>([])
  const [sede, setSede] = useState('')
  const [deliveryFee, setDeliveryFee] = useState(0)
  const [deliveryIncluded, setDeliveryIncluded] = useState(true)
  const [paymentMethod, setPaymentMethod] = useState('contraentrega')

  useEffect(() => {
    // Convertimos people en un estado con 'peopleOrder'
    if (people) {
      const mapped = people.map((p) => ({
        userId: p.userId,
        name: p.name,
      }))
      setPeopleOrder(mapped)

      // Flatten person items
      const personItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        })),
      )
      setItems(personItems)
    }
  }, [people])

  useEffect(() => {
    if (sharedOrderItems) {
      // Flatten shared items -> assignedTo: 'Compartido'
      const sharedItemsForDisplay = sharedOrderItems.flatMap((sharedItem) =>
        Array(sharedItem.quantity)
          .fill(null)
          .map(() => ({
            id: sharedItem.itemId,
            quantity: 1,
            assignedTo: 'Compartido',
          })),
      )
      setItems((prev) => [...prev, ...sharedItemsForDisplay])
    }
  }, [sharedOrderItems])

  // Simulación sedes
  const sedesDisponibles = ['Sede Norte', 'Sede Sur', 'Sede Centro']
  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0])
    }
  }, [sedesDisponibles])

  const calculateTotal = () => {
    let total = 0
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    return total + deliveryFee
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    if (!user) return

    try {
      const total = calculateTotal()
      const orderId = uuidv4()
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede,
        status: 'pendiente',
        total,
        deliveryFee,
        deliveryIncluded,
        paymentMethod,
        orderDate: Timestamp.now(),
        orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              itemId: si.itemId,
              quantity: si.quantity,
              personIds: si.personIds,
            }))
          : [],
      }

      await addDoc(collection(db, 'pedidos'), orderData)
      handlePaymentSuccess()
    } catch (error) {
      console.error('Error al agregar el pedido:', error)
    }
  }

  const handlePaymentSuccess = async () => {
    await addPoints()
    alert('Pedido realizado con éxito y puntos sumados.')
    onClose()
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label htmlFor="sede" className="block text-sm font-medium text-gray-700">
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="deliveryFee" className="block text-sm font-medium text-gray-700">
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label htmlFor="deliveryIncluded" className="font-medium text-gray-700">
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Realizar Pedido1
        </button>
      </div>
    </form>
  )
}

export default PedidoForm

/* Fin src\components\forms\PedidoForm.tsx */

/* Inicio src\components\layout\MainLayout.tsx */
// src/components/layout/MainLayout.tsx
import React, { useState } from "react";
import Navbar from "./Navbar";
import Sidebar from "./Sidebar";

interface MainLayoutProps {
  children: React.ReactNode;
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
  const [drawerOpen, setDrawerOpen] = useState(false);

  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen);
  };

  const handleDrawerClose = () => {
    setDrawerOpen(false);
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <Navbar toggleDrawer={handleDrawerToggle} />
      <Sidebar drawerOpen={drawerOpen} handleDrawerClose={handleDrawerClose} />
      <main className="flex-1 overflow-x-hidden overflow-y-auto p-4 md:pl-64">
        {" "}
        {/* Ajuste de padding lateral en desktop para el sidebar fijo */}
        <div className="container mx-auto">
          <div className="w-full">{children}</div>
        </div>
      </main>
    </div>
  );
};

export default MainLayout;

/* Fin src\components\layout\MainLayout.tsx */

/* Inicio src\components\layout\Navbar.tsx */
// src/components/layout/Navbar.tsx
import MenuIcon from '@mui/icons-material/Menu'
import React from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'

interface NavbarProps {
  toggleDrawer: () => void
}

const Navbar: React.FC<NavbarProps> = ({ toggleDrawer }) => {
  const { logout, user } = useAuth()
  const navigate = useNavigate()

  const handleLogout = async () => {
    await logout()
    navigate('/login')
  }

  return (
    <header className="bg-white shadow-md fixed w-full top-0 z-50">
      <div className="container mx-auto px-4 sm:px-6 py-3 flex justify-between items-center">
        <div className="flex items-center">
          <button
            className="text-gray-500 hover:text-gray-700 focus:outline-none focus:text-gray-700 md:hidden transition-colors duration-200" // Transición en el icono
            aria-label="Abrir menú"
            onClick={toggleDrawer}
          >
            <MenuIcon className="transition-transform duration-300 hover:scale-110" />{' '}
            {/* Transición y escala en hover del icono */}
          </button>
          <img
            src="SrPolForYouSinTitle.svg"
            alt="SrPol Logo"
            className="h-10 mr-2 transition-transform duration-300 hover:scale-105" // Transición en el logo
          />
          <span className="text-xl font-semibold text-gray-900 transition-colors duration-200 hover:text-indigo-700">
            SrPol
          </span>{' '}
          {/* Transición en el título */}
        </div>
        {user && (
          <div className="hidden md:flex items-center">
            <span className="text-gray-700 mr-4">{user.email}</span>
            <button
              className="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transition-colors duration-200 hover:scale-105" // Transición en el botón
              onClick={handleLogout}
            >
              Cerrar Sesión
            </button>
          </div>
        )}
      </div>
    </header>
  )
}

export default Navbar

/* Fin src\components\layout\Navbar.tsx */

/* Inicio src\components\layout\PublicLayout.tsx */
// src/components/layout/PublicLayout.tsx
import React, { ReactNode } from "react";

interface PublicLayoutProps {
  children: ReactNode;
}

const PublicLayout: React.FC<PublicLayoutProps> = ({ children }) => {
  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      {" "}
      {/* Clases Tailwind para centrar y fondo */}
      {children}
    </div>
  );
};

export default PublicLayout;

/* Fin src\components\layout\PublicLayout.tsx */

/* Inicio src\components\layout\Sidebar.tsx */
// src/components/layout/Sidebar.tsx
import {
  Dashboard as DashboardIcon,
  People as PeopleIcon,
  Person as PersonIcon,
  RestaurantMenu as RestaurantMenuIcon,
  Settings as SettingsIcon,
  ShoppingCart as ShoppingCartIcon,
} from "@mui/icons-material";
import React from "react";
import { NavLink, useLocation } from "react-router-dom"; // Importa NavLink y useLocation
import { useAuth } from "../../hooks/useAuth";

interface SidebarProps {
  drawerOpen: boolean;
  handleDrawerClose: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({ drawerOpen, handleDrawerClose }) => {
  const { userRole } = useAuth();
  const location = useLocation(); // Hook para obtener la ruta actual

  const menuItems = [
    {
      text: "Dashboard",
      icon: <DashboardIcon />,
      path: "/",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Menú",
      icon: <RestaurantMenuIcon />,
      path: "/menu",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Pedidos",
      icon: <ShoppingCartIcon />,
      path: "/pedidos",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Gestionar Menú",
      icon: <SettingsIcon />,
      path: "/gestion-menu",
      roles: ["admin", "encargado"],
    },
    {
      text: "Perfil",
      icon: <PersonIcon />,
      path: "/perfil",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Gestión de Usuarios",
      icon: <PeopleIcon />,
      path: "/gestion-usuarios",
      roles: ["admin"],
    },
  ];

  return (
    <aside
      className={`bg-gray-50 w-64 flex-shrink-0 overflow-y-auto fixed top-16 md:top-0 left-0 h-full z-40 transition-transform duration-300 ease-in-out md:translate-x-0 ${
        drawerOpen ? "translate-x-0" : "-translate-x-full"
      } md:shadow-md`} // Shadow en desktop
    >
      <div className="py-6 px-4 md:px-6">
        {" "}
        {/* Más padding en desktop */}
        <span className="text-xl font-semibold text-gray-900 block mb-2 md:hidden text-center">
          Navegación
        </span>{" "}
        {/* Título en mobile */}
        <nav className="space-y-2">
          {menuItems
            .filter(
              (item) =>
                item.roles.includes(userRole || "public") ||
                item.roles.includes("public")
            )
            .map((item) => {
              const isActive = location.pathname === item.path; // Verifica si la ruta coincide
              return (
                <NavLink
                  key={item.text}
                  to={item.path}
                  className={({
                    isActive,
                  }) => `group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200
                                      ${
                                        isActive
                                          ? "bg-indigo-100 text-indigo-700"
                                          : "text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                      }`}
                  onClick={handleDrawerClose} // Cierra el drawer en mobile al hacer clic
                >
                  <span
                    className={`mr-3 h-6 w-6 flex items-center justify-center ${
                      isActive
                        ? "text-indigo-500"
                        : "text-gray-500 group-hover:text-gray-600"
                    }`}
                  >
                    {" "}
                    {/* Icon color changes on hover and active */}
                    {item.icon}
                  </span>
                  {item.text}
                </NavLink>
              );
            })}
        </nav>
      </div>
    </aside>
  );
};

export default Sidebar;

/* Fin src\components\layout\Sidebar.tsx */

/* Inicio src\components\menu\GroupOrderPage.tsx */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-misused-promises */
/* src/components/menu/GroupOrderPage.tsx */
import { doc, onSnapshot, updateDoc } from 'firebase/firestore'
import React, { useEffect, useRef, useState } from 'react'
import { useNavigate, useParams, useSearchParams } from 'react-router-dom'
import { MenuItem as MenuItemType } from '../../context/AppContext'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { COLLECTIONS } from '../../utils/constants'
import { db } from '../../utils/firebase'
import NameModal from './NameModal'
import OrderReview from './partials/OrderReview'
import PeopleSelection from './partials/PeopleSelection'
import PersonOrder from './partials/PersonOrder'
import SharedOrder from './partials/SharedOrder'

export interface Person {
  personIndex: number
  userId: string | null
  name: string
  items: { id: string; quantity: number }[]
  locked?: boolean
  finished?: boolean
}

export interface SharedOrderItem {
  itemId: string
  quantity: number
  personIds: string[]
}

export interface GroupOrderPageProps {
  name: string
}

/** Estructura (aprox) en Firestore de groupOrders */
interface GroupOrderData {
  code: string
  ownerId: string
  status: string
  participants: Person[]
  sharedItems: SharedOrderItem[]
  orderPlaced?: boolean
  allFinished?: boolean
  showPricesToAll?: boolean
}

const GroupOrderPage: React.FC<GroupOrderPageProps> = () => {
  const { menu } = useMenu()
  const { user } = useAuth()
  const [numPeople, setNumPeople] = useState<number>(1)
  const [people, setPeople] = useState<Person[]>([])
  const [showPeopleNames, setShowPeopleNames] = useState(false)
  const [showPedidoForm, setShowPedidoForm] = useState(false)
  const [sharedOrderItems, setSharedOrderItems] = useState<SharedOrderItem[]>([])
  const [activeTab, setActiveTab] = useState<string>('shared')
  const [feedbackMessage] = useState<string>('')

  const [groupOrderCode, setGroupOrderCode] = useState<string | null>(null)
  const [groupOrderId, setGroupOrderId] = useState<string | null>(null)
  const [isOwner, setIsOwner] = useState(false)
  const [allFinished, setAllFinished] = useState(false)
  const [showNameModal, setShowNameModal] = useState(false)
  const [currentPersonIndex, setCurrentPersonIndex] = useState<number | null>(null)
  const [orderPlaced, setOrderPlaced] = useState(false)

  // Para visibilidad de precios
  const [showPricesToAll, setShowPricesToAll] = useState(false)

  const [tempPersonName, setTempPersonName] = useState<string>('')

  const navigate = useNavigate()
  const [searchParams] = useSearchParams()
  const codeFromURL = searchParams.get('code')
  const joiningWithCode = !!codeFromURL

  const sharedOrderSummaryRef = useRef<HTMLDivElement>(null)
  const personOrderSummaryRef = useRef<HTMLDivElement>(null)
  const [, setIsMobile] = useState(false)
  const [, setIsSummaryVisible] = useState(true)

  const { groupOrderId: routeGroupId } = useParams()

  useEffect(() => {
    if (routeGroupId) {
      setGroupOrderId(routeGroupId)
      setGroupOrderCode(codeFromURL)
      subscribeToGroupOrder(routeGroupId)
    } else {
      console.log('GroupOrderPage - No routeGroupId, not subscribing to group order.')
    }
  }, [routeGroupId, codeFromURL])

  useEffect(() => {
    const checkMobile = () => window.innerWidth < 768
    setIsMobile(checkMobile())
    const handleResize = () => setIsMobile(checkMobile())
    window.addEventListener('resize', handleResize)
    setIsSummaryVisible(!checkMobile())
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  const subscribeToGroupOrder = (groupId: string) => {
    if (!groupId) return
    const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupId)

    return onSnapshot(
      groupOrderDocRef,
      (docSnapshot) => {
        if (!docSnapshot.exists()) {
          navigate('/menu')
          return
        }
        const groupOrderData = docSnapshot.data() as GroupOrderData

        setGroupOrderCode(groupOrderData.code)
        setPeople(groupOrderData.participants)
        setSharedOrderItems(groupOrderData.sharedItems)
        setIsOwner(user?.uid === groupOrderData.ownerId)
        setAllFinished(groupOrderData.participants.every((p) => p.finished))
        setOrderPlaced(!!groupOrderData.orderPlaced)

        // Sincronizamos showPricesToAll
        setShowPricesToAll(!!groupOrderData.showPricesToAll)

        // Ajustamos numPeople para que coincida
        const participantsList = groupOrderData.participants
        if (participantsList && participantsList.length && participantsList.length !== numPeople) {
          setNumPeople(participantsList.length)
        }

        // Si ya se marcó que el pedido fue realizado, mostramos la revisión
        if (groupOrderData.orderPlaced) {
          setShowPedidoForm(true)
        }
      },
      () => {
        // On error => volver a /menu
        navigate('/menu')
      },
    )
  }

  const handleNumPeopleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const num = Number(event.target.value)
    setNumPeople(num)
    setPeople((prevPeople) => {
      const currentPeopleCount = prevPeople.length
      if (num > currentPeopleCount) {
        const newPeople = Array.from({ length: num - currentPeopleCount }, (_, index) => ({
          personIndex: currentPeopleCount + index,
          userId: null,
          name: `Persona ${currentPeopleCount + index + 1}`,
          items: [],
          locked: false,
          finished: false,
        }))
        return [...prevPeople, ...newPeople]
      } else if (num < currentPeopleCount) {
        return prevPeople.slice(0, num)
      } else {
        return prevPeople
      }
    })
  }

  const handlePersonNameChange = (index: number, name: string) => {
    const updatedPeople = [...people]
    if (updatedPeople[index]) {
      updatedPeople[index].name = name
      setPeople(updatedPeople)
    }
  }

  const handleStartOrder = () => {
    if (people.every((person) => person.name.trim() !== '')) {
      setShowPeopleNames(true)
      setActiveTab('shared')
    } else {
      alert('Por favor, ingresa el nombre de cada persona.')
    }
  }

  const handleAddToSharedOrder = async (item: MenuItemType) => {
    if (orderPlaced || !groupOrderId) return
    if (item.availabilityStatus !== 'disponible') return

    const existingItemIndex = sharedOrderItems.findIndex(
      (sharedItem) => sharedItem.itemId === item.id,
    )
    let updatedSharedOrderItems: SharedOrderItem[]
    if (existingItemIndex > -1) {
      updatedSharedOrderItems = sharedOrderItems.map((si, index) =>
        index === existingItemIndex ? { ...si, quantity: si.quantity + 1 } : si,
      )
    } else {
      updatedSharedOrderItems = [
        ...sharedOrderItems,
        { itemId: item.id, quantity: 1, personIds: [] },
      ]
    }
    setSharedOrderItems(updatedSharedOrderItems)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, {
        sharedItems: updatedSharedOrderItems,
      })
    } catch (error) {
      console.error('Error al actualizar items compartidos:', error)
    }
  }

  const handleSharedOrderItemQuantityChange = async (itemId: string, quantity: number) => {
    if (orderPlaced || !groupOrderId) return
    if (quantity < 0) return

    const updatedSharedOrderItems = sharedOrderItems.map((sharedItem) =>
      sharedItem.itemId === itemId ? { ...sharedItem, quantity } : sharedItem,
    )
    setSharedOrderItems(updatedSharedOrderItems)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, {
        sharedItems: updatedSharedOrderItems,
      })
    } catch (error) {
      console.error('Error actualizando sharedOrderItems:', error)
    }
  }

  const handleRemoveSharedOrderItem = async (itemId: string) => {
    if (orderPlaced || !groupOrderId) return

    const updatedSharedOrderItems = sharedOrderItems.filter((item) => item.itemId !== itemId)
    setSharedOrderItems(updatedSharedOrderItems)
    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, {
        sharedItems: updatedSharedOrderItems,
      })
    } catch (error) {
      console.error('Error al remover item compartido:', error)
    }
  }

  const handleAddItemToPerson = async (personIndex: number, menuItem: MenuItemType) => {
    if (orderPlaced || !groupOrderId || !user) return

    const currentPerson = people[personIndex]
    // Chequeo de lock
    if (currentPerson.locked && currentPerson.userId !== user.uid) {
      alert('Esta pestaña está siendo usada por otra persona')
      return
    }

    let updatedParticipants = [...people]
    // Si no está bloqueada, bloquear
    if (!currentPerson.locked) {
      if (currentPerson.name.startsWith('Persona')) {
        setCurrentPersonIndex(personIndex)
        setTempPersonName(currentPerson.name)
        setShowNameModal(true)
      }
      updatedParticipants = updatedParticipants.map((p, idx) =>
        idx === personIndex ? { ...p, userId: user.uid, locked: true } : p,
      )
    }

    // Insert item si está disponible
    if (menuItem.availabilityStatus !== 'disponible') {
      return
    }
    updatedParticipants = updatedParticipants.map((p, idx) => {
      if (idx === personIndex) {
        const itemExists = p.items.some((orderItem) => orderItem.id === menuItem.id)
        if (itemExists) {
          return {
            ...p,
            items: p.items.map((orderItem) =>
              orderItem.id === menuItem.id
                ? { ...orderItem, quantity: orderItem.quantity + 1 }
                : orderItem,
            ),
          }
        } else {
          return {
            ...p,
            items: [...p.items, { id: menuItem.id, quantity: 1 }],
          }
        }
      }
      return p
    })

    setPeople(updatedParticipants)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, {
        participants: updatedParticipants,
      })
    } catch (error) {
      console.error('Firestore update FAILED', error)
    }
  }

  const handlePersonOrderItemQuantityChange = async (
    personIndex: number,
    itemId: string,
    quantity: number,
  ) => {
    if (orderPlaced || !groupOrderId) return
    if (quantity < 0) return

    const updatedParticipants = people.map((person, index) => {
      if (index === personIndex) {
        return {
          ...person,
          items: person.items.map((it) => (it.id === itemId ? { ...it, quantity } : it)),
        }
      }
      return person
    })
    setPeople(updatedParticipants)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, { participants: updatedParticipants })
    } catch (error) {
      console.error('Error actualizando cantidad de item de persona:', error)
    }
  }

  const handleRemoveItemFromPerson = async (personIndex: number, itemId: string) => {
    if (orderPlaced || !groupOrderId) return

    const updatedParticipants = people.map((person, index) => {
      if (index === personIndex) {
        return {
          ...person,
          items: person.items.filter((item) => item.id !== itemId),
        }
      }
      return person
    })
    setPeople(updatedParticipants)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, { participants: updatedParticipants })
    } catch (error) {
      console.error('Error al remover item de persona:', error)
    }
  }

  const handleClaimPersonTab = async (personIndex: number) => {
    if (orderPlaced || !groupOrderId || !user) return

    const currentPerson = people[personIndex]
    if (currentPerson.locked && currentPerson.userId !== user.uid) {
      alert('Esta pestaña ya está siendo usada por otra persona')
      return
    }

    if (currentPerson.name.startsWith('Persona ')) {
      setCurrentPersonIndex(personIndex)
      setTempPersonName(currentPerson.name)
      setShowNameModal(true)
      return
    }

    const updatedParticipants = people.map((p, idx) =>
      idx === personIndex ? { ...p, userId: user.uid, locked: true } : p,
    )
    setPeople(updatedParticipants)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, { participants: updatedParticipants })
    } catch (error) {
      console.error('Error al bloquear pestaña para el usuario:', error)
    }
  }

  const handlePersonFinishedOrder = async (personIndex: number) => {
    if (orderPlaced || !groupOrderId || !user) return

    const currentUserPersonIndex = people.findIndex((p) => p.userId === user.uid)
    if (currentUserPersonIndex !== personIndex) {
      alert('No puedes terminar el pedido de otra persona.')
      return
    }

    const updatedParticipants = people.map((person, index) => {
      if (index === personIndex) {
        return { ...person, finished: true }
      }
      return person
    })
    setPeople(updatedParticipants)
    const allAreFinished = updatedParticipants.every((p) => p.finished)
    setAllFinished(allAreFinished)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, {
        participants: updatedParticipants,
        allFinished: allAreFinished,
      })
    } catch (error) {
      console.error('Error al marcar persona como finished:', error)
    }
  }

  const handleNameModalClose = () => {
    setShowNameModal(false)
    setCurrentPersonIndex(null)
  }

  const handleNameSubmit = async (name: string) => {
    if (!groupOrderId || currentPersonIndex === null || !user) return

    const updatedParticipants = people.map((person, index) => {
      if (index === currentPersonIndex) {
        const finalName = name.trim() !== '' ? name : person.name
        return {
          ...person,
          name: finalName,
          userId: user.uid,
          locked: true,
        }
      }
      return person
    })
    setPeople(updatedParticipants)
    setShowNameModal(false)
    setCurrentPersonIndex(null)

    try {
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, { participants: updatedParticipants })
    } catch (error) {
      console.error('Error al actualizar con el nombre en Firestore:', error)
    }
  }

  const distributeSharedOrderItems = () => {
    /* Lógica si se quiere implementar */
  }

  const handleReviewOrder = () => {
    distributeSharedOrderItems()
    setShowPedidoForm(true)
  }

  const handleOrderPlacement = async () => {
    if (!groupOrderId) return
    const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
    await updateDoc(groupOrderDocRef, { orderPlaced: true })
    setShowPedidoForm(true)
  }

  const handleToggleShowPrices = async () => {
    if (!groupOrderId) return
    try {
      const newValue = !showPricesToAll
      setShowPricesToAll(newValue)
      const groupOrderDocRef = doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId)
      await updateDoc(groupOrderDocRef, {
        showPricesToAll: newValue,
      })
    } catch (error) {
      console.error('Error al togglear showPricesToAll:', error)
    }
  }

  // =======================================================
  // NUEVO: FUNCIONES DE CÁLCULO DE SUBTOTALES
  // =======================================================
  const calculateSubtotal = (personItems: { id: string; quantity: number }[]) => {
    let total = 0
    personItems.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    return total
  }

  const calculateSharedSubtotal = () => {
    let total = 0
    sharedOrderItems.forEach((sharedItem) => {
      const menuItem = menu.find((m) => m.id === sharedItem.itemId)
      if (menuItem) {
        total += menuItem.price * sharedItem.quantity
      }
    })
    return total
  }
  // =======================================================

  return (
    <div className="container mx-auto my-8 p-6 bg-white rounded-xl shadow-md relative">
      <h1 className="text-3xl font-bold text-gray-900 mb-6 text-center text-indigo-700">
        ¡Pedido Grupal Fácil y Divertido! 🎉
      </h1>

      {groupOrderCode && (
        <div className="text-center mb-4">
          <h3 className="text-xl font-semibold text-gray-800">
            Código de Pedido Compartido:{' '}
            <span className="font-bold text-indigo-600">{groupOrderCode}</span>
          </h3>
          <p className="text-sm text-gray-500">Compártelo con tus amigos.</p>
        </div>
      )}

      {!showPeopleNames && !joiningWithCode ? (
        <PeopleSelection
          numPeople={numPeople}
          people={people}
          onNumPeopleChange={handleNumPeopleChange}
          onPersonNameChange={handlePersonNameChange}
          onStartOrder={handleStartOrder}
        />
      ) : !showPedidoForm ? (
        <>
          <div className="border-b border-gray-200 mb-4">
            <nav className="-mb-px flex space-x-8 overflow-x-auto" aria-label="Tabs">
              <button
                onClick={() => setActiveTab('shared')}
                className={`${
                  activeTab === 'shared'
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300`}
              >
                🍕 Para Compartir
              </button>
              {people.map((person, index) => (
                <div
                  key={person.personIndex}
                  className={`${
                    activeTab === `person-${index}`
                      ? 'border-indigo-500 text-indigo-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300 cursor-pointer`}
                  onClick={() => setActiveTab(`person-${index}`)}
                >
                  {person.name}
                  {!person.locked && !person.finished && user?.uid && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        void handleClaimPersonTab(index)
                      }}
                      className="ml-2 px-2 py-1 bg-indigo-200 text-indigo-700 rounded-full text-xs hover:bg-indigo-300 focus:outline-none"
                    >
                      Soy yo
                    </button>
                  )}
                  {person.finished && <span className="ml-2 text-green-500">✅ Terminado</span>}
                  {person.locked && person.userId !== user?.uid && (
                    <span className="ml-2 text-red-500">🔒</span>
                  )}
                </div>
              ))}
            </nav>
          </div>

          {activeTab === 'shared' && (
            <SharedOrder
              menuCategories={menu
                .filter((i) => i.availabilityStatus !== 'noDisponibleLargoPlazo')
                .reduce(
                  (acc, item) => {
                    const cat = item.recommendation || 'General'
                    acc[cat] = acc[cat] || []
                    acc[cat].push(item)
                    return acc
                  },
                  {} as Record<string, MenuItemType[]>,
                )}
              sharedOrderItems={sharedOrderItems}
              onAddToSharedOrder={handleAddToSharedOrder}
              onSharedOrderItemQuantityChange={handleSharedOrderItemQuantityChange}
              onRemoveSharedOrderItem={handleRemoveSharedOrderItem}
              // Corrección: ahora sí pasamos la función real
              calculateSharedSubtotal={calculateSharedSubtotal}
              sharedOrderSummaryRef={sharedOrderSummaryRef}
              activeTab={activeTab}
              menu={menu}
              disabled={orderPlaced}
            />
          )}

          {people.map((person, index) =>
            activeTab === `person-${index}` ? (
              <PersonOrder
                key={person.personIndex}
                person={person}
                index={index}
                menuCategories={menu
                  .filter((i) => i.availabilityStatus !== 'noDisponibleLargoPlazo')
                  .reduce(
                    (acc, item) => {
                      const cat = item.recommendation || 'General'
                      acc[cat] = acc[cat] || []
                      acc[cat].push(item)
                      return acc
                    },
                    {} as Record<string, MenuItemType[]>,
                  )}
                menu={menu}
                onAddItemToPerson={handleAddItemToPerson}
                onPersonOrderItemQuantityChange={handlePersonOrderItemQuantityChange}
                onRemoveItemFromPerson={handleRemoveItemFromPerson}
                // Corrección: la función real
                calculateSubtotal={calculateSubtotal}
                personOrderSummaryRef={personOrderSummaryRef}
                activeTab={activeTab}
                onPersonFinishedOrder={handlePersonFinishedOrder}
                isFinished={person.finished || false}
                personLocked={person.locked || false}
                isCurrentUserTab={person.userId === user?.uid}
                personIndex={index}
                disabled={orderPlaced}
              />
            ) : null,
          )}

          <div className="flex justify-center mt-8">
            {isOwner && allFinished && !orderPlaced ? (
              <button
                className="bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none transition-colors duration-300"
                onClick={handleReviewOrder}
                disabled={orderPlaced}
              >
                ¡Revisar Pedido Grupal! ✅
              </button>
            ) : isOwner && orderPlaced ? (
              <p className="text-center text-green-600 font-semibold">
                Pedido realizado. Revisando resumen...
              </p>
            ) : !isOwner ? (
              <p className="text-center text-gray-600">
                Espera a que el dueño del pedido revise y confirme.
              </p>
            ) : !allFinished ? (
              <p className="text-center text-gray-600">
                Aún faltan personas por confirmar su pedido.
              </p>
            ) : null}
          </div>
        </>
      ) : (
        <OrderReview
          people={people}
          sharedOrderItems={sharedOrderItems}
          menu={menu}
          onClosePedidoForm={() => setShowPedidoForm(false)}
          // Cambios: pasamos nuestras funciones de cálculo
          calculateSharedSubtotal={calculateSharedSubtotal}
          calculateSubtotal={calculateSubtotal}
          isOrderOwner={isOwner}
          onOrderPlaced={handleOrderPlacement}
          orderPlaced={orderPlaced}
          showPricesToAll={showPricesToAll}
          onToggleShowPrices={handleToggleShowPrices}
        />
      )}

      {feedbackMessage && (
        <div className="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg animate-fade-in">
          {feedbackMessage}
        </div>
      )}

      {/* MODAL para el nombre */}
      <NameModal
        open={showNameModal}
        onClose={handleNameModalClose}
        currentName={tempPersonName}
        onSubmit={handleNameSubmit}
      />
    </div>
  )
}

export default GroupOrderPage

/* Fin src\components\menu\GroupOrderPage.tsx */

/* Inicio src\components\menu\JoinOrderModal.tsx */
import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
} from "@mui/material";
import React, { useState } from "react";

interface JoinOrderModalProps {
  open: boolean;
  onClose: () => void;
  onJoinOrder: (code: string) => void;
}

const JoinOrderModal: React.FC<JoinOrderModalProps> = ({
  open,
  onClose,
  onJoinOrder,
}) => {
  const [code, setCode] = useState("");

  const handleJoin = () => {
    onJoinOrder(code);
    onClose();
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>Unirse a Pedido Compartido</DialogTitle>
      <DialogContent>
        <TextField
          autoFocus
          margin="dense"
          id="code"
          label="Código del pedido"
          type="text"
          fullWidth
          value={code}
          onChange={(e) => setCode(e.target.value)}
        />
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          Cancelar
        </Button>
        <Button onClick={handleJoin} color="primary">
          Unirme
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default JoinOrderModal;

/* Fin src\components\menu\JoinOrderModal.tsx */

/* Inicio src\components\menu\MenuForm.tsx */
/* Inicio src\components\forms\MenuForm.tsx */
/* src\components\forms\MenuForm.tsx */
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
  onClose: () => void; // Add onClose prop
}

const MenuForm: React.FC<MenuFormProps> = ({
  initialValues,
  onSubmit,
  onClose,
}) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );
  // Nueva estado para el estado de disponibilidad
  const [availabilityStatus, setAvailabilityStatus] = useState<
    "disponible" | "noDisponibleMomento" | "noDisponibleLargoPlazo"
  >(initialValues?.availabilityStatus || "disponible");

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
      availabilityStatus, // Incluir el nuevo estado en los valores enviados
    });
    onClose(); // Close modal on submit
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Formulario con espaciado vertical */}
      <div className="grid grid-cols-1 gap-4">
        {" "}
        {/* Grid para los campos */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Nombre del Item
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Descripción
          </label>
          <textarea /* Usamos textarea para la descripción */
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="price"
            className="block text-sm font-medium text-gray-700"
          >
            Precio
          </label>
          <input
            type="number"
            id="price"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="imageUrl"
            className="block text-sm font-medium text-gray-700"
          >
            URL de Imagen
          </label>
          <input
            type="url"
            id="imageUrl"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="recommendation"
            className="block text-sm font-medium text-gray-700"
          >
            Recomendaciones (Opcional)
          </label>
          <input
            type="text"
            id="recommendation"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="observations"
            className="block text-sm font-medium text-gray-700"
          >
            Observaciones (Opcional)
          </label>
          <input
            type="text"
            id="observations"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        {/* Nuevo campo para el estado de disponibilidad */}
        <div>
          <label
            htmlFor="availabilityStatus"
            className="block text-sm font-medium text-gray-700"
          >
            Estado de Disponibilidad
          </label>
          <select
            id="availabilityStatus"
            value={availabilityStatus}
            onChange={(e) =>
              setAvailabilityStatus(
                e.target.value as
                  | "disponible"
                  | "noDisponibleMomento"
                  | "noDisponibleLargoPlazo"
              )
            }
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          >
            <option value="disponible">Disponible</option>
            <option value="noDisponibleMomento">
              No disponible en el momento
            </option>
            <option value="noDisponibleLargoPlazo">Ya no disponible</option>
          </select>
        </div>
      </div>
      <div className="flex items-center justify-between mt-4">
        {" "}
        {/* Contenedor para checkbox y botones */}
        <div className="flex items-center">
          <input
            type="checkbox"
            id="available"
            className="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
            checked={available}
            onChange={(e) => setAvailable(e.target.checked)}
          />
          <label htmlFor="available" className="ml-2 text-sm text-gray-700">
            Disponible (Visible en Menu)
          </label>
        </div>
        <div className="space-x-2">
          <button
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            onClick={onClose}
            type="button" /* Importante: type="button" para evitar submit del form al cancelar */
          >
            Cancelar
          </button>
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            {initialValues?.id ? "Guardar" : "Agregar"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\menu\MenuForm.tsx */

/* Inicio src\components\menu\MenuItem.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../context/AppContext";

interface MenuItemProps {
  item: MenuItemType;
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => void;
}

const MenuItem: React.FC<MenuItemProps> = ({ item, onEdit, onDelete }) => {
  // Función para determinar el color del badge según el estado de disponibilidad
  const getStatusBadgeClass = () => {
    switch (item.availabilityStatus) {
      case "noDisponibleMomento":
        return "bg-yellow-500 text-yellow-900"; // Amarillo para "No disponible por el momento"
      case "noDisponibleLargoPlazo":
        return "bg-red-500 text-red-900"; // Rojo para "No disponible a largo plazo"
      default:
        return "bg-green-500 text-green-900"; // Verde para "Disponible"
    }
  };

  const statusBadgeClass = `inline-block ${getStatusBadgeClass()} rounded-full px-3 py-1 text-sm font-semibold mr-2 mb-2`;

  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  return (
    <div className="max-w-sm rounded overflow-hidden shadow-lg">
      {" "}
      {/* Card principal con Tailwind */}
      <img className="w-full" src={item.imageUrl} alt={item.name} />{" "}
      {/* Imagen responsive */}
      <div className="px-6 py-4">
        {" "}
        {/* Contenido principal card */}
        <div className="font-bold text-xl mb-2 flex justify-between items-center">
          {item.name}
          <span className={statusBadgeClass}>
            {item.availabilityStatus === "disponible"
              ? "Disponible"
              : item.availabilityStatus === "noDisponibleMomento"
              ? "No Disponible Ahora"
              : "No Disponible"}
          </span>
        </div>{" "}
        {/* Nombre del item */}
        <p className="text-gray-700 text-base">{item.description}</p>{" "}
        {/* Descripción */}
        <p className="text-gray-700 text-lg mt-2">
          Precio: {formatPriceCOP(item.price)}
        </p>{" "}
        {/* Precio */}
        <div>
          {item.recommendation && (
            <p className="text-gray-600 text-sm mt-1">
              Recomendaciones: {item.recommendation}
            </p>
          )}
          {item.observations && (
            <p className="text-gray-600 text-sm mt-1">
              Observaciones: {item.observations}
            </p>
          )}
        </div>
      </div>
      <div className="px-6 py-4 flex justify-end space-x-2">
        {" "}
        {/* Contenedor acciones */}
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => onEdit(item)}
        >
          Editar
        </button>
        <button
          className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => onDelete(item)}
        >
          Eliminar
        </button>
      </div>
    </div>
  );
};

export default MenuItem;

/* Fin src\components\menu\MenuItem.tsx */

/* Inicio src\components\menu\MenuList.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../context/AppContext";
import MenuItemComponent from "./MenuItem";

interface MenuListProps {
  menu: MenuItemType[];
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => Promise<void>;
}

const MenuList: React.FC<MenuListProps> = ({ menu, onEdit, onDelete }) => {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {" "}
      {/* Grid responsive para la lista */}
      {menu.map((item) => (
        <MenuItemComponent
          key={item.id}
          item={item}
          onEdit={onEdit}
          onDelete={onDelete}
        />
      ))}
    </div>
  );
};

export default MenuList;

/* Fin src\components\menu\MenuList.tsx */

/* Inicio src\components\menu\MenuModal.tsx */
// src/components/menu/MenuModal.tsx
import React, { useState } from 'react'
import { MenuItem } from '../../context/AppContext'

interface MenuModalProps {
  open: boolean
  onClose: () => void
  initialValues?: Partial<MenuItem>
  onSubmit: (values: Partial<MenuItem>) => void | Promise<void>
}

const MenuModal: React.FC<MenuModalProps> = ({ open, onClose, initialValues, onSubmit }) => {
  const [localValues, setLocalValues] = useState<Partial<MenuItem>>(initialValues ?? {})

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setLocalValues((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await onSubmit(localValues)
    onClose()
  }

  if (!open) return null

  return (
    <div
      style={{
        position: 'fixed',
        inset: 0,
        backgroundColor: 'rgba(0,0,0,0.5)',
      }}
      onClick={onClose}
    >
      <div
        style={{
          backgroundColor: '#fff',
          maxWidth: 500,
          margin: '50px auto',
          padding: 20,
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <h3>Editar / Agregar ítem al Menú</h3>
        <form onSubmit={void handleSubmit}>
          <div style={{ marginBottom: '1rem' }}>
            <label>Nombre:</label>
            <input name="name" type="text" value={localValues.name ?? ''} onChange={handleChange} />
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label>Descripción:</label>
            <textarea
              name="description"
              value={localValues.description ?? ''}
              onChange={handleChange}
            />
          </div>
          {/* ... otros campos price, imageUrl, etc. */}

          <div style={{ marginTop: '1rem' }}>
            <button type="button" onClick={onClose}>
              Cancelar
            </button>
            <button type="submit" style={{ marginLeft: 8 }}>
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default MenuModal

/* Fin src\components\menu\MenuModal.tsx */

/* Inicio src\components\menu\NameModal.tsx */
/** src/components/menu/NameModal.tsx **/
import React, { FormEvent, useState } from 'react'

interface NameModalProps {
  open: boolean
  onClose: () => void
  currentName?: string
  onSubmit: (name: string) => void
}

const NameModal: React.FC<NameModalProps> = ({ open, onClose, currentName = '', onSubmit }) => {
  const [tempName, setTempName] = useState<string>(currentName)

  if (!open) return null

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault()
    // Llamamos al onSubmit con el contenido (si está vacío, que sea el currentName anterior)
    onSubmit(tempName.trim() || currentName)
    onClose()
  }

  return (
    <div
      className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
      onClick={onClose}
    >
      <div
        className="bg-white rounded p-6 max-w-sm w-full relative"
        onClick={(e) => e.stopPropagation()}
      >
        <h2 className="text-xl font-bold mb-4 text-center">¿Cuál es tu nombre?</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="text"
            placeholder="Déjalo vacío si prefieres 'Persona X'"
            className="border border-gray-300 rounded w-full p-2"
            value={tempName}
            onChange={(e) => setTempName(e.target.value)}
          />
          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Aceptar
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default NameModal

/* Fin src\components\menu\NameModal.tsx */

/* Inicio src\components\menu\partials\OrderReview.tsx */
/* src/components/menu/partials/OrderReview.tsx */
import { Typography } from '@mui/material'
import React from 'react'
import { MenuItem as MenuItemType } from '../../../context/AppContext'
import PedidoForm from '../../forms/PedidoForm'
import { Person, SharedOrderItem } from '../GroupOrderPage'

interface OrderReviewProps {
  people: Person[]
  sharedOrderItems: SharedOrderItem[]
  menu: MenuItemType[]
  onClosePedidoForm: () => void
  calculateSharedSubtotal: () => number
  calculateSubtotal: (personItems: { id: string; quantity: number }[]) => number
  isOrderOwner: boolean
  onOrderPlaced: () => void
  orderPlaced: boolean
  showPricesToAll?: boolean
  onToggleShowPrices: () => void
}

const OrderReview: React.FC<OrderReviewProps> = ({
  people,
  sharedOrderItems,
  menu,
  onClosePedidoForm,
  calculateSharedSubtotal,
  calculateSubtotal,
  isOrderOwner,
  onOrderPlaced,
  orderPlaced,
  showPricesToAll = false,
  onToggleShowPrices,
}) => {
  // Formatear a moneda
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    })
  }

  // Calculamos totales usando las funciones pasadas por props
  const totalShared = calculateSharedSubtotal()
  const totalIndividuals = people.reduce((sum, person) => {
    return sum + calculateSubtotal(person.items)
  }, 0)
  const totalOrderAmount = totalShared + totalIndividuals

  // Quién ve los precios
  const canViewPrices = isOrderOwner || showPricesToAll

  const handlePedidoFormClose = () => {
    onClosePedidoForm()
    onOrderPlaced() // Indica que se confirmó el pedido
  }

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-xl shadow-md animate-fade-in">
      <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center text-indigo-700">
        Revisión Detallada del Pedido Grupal 🧐
      </h2>

      {/* Toggle para mostrar/ocultar precios al resto, solo si orderPlaced y soy owner */}
      {isOrderOwner && orderPlaced && (
        <div className="flex justify-center mb-6">
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              className="form-checkbox h-5 w-5 text-indigo-600"
              checked={showPricesToAll}
              onChange={onToggleShowPrices}
            />
            <span className="ml-2 text-gray-800">Mostrar Precios a Todos</span>
          </label>
        </div>
      )}

      {/* Items Compartidos */}
      {sharedOrderItems && sharedOrderItems.length > 0 && (
        <div className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-50">
          <h3 className="text-lg font-semibold text-gray-900 mb-3 text-indigo-600">
            Detalle del Pedido Compartido 🤝
          </h3>
          <ul>
            {sharedOrderItems.map((sharedItem) => {
              const menuItem = menu.find((m) => m.id === sharedItem.itemId)
              if (!menuItem) return null
              const itemTotal = menuItem.price * sharedItem.quantity
              return (
                <li key={sharedItem.itemId} className="py-2 flex items-center justify-between">
                  <div className="flex items-center">
                    <span className="mr-2">{menuItem.name}</span>
                    <span className="text-sm text-gray-500">x {sharedItem.quantity}</span>
                  </div>
                  {canViewPrices && (
                    <span className="w-12 text-right">{formatPriceCOP(itemTotal)}</span>
                  )}
                </li>
              )
            })}
          </ul>
          {canViewPrices && (
            <div className="font-semibold text-right mt-2">
              Subtotal Compartido:
              <span className="text-indigo-700 ml-1">{formatPriceCOP(totalShared)}</span>
            </div>
          )}
        </div>
      )}

      {/* Items de cada persona */}
      {people.map((person) => {
        const personSubtotal = calculateSubtotal(person.items)
        return (
          <div key={person.personIndex} className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-50">
            <h3 className="text-lg font-semibold text-gray-900 mb-3 text-indigo-600">
              Detalle del Pedido Individual - {person.name} 👤
            </h3>
            <ul>
              {person.items.map((it) => {
                const menuItem = menu.find((m) => m.id === it.id)
                if (!menuItem) return null
                const itemTotal = menuItem.price * it.quantity
                return (
                  <li key={it.id} className="py-2 flex items-center justify-between">
                    <div className="flex items-center">
                      <span className="mr-2">{menuItem.name}</span>
                      <span className="text-sm text-gray-500">x {it.quantity}</span>
                    </div>
                    {canViewPrices && (
                      <span className="w-12 text-right">{formatPriceCOP(itemTotal)}</span>
                    )}
                  </li>
                )
              })}
            </ul>
            {canViewPrices && (
              <div className="font-semibold text-right mt-2">
                Subtotal Individual:
                <span className="text-indigo-700 ml-1">{formatPriceCOP(personSubtotal)}</span>
              </div>
            )}
          </div>
        )
      })}

      {/* Totales finales */}
      {canViewPrices && (
        <div className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-100">
          <h3 className="text-xl font-semibold text-gray-900 mb-3 text-indigo-600 text-center">
            Resumen del Pedido Grupal Completo 💰
          </h3>
          <div className="flex justify-between items-center">
            <div className="font-semibold text-gray-700">
              <Typography>Subtotal Compartido:</Typography>
              {people.map((person) => (
                <Typography key={person.personIndex}>Subtotal {person.name}:</Typography>
              ))}
              <Typography className="font-bold mt-2">Total del Pedido:</Typography>
            </div>
            <div className="text-right font-semibold text-xl text-indigo-700">
              <Typography>{formatPriceCOP(totalShared)}</Typography>
              {people.map((person) => (
                <Typography key={person.personIndex}>
                  {formatPriceCOP(calculateSubtotal(person.items))}
                </Typography>
              ))}
              <Typography className="font-bold mt-2">{formatPriceCOP(totalOrderAmount)}</Typography>
            </div>
          </div>
        </div>
      )}

      {/* Si no se ha colocado el pedido, renderizar el form */}
      {!orderPlaced && (
        <PedidoForm
          onClose={handlePedidoFormClose}
          people={people}
          sharedOrderItems={sharedOrderItems}
        />
      )}
      {orderPlaced && (
        <div className="text-center mt-6">
          <Typography variant="h6" className="text-green-600">
            ¡Pedido realizado con éxito!
          </Typography>
        </div>
      )}
    </div>
  )
}

export default OrderReview

/* Fin src\components\menu\partials\OrderReview.tsx */

/* Inicio src\components\menu\partials\PeopleSelection.tsx */
import React from "react";
import { Person } from "../GroupOrderPage";

interface PeopleSelectionProps {
  numPeople: number;
  people: Person[];
  onNumPeopleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  onPersonNameChange: (index: number, name: string) => void;
  onStartOrder: () => void;
}

const PeopleSelection: React.FC<PeopleSelectionProps> = ({
  numPeople,
  people,
  onNumPeopleChange,
  onPersonNameChange,
  onStartOrder,
}) => {
  return (
    <div className="mb-8 text-center">
      <h2 className="text-xl font-semibold text-gray-800 mb-4">
        ¿Cuántos son hoy?
      </h2>
      <div className="flex flex-col items-center space-y-4">
        <div className="flex items-center space-x-4">
          <label
            htmlFor="numPeople"
            className="block text-gray-700 text-sm font-bold"
          >
            Somos:
          </label>
          <input
            type="number"
            id="numPeople"
            value={numPeople}
            onChange={onNumPeopleChange}
            min="1"
            className="shadow appearance-none border rounded w-20 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-center"
          />
          <span className="text-gray-700 text-sm font-bold">Personas</span>
        </div>
        {Array.from({ length: numPeople }).map((_, index) => (
          <input
            key={index}
            type="text"
            placeholder={`Nombre Persona ${index + 1}`}
            className="shadow appearance-none border rounded w-full max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            value={people[index]?.name || ""}
            onChange={(e) => onPersonNameChange(index, e.target.value)}
          />
        ))}
      </div>

      <button
        className="mt-6 bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:shadow-outline transition-colors duration-300"
        onClick={onStartOrder}
      >
        ¡A Pedir! 🚀
      </button>
    </div>
  );
};
export default PeopleSelection;
/* Fin src\components\menu\partials\PeopleSelection.tsx */

/* Inicio src\components\menu\partials\PersonOrder.tsx */
/* Inicio src\components\menu\partials\PersonOrder.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../../context/AppContext";
import { Person } from "../GroupOrderPage"; // Import the Person interface from GroupOrderPage

interface PersonOrderProps {
  person: Person; // Use the imported Person interface here
  index: number;
  menuCategories: { [category: string]: MenuItemType[] };
  menu: MenuItemType[];
  onAddItemToPerson: (personIndex: number, item: MenuItemType) => void;
  onPersonOrderItemQuantityChange: (
    personIndex: number,
    itemId: string,
    quantity: number
  ) => void;
  onRemoveItemFromPerson: (personIndex: number, itemId: string) => void;
  calculateSubtotal: (
    personItems: { id: string; quantity: number }[]
  ) => number;
  personOrderSummaryRef: React.RefObject<HTMLDivElement>;
  activeTab: string;
  onPersonFinishedOrder: (personIndex: number) => void;
  isFinished: boolean;
  personLocked: boolean; // Prop to indicate if the tab is locked
  isCurrentUserTab: boolean; // Prop to check if it's the current user's tab
  personIndex: number;
  disabled?: boolean; // Prop to disable interactions
}

const PersonOrder: React.FC<PersonOrderProps> = ({
  person,
  index,
  menuCategories,
  menu,
  onAddItemToPerson,
  onPersonOrderItemQuantityChange,
  onRemoveItemFromPerson,
  calculateSubtotal,
  personOrderSummaryRef,
  onPersonFinishedOrder,
  isFinished,
  personLocked,
  isCurrentUserTab,
  personIndex,
  disabled = false, // Default to false
}) => {
  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  const isControlEnabled = (!personLocked || isCurrentUserTab) && !disabled; // Add disabled prop check

  return (
    <div key={person.personIndex} className="mb-8" ref={personOrderSummaryRef}>
      <div
        className={`sticky top-16 bg-white p-4 shadow-md z-20 rounded-md transition-transform duration-200 ease-out transform translate-y-0 hover:translate-y-[-2px] ring-2 ring-indigo-500 ring-opacity-50 hover:ring-opacity-100`}
      >
        <h2 className="text-xl font-semibold text-gray-900 mb-4 text-center">
          Pedido de {person.name || `Persona ${index + 1}`} 😋
          {personLocked && !isCurrentUserTab && (
            <span className="ml-2 text-red-500">🔒 (Viendo)</span>
          )}
        </h2>
        <ul className="mb-4">
          {person.items.map((it) => {
            const menuItem = menu.find((m) => m.id === it.id);
            return menuItem ? (
              <li
                key={it.id} // Added key prop here
                className="flex justify-between items-center py-2 border-b border-gray-200"
              >
                <span className="flex-1 min-w-0">{menuItem.name}</span>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() =>
                      onPersonOrderItemQuantityChange(
                        personIndex,
                        it.id,
                        it.quantity - 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={!isControlEnabled}
                  >
                    -
                  </button>
                  <span className="w-6 text-center">{it.quantity}</span>
                  <button
                    onClick={() =>
                      onPersonOrderItemQuantityChange(
                        personIndex,
                        it.id,
                        it.quantity + 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={!isControlEnabled}
                  >
                    +
                  </button>
                  <button
                    onClick={() => onRemoveItemFromPerson(personIndex, it.id)}
                    className="text-red-500 hover:text-red-700 transition-colors duration-200"
                    disabled={!isControlEnabled}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth="1.5"
                      stroke="currentColor"
                      className="w-5 h-5"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z"
                      />
                    </svg>
                  </button>
                </div>
                <span className="w-12 text-right">
                  {formatPriceCOP(menuItem.price * it.quantity)}
                </span>
              </li>
            ) : null;
          })}
          {person.items.length > 0 && (
            <li className="font-semibold text-right mt-2">
              Subtotal:{" "}
              <span className="text-indigo-700">
                {formatPriceCOP(calculateSubtotal(person.items))}
              </span>
            </li>
          )}
        </ul>
        <div className="flex justify-end">
          {" "}
          {/* Container for button at the bottom */}
          {!isFinished && (
            <button
              onClick={() => onPersonFinishedOrder(personIndex)}
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              disabled={!isControlEnabled || isFinished} // Disable if PedidoForm is open or already finished
            >
              He Terminado!
            </button>
          )}
          {isFinished && (
            <span className="text-green-600 font-semibold">
              ¡Pedido Terminado! ✅
            </span>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {Object.entries(menuCategories).map(([categoryName, items]) => (
          <div
            key={categoryName}
            className="transition-all duration-300 transform hover:scale-105"
          >
            <h3 className="font-bold text-lg text-gray-900 mb-2 text-indigo-500">
              {categoryName}
            </h3>
            <div className="flex flex-col space-y-2">
              {items.map(
                (
                  menuItem // Changed parameter name to menuItem here
                ) => (
                  <button
                    key={menuItem.id}
                    disabled={
                      menuItem.availabilityStatus !== "disponible" ||
                      !isControlEnabled
                    }
                    className={`bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-left transition-colors duration-300 ${
                      menuItem.availabilityStatus !== "disponible"
                        ? "opacity-50 cursor-not-allowed line-through pointer-events-none"
                        : ""
                    }`}
                    onClick={() => {
                      console.log(
                        "PersonOrder - onAddItemToPerson CALL",
                        personIndex,
                        menuItem
                      ); // ADD THIS LOG - Log in PersonOrder.tsx
                      onAddItemToPerson(personIndex, menuItem);
                    }}
                  >
                    {menuItem.name} - {formatPriceCOP(menuItem.price)}{" "}
                    {/* Use menuItem here */}
                    {menuItem.availabilityStatus === "noDisponibleMomento" && (
                      <span className="ml-2 text-yellow-500 font-normal italic">
                        (No disponible ahora)
                      </span>
                    )}
                    {menuItem.availabilityStatus ===
                      "noDisponibleLargoPlazo" && (
                      <span className="ml-2 text-red-500 font-normal italic">
                        (Ya no disponible)
                      </span>
                    )}
                  </button>
                )
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PersonOrder;

/* Fin src\components\menu\partials\PersonOrder.tsx */

/* Fin src\components\menu\partials\PersonOrder.tsx */

/* Inicio src\components\menu\partials\SharedOrder.tsx */
/* Inicio src\components\menu\partials\SharedOrder.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../../context/AppContext";

interface SharedOrderProps {
  menuCategories: { [category: string]: MenuItemType[] };
  sharedOrderItems: { itemId: string; quantity: number; personIds: string[] }[];
  onAddToSharedOrder: (item: MenuItemType) => void;
  onSharedOrderItemQuantityChange: (itemId: string, quantity: number) => void;
  onRemoveSharedOrderItem: (itemId: string) => void;
  calculateSharedSubtotal: () => number;
  sharedOrderSummaryRef: React.RefObject<HTMLDivElement>;
  activeTab: string;
  menu: MenuItemType[];
  disabled?: boolean; // Prop to disable interactions
}

const SharedOrder: React.FC<SharedOrderProps> = ({
  menuCategories,
  sharedOrderItems,
  onAddToSharedOrder,
  onSharedOrderItemQuantityChange,
  onRemoveSharedOrderItem,
  calculateSharedSubtotal,
  sharedOrderSummaryRef,
  menu,
  disabled = false, // Default to false
}) => {
  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  return (
    <div className="mb-8">
      <div
        className="sticky top-16 bg-white p-4 shadow-md z-20 rounded-md transition-transform duration-200 ease-out transform translate-y-0 hover:translate-y-[-2px] ring-2 ring-indigo-500 ring-opacity-50 hover:ring-opacity-100"
        ref={sharedOrderSummaryRef}
      >
        <h2 className="text-2xl font-bold text-gray-900 mb-4 text-center">
          Pedido para Compartir 🤝
        </h2>
        <ul className="mb-4">
          {sharedOrderItems.map((sharedItem) => {
            const menuItem = menu.find((m) => m.id === sharedItem.itemId);
            return menuItem ? (
              <li
                key={sharedItem.itemId}
                className="flex justify-between items-center py-2 border-b border-gray-200"
              >
                <span className="flex-1 min-w-0">{menuItem.name}</span>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() =>
                      onSharedOrderItemQuantityChange(
                        sharedItem.itemId,
                        sharedItem.quantity - 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={disabled} // Disable button if prop disabled is true
                  >
                    -
                  </button>
                  <span className="w-6 text-center">{sharedItem.quantity}</span>
                  <button
                    onClick={() =>
                      onSharedOrderItemQuantityChange(
                        sharedItem.itemId,
                        sharedItem.quantity + 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={disabled} // Disable button if prop disabled is true
                  >
                    +
                  </button>
                  <button
                    onClick={() => onRemoveSharedOrderItem(sharedItem.itemId)}
                    className="text-red-500 hover:text-red-700 transition-colors duration-200"
                    disabled={disabled} // Disable button if prop disabled is true
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth="1.5"
                      stroke="currentColor"
                      className="w-5 h-5"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z"
                      />
                    </svg>
                  </button>
                </div>
                <span className="w-12 text-right">
                  {formatPriceCOP(menuItem.price * sharedItem.quantity)}
                </span>
              </li>
            ) : null;
          })}
          {sharedOrderItems.length > 0 && (
            <li className="font-semibold text-right mt-2">
              Subtotal:{" "}
              <span className="text-indigo-700">
                {formatPriceCOP(calculateSharedSubtotal())}
              </span>
            </li>
          )}
        </ul>
      </div>
      <p className="text-gray-600 mb-4 text-center mt-4">
        ¿Algo más para compartir? ¡Elige del menú!
      </p>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
        {Object.entries(menuCategories).map(([categoryName, items]) => (
          <div
            key={categoryName}
            className="transition-all duration-300 transform hover:scale-105"
          >
            <h3 className="font-bold text-lg text-gray-900 mb-2 text-indigo-500">
              {categoryName}
            </h3>
            <div className="flex flex-col space-y-2">
              {items.map((item) => (
                <button
                  key={item.id}
                  disabled={
                    item.availabilityStatus !== "disponible" || disabled
                  } // Disable button if prop disabled is true or item not available
                  className={`bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-left transition-colors duration-300 ${
                    item.availabilityStatus !== "disponible"
                      ? "opacity-50 cursor-not-allowed line-through pointer-events-none"
                      : ""
                  }`}
                  onClick={
                    item.availabilityStatus === "disponible" && !disabled // Only allow click if available and not disabled
                      ? () => onAddToSharedOrder(item)
                      : undefined
                  }
                >
                  {item.name} - {formatPriceCOP(item.price)}
                  {item.availabilityStatus === "noDisponibleMomento" && (
                    <span className="ml-2 text-yellow-500 font-normal italic">
                      (No disponible ahora)
                    </span>
                  )}
                  {item.availabilityStatus === "noDisponibleLargoPlazo" && (
                    <span className="ml-2 text-red-500 font-normal italic">
                      (Ya no disponible)
                    </span>
                  )}
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SharedOrder;

/* Fin src\components\menu\partials\SharedOrder.tsx */

/* Fin src\components\menu\partials\SharedOrder.tsx */

/* Inicio src\components\menu\PersonMenuModal.tsx */
// src/components/forms/PedidoForm.tsx
import { Timestamp, addDoc, collection } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { db } from '../../utils/firebase'

interface PedidoFormProps {
  onClose: () => void
  people?: {
    id: string
    name: string
    items: { id: string; quantity: number }[]
  }[]
  sharedOrderItems?: {
    itemId: string
    quantity: number
    personIds: string[]
  }[] // Prop para items compartidos
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people, sharedOrderItems }) => {
  const { menu } = useMenu()
  const { user, addPoints } = useAuth()

  const [items, setItems] = useState<{ id: string; quantity: number; assignedTo: string }[]>([])
  const [peopleOrder, setPeopleOrder] = useState<{ id: string; name: string }[]>([])
  const [sede, setSede] = useState('')
  const [deliveryFee, setDeliveryFee] = useState(0)
  const [deliveryIncluded, setDeliveryIncluded] = useState(true)
  const [paymentMethod, setPaymentMethod] = useState('contraentrega')

  useEffect(() => {
    if (people) {
      setPeopleOrder(people.map((person) => ({ id: person.id, name: person.name })))
      const newItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        })),
      )
      setItems(newItems)
    }
  }, [people])

  // Simulación de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ['Sede Norte', 'Sede Sur', 'Sede Centro']

  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0])
    }
  }, [sedesDisponibles])

  const calculateTotal = () => {
    let total = 0
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    if (sharedOrderItems) {
      // Sumar el costo de items compartidos
      sharedOrderItems.forEach((sharedItem) => {
        const menuItem = menu.find((m) => m.id === sharedItem.itemId)
        if (menuItem) {
          total += menuItem.price * sharedItem.personIds.length // Precio por cada persona que lo pide
        }
      })
    }
    return total + deliveryFee
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    if (!user) return

    try {
      const total = calculateTotal()
      const orderId = uuidv4()
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: 'pendiente',
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              // Incluir sharedOrderItems en los datos del pedido
              itemId: si.itemId,
              personIds: si.personIds,
            }))
          : [],
      }

      await addDoc(collection(db, 'pedidos'), orderData)
      handlePaymentSuccess()
    } catch (error) {
      console.error('Error al agregar el pedido:', error)
    }
  }

  const handlePaymentSuccess = async () => {
    await addPoints()
    alert('Pedido realizado con éxito y puntos sumados.')
    onClose()
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label htmlFor="sede" className="block text-sm font-medium text-gray-700">
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="deliveryFee" className="block text-sm font-medium text-gray-700">
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label htmlFor="deliveryIncluded" className="font-medium text-gray-700">
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Realizar Pedido2
        </button>
      </div>
    </form>
  )
}

export default PedidoForm

/* Fin src\components\menu\PersonMenuModal.tsx */

/* Inicio src\components\payment\PaymentForm.tsx */
import { Alert, Button } from "@mui/material";
import React, { useEffect, useState } from "react";
import {
  createCheckoutSession,
  handlePaymentNotification,
  processPayment,
} from "../../payment/payment";

interface PaymentFormProps {
  amount: number;
  orderId: string;
  onSuccess: () => void;
}
const PaymentForm: React.FC<PaymentFormProps> = ({
  amount,
  onSuccess,
  orderId,
}) => {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [publicKey, setPublicKey] = useState<string | null>(null);
  const [paymentResult] = useState<string | null>(null);
  useEffect(() => {
    const loadPublicKey = async () => {
      setPublicKey("YOUR_STRIPE_PUBLIC_KEY");
    };
    loadPublicKey();
  }, []);

  const handlePayment = async () => {
    setLoading(true);
    setError(null);
    try {
      if (!publicKey) {
        setError("Clave publica no encontrada");
        setLoading(false);
        setTimeout(() => setError(null), 5000);
        return;
      }
      const sessionId = await createCheckoutSession(amount, orderId);
      await processPayment(sessionId, publicKey);
      const response = await handlePaymentNotification(sessionId);
      if (response) {
        setLoading(false);
        onSuccess();
      } else {
        throw new Error("Error al procesar el pago");
      }
    } catch (error) {
      setError(error.message);
      setLoading(false);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <>
      {error && <Alert severity="error">{error}</Alert>}
      {paymentResult === "success" && (
        <Alert severity="success">Pago Exitoso</Alert>
      )}
      {paymentResult === "failure" && (
        <Alert severity="error">Pago Fallido</Alert>
      )}
      {paymentResult === "pending" && (
        <Alert severity="info">Pago Pendiente</Alert>
      )}
      <Button
        variant="contained"
        color="primary"
        onClick={handlePayment}
        disabled={loading}
      >
        {loading ? "Procesando" : "Pagar"}
      </Button>
    </>
  );
};
export default PaymentForm;

/* Fin src\components\payment\PaymentForm.tsx */

/* Inicio src\components\pedidos\PedidoForm.tsx */
// src/components/pedidos/PedidoForm.tsx
import { Timestamp, addDoc, collection } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { db } from '../../utils/firebase'

/** Mismo tipo que uses en GroupOrderPage */
interface Person {
  personIndex: number
  userId: string | null
  name: string
  items: { id: string; quantity: number }[]
  locked?: boolean
  finished?: boolean
}

interface SharedOrderItem {
  itemId: string
  quantity: number
  personIds: string[]
}

interface PedidoFormProps {
  onClose: () => void
  people?: Person[] // Aquí usamos la interface Person
  sharedOrderItems?: SharedOrderItem[]
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people, sharedOrderItems }) => {
  const { menu } = useMenu()
  const { user, addPoints } = useAuth()
  const [items, setItems] = useState<
    {
      id: string
      quantity: number
      assignedTo: string
    }[]
  >([])

  const [peopleOrder, setPeopleOrder] = useState<{ userId: string | null; name: string }[]>([])
  const [sede, setSede] = useState('')
  const [deliveryFee, setDeliveryFee] = useState(0)
  const [deliveryIncluded, setDeliveryIncluded] = useState(true)
  const [paymentMethod, setPaymentMethod] = useState('contraentrega')

  useEffect(() => {
    // Convertimos people en un estado con 'peopleOrder'
    if (people) {
      const mapped = people.map((p) => ({
        userId: p.userId,
        name: p.name,
      }))
      setPeopleOrder(mapped)

      // Flatten person items
      const personItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        })),
      )
      setItems(personItems)
    }
  }, [people])

  useEffect(() => {
    if (sharedOrderItems) {
      // Flatten shared items -> assignedTo: 'Compartido'
      const sharedItemsForDisplay = sharedOrderItems.flatMap((sharedItem) =>
        Array(sharedItem.quantity)
          .fill(null)
          .map(() => ({
            id: sharedItem.itemId,
            quantity: 1,
            assignedTo: 'Compartido',
          })),
      )
      setItems((prev) => [...prev, ...sharedItemsForDisplay])
    }
  }, [sharedOrderItems])

  // Simulación sedes
  const sedesDisponibles = ['Sede Norte', 'Sede Sur', 'Sede Centro']
  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0])
    }
  }, [sedesDisponibles])

  const calculateTotal = () => {
    let total = 0
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    return total + deliveryFee
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    if (!user) return

    try {
      const total = calculateTotal()
      const orderId = uuidv4()
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede,
        status: 'pendiente',
        total,
        deliveryFee,
        deliveryIncluded,
        paymentMethod,
        orderDate: Timestamp.now(),
        orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              itemId: si.itemId,
              quantity: si.quantity,
              personIds: si.personIds,
            }))
          : [],
      }

      await addDoc(collection(db, 'pedidos'), orderData)
      void handlePaymentSuccess()
    } catch (error) {
      console.error('Error al agregar el pedido:', error)
    }
  }

  const handlePaymentSuccess = async () => {
    await addPoints()
    alert('Pedido realizado con éxito y puntos sumados.')
    onClose()
  }

  return (
    <form onSubmit={void handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label htmlFor="sede" className="block text-sm font-medium text-gray-700">
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="deliveryFee" className="block text-sm font-medium text-gray-700">
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label htmlFor="deliveryIncluded" className="font-medium text-gray-700">
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Realizar Pedido3
        </button>
      </div>
    </form>
  )
}

export default PedidoForm

/* Fin src\components\pedidos\PedidoForm.tsx */

/* Inicio src\components\pedidos\PedidoItem.tsx */
import React from "react";

const PedidoItem: React.FC = () => {
    return (
        <div>Pedido Item</div>
    )
}

export default PedidoItem;
/* Fin src\components\pedidos\PedidoItem.tsx */

/* Inicio src\components\pedidos\PedidoList.tsx */
/* Directorio: src\components\pedidos */
/* Inicio src\components\pedidos\PedidoList.tsx */
// src/components/pedidos/PedidoList.tsx
import {
  collection,
  doc,
  onSnapshot,
  query,
  updateDoc,
  where,
} from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu"; // Import useMenu hook
import { COLLECTIONS } from "../../utils/constants";
import { db } from "../../utils/firebase";

interface Pedido {
  id: string;
  userId: string;
  items: { id: string; quantity: number; assignedTo: string }[];
  people: { id: string; name: string }[];
  sede: string;
  status: string;
  total: number;
  deliveryFee: number;
  deliveryIncluded: boolean;
  paymentMethod: string;
  orderDate: Date;
  orderId: string;
  sharedItems?: {
    itemId: string;
    quantity: number;
    personIds: string[];
  }[];
}

const PedidoList: React.FC = () => {
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const { user, userRole } = useAuth();
  const { menu } = useMenu(); // Use useMenu hook to get menu data
  const [selectedStatus, setSelectedStatus] = useState("pendiente");
  const [openDetails, setOpenDetails] = useState(false);
  const [selectedPedidoDetails, setSelectedPedidoDetails] =
    useState<Pedido | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!user) return;

    setLoading(true);
    let pedidosQuery = query(collection(db, COLLECTIONS.PEDIDOS));

    if (userRole === "client") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("userId", "==", user.uid)
      );
    } else if (userRole === "admin" || userRole === "encargado") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("status", "==", selectedStatus)
      );
    }

    const unsubscribe = onSnapshot(pedidosQuery, (snapshot) => {
      const pedidosData = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          userId: data.userId,
          items: data.items || [],
          people: data.people || [],
          sede: data.sede,
          status: data.status,
          total: data.total,
          deliveryFee: data.deliveryFee,
          deliveryIncluded: data.deliveryIncluded,
          paymentMethod: data.paymentMethod,
          orderDate: data.orderDate ? data.orderDate.toDate() : new Date(),
          orderId: data.orderId,
          sharedItems: data.sharedItems || [],
        } as Pedido;
      });
      setPedidos(pedidosData);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [user, userRole, selectedStatus]);

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedStatus(event.target.value);
  };

  const handleStatusUpdate = async (orderId: string, newStatus: string) => {
    try {
      await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), {
        status: newStatus,
      });
    } catch (error) {
      console.error(
        "Error updating order status:",
        (error as { message: string }).message
      );
    }
  };

  const handleOpenDetails = (order: Pedido) => {
    setSelectedPedidoDetails(order);
    setOpenDetails(true);
  };

  const handleCloseDetails = () => {
    setSelectedPedidoDetails(null);
    setOpenDetails(false);
  };

  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    if (typeof price === "number") {
      return price.toLocaleString("es-CO", {
        style: "currency",
        currency: "COP",
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
      });
    } else {
      return "N/A";
    }
  };

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case "pendiente":
        return "bg-yellow-200 text-yellow-800";
      case "atendiendo":
        return "bg-blue-200 text-blue-800";
      case "preparando":
        return "bg-orange-200 text-orange-800";
      case "enviado":
        return "bg-green-200 text-green-800";
      default:
        return "bg-gray-200 text-gray-800";
    }
  };

  return (
    <div className="container mx-auto my-8 p-4">
      <h2 className="text-2xl font-bold text-gray-900 mb-4">
        Lista de Pedidos
      </h2>

      {userRole !== "client" && (
        <div className="mb-6">
          <label
            htmlFor="status-filter"
            className="block text-gray-700 text-sm font-bold mb-2"
          >
            Filtrar por estado:
          </label>
          <select
            id="status-filter"
            value={selectedStatus}
            onChange={handleStatusChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option value="pendiente">Pendiente</option>
            <option value="atendiendo">Atendiendo</option>
            <option value="preparando">Preparando</option>
            <option value="enviado">Enviado</option>
          </select>
        </div>
      )}

      {loading ? (
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {pedidos.map((order) => (
            <div key={order.id} className="bg-white rounded-lg shadow-md p-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Orden No. {order.orderId.substring(0, 8)}
              </h3>
              <div className="flex items-center mb-2">
                <span className="text-gray-700 mr-2">Estado:</span>
                <span
                  className={`inline-block px-2 py-1 font-semibold text-sm rounded-full ${getStatusBadgeClass(
                    order.status
                  )}`}
                >
                  {order.status}
                </span>
              </div>
              <p className="text-gray-700 mb-2">Sede: {order.sede}</p>
              <p className="text-gray-700 mb-2">
                Fecha: {order.orderDate.toLocaleDateString()}{" "}
                {order.orderDate.toLocaleTimeString()}
              </p>
              <p className="text-gray-700 mb-3 font-semibold">
                Total: {formatPriceCOP(order.total)}
              </p>

              <div className="flex justify-between">
                <button
                  onClick={() => handleOpenDetails(order)}
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-sm"
                >
                  Ver Detalles
                </button>
                {(userRole === "admin" || userRole === "encargado") && (
                  <div className="space-x-2">
                    <button
                      onClick={() => handleStatusUpdate(order.id, "atendiendo")}
                      disabled={order.status === "atendiendo"}
                      className="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline text-xs"
                    >
                      Atender
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(order.id, "preparando")}
                      disabled={order.status === "preparando"}
                      className="bg-yellow-500 hover:bg-yellow-700 text-gray-800 font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline text-xs"
                    >
                      Preparar
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(order.id, "enviado")}
                      disabled={order.status === "enviado"}
                      className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline text-xs"
                    >
                      Enviar
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {openDetails && selectedPedidoDetails && (
        <div
          className="fixed z-50 inset-0 overflow-y-auto"
          aria-labelledby="modal-title"
          role="dialog"
          aria-modal="true"
        >
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              aria-hidden="true"
              onClick={handleCloseDetails}
            ></div>
            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            ></span>
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3
                  className="text-lg leading-6 font-medium text-gray-900"
                  id="modal-title"
                >
                  Detalle Completo de la Orden No.{" "}
                  {selectedPedidoDetails.orderId.substring(0, 8)}
                </h3>
                <div className="mt-4">
                  <div className="grid grid-cols-1 gap-4">
                    <div>
                      <p>
                        <strong>Order ID:</strong> {selectedPedidoDetails.id}
                      </p>
                      <p>
                        <strong>Estado:</strong>{" "}
                        <span
                          className={`inline-block px-2 py-1 font-semibold text-sm rounded-full ${getStatusBadgeClass(
                            selectedPedidoDetails.status
                          )}`}
                        >
                          {selectedPedidoDetails.status}
                        </span>
                      </p>
                      <p>
                        <strong>Total:</strong>{" "}
                        {formatPriceCOP(selectedPedidoDetails.total)}
                      </p>
                      <p>
                        <strong>Costo de Envío:</strong>{" "}
                        {formatPriceCOP(selectedPedidoDetails.deliveryFee)}
                      </p>
                      <p>
                        <strong>Método de Pago:</strong>{" "}
                        {selectedPedidoDetails.paymentMethod}
                      </p>
                      <p>
                        <strong>Domicilio Incluido:</strong>{" "}
                        {selectedPedidoDetails.deliveryIncluded ? "Sí" : "No"}
                      </p>
                      <p>
                        <strong>Sede:</strong> {selectedPedidoDetails.sede}
                      </p>
                      <p>
                        <strong>Fecha del Pedido:</strong>{" "}
                        {selectedPedidoDetails.orderDate.toLocaleString()}
                      </p>
                      <p>
                        <strong>Personas:</strong>{" "}
                        {selectedPedidoDetails.people
                          .map((p) => p.name)
                          .join(", ")}
                      </p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-2">
                        Pedidos por Persona:
                      </h4>
                      {selectedPedidoDetails.people.map((person) => (
                        <div
                          key={person.id}
                          className="mb-3 p-2 rounded border border-gray-200"
                        >
                          <h5 className="font-semibold">{person.name}</h5>
                          <ul className="list-disc pl-5">
                            {selectedPedidoDetails.items
                              .filter((item) => item.assignedTo === person.name)
                              .map((item, index) => {
                                const menuItem = menu.find(
                                  (menuItem) => menuItem.id === item.id
                                ); // Find menu item by id
                                return (
                                  <li key={index}>
                                    {menuItem
                                      ? menuItem.name
                                      : "Producto no encontrado"}{" "}
                                    (Cantidad: {item.quantity})
                                    {/* Display item name */}
                                  </li>
                                );
                              })}
                          </ul>
                        </div>
                      ))}
                      {selectedPedidoDetails.sharedItems &&
                        selectedPedidoDetails.sharedItems.length > 0 && (
                          <div className="mb-3 p-2 rounded border border-gray-200">
                            <h5 className="font-semibold">Pedido Compartido</h5>
                            <ul className="list-disc pl-5">
                              {selectedPedidoDetails.sharedItems.map(
                                (sharedItem, index) => {
                                  const menuItem = menu.find(
                                    (menuItem) =>
                                      menuItem.id === sharedItem.itemId
                                  ); // Find shared menu item by id
                                  return (
                                    <li key={index}>
                                      {menuItem
                                        ? menuItem.name
                                        : "Producto no encontrado"}{" "}
                                      (Cantidad Compartida:{" "}
                                      {sharedItem.quantity})
                                      {/* Display shared item name */}
                                    </li>
                                  );
                                }
                              )}
                            </ul>
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-gray-100 text-base font-medium text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={handleCloseDetails}
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PedidoList;
/* Fin src\components\pedidos\PedidoList.tsx */

/* Fin src\components\pedidos\PedidoList.tsx */

/* Inicio src\components\ui\Button.tsx */
/* src\components\ui\Button.tsx */
import React, { ButtonHTMLAttributes, ReactNode } from "react";

type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {
  children: ReactNode;
  variant?: "primary" | "secondary" | "text" | "outlined" | "contained"; // Define variants if needed
  color?:
    | "primary"
    | "secondary"
    | "error"
    | "warning"
    | "info"
    | "success"
    | "inherit"; // Define colors if needed
};

const Button: React.FC<ButtonProps> = ({
  children,
  variant = "contained", // Default variant
  color = "primary", // Default color
  className,
  ...props
}) => {
  let buttonClasses =
    "font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50";

  // Color and variant styles (customize as needed)
  if (variant === "contained") {
    if (color === "primary") {
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    } else if (color === "secondary") {
      buttonClasses += " bg-red-500 hover:bg-red-700 text-white";
    } else if (color === "error") {
      buttonClasses += " bg-red-600 hover:bg-red-800 text-white";
    } else if (color === "warning") {
      buttonClasses += " bg-yellow-500 hover:bg-yellow-700 text-gray-800";
    } else if (color === "success") {
      buttonClasses += " bg-green-500 hover:bg-green-700 text-white";
    } else {
      // Default primary
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    }
  } else if (variant === "outlined") {
    if (color === "primary") {
      buttonClasses +=
        " border border-blue-500 hover:bg-blue-100 text-blue-700";
    } else if (color === "secondary") {
      buttonClasses += " border border-red-500 hover:bg-red-100 text-red-700";
    } else if (color === "error") {
      buttonClasses += " border border-red-600 hover:bg-red-100 text-red-800";
    } else if (color === "warning") {
      buttonClasses +=
        " border border-yellow-500 hover:bg-yellow-100 text-yellow-700";
    } else if (color === "success") {
      buttonClasses +=
        " border border-green-500 hover:bg-green-100 text-green-700";
    } else {
      // Default primary
      buttonClasses +=
        " border border-blue-500 hover:bg-blue-100 text-blue-700";
    }
  } else {
    // Default contained
    if (color === "primary") {
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    } else {
      // Default primary
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    }
  }

  return (
    <button {...props} className={`${buttonClasses} ${className || ""}`}>
      {children}
    </button>
  );
};

export default Button;
/* Fin src\components\ui\Button.tsx */

/* Inicio src\components\ui\Container.tsx */
// src/components/ui/Container.tsx
import React, { ReactNode } from 'react';

interface ContainerProps {
  children: ReactNode;
  className?: string; // Para clases adicionales de Tailwind si las necesitas
}

const Container: React.FC<ContainerProps> = ({ children, className }) => {
  return (
    <div className={`container mx-auto px-4 ${className || ''}`}> {/* Clases container, margen horizontal automático y padding x por defecto, y clases adicionales */}
      {children}
    </div>
  );
};

export default Container;
/* Fin src\components\ui\Container.tsx */

/* Inicio src\components\ui\ErrorBoundry.tsx */
// src/components/ui/ErrorBoundry.tsx
import { Alert } from "@mui/material";
import React, { Component, ErrorInfo, ReactNode } from "react";

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Error caught by error boundary", error, errorInfo);
    this.setState({ errorInfo });
  }

  render() {
    if (this.state.hasError) {
      return (
        <Alert severity="error" className="mt-4 rounded-md shadow-sm">
          {" "}
          {/* Added Tailwind classes to Alert */}
          Algo salió mal
        </Alert>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

/* Fin src\components\ui\ErrorBoundry.tsx */

/* Inicio src\components\ui\ListItem.tsx */
/* src\components\ui\ListItem.tsx */
import React, { forwardRef, ReactNode } from "react";
import { Link } from "react-router-dom";

interface ListItemProps extends React.LiHTMLAttributes<HTMLLIElement> {
  children: ReactNode;
  onClick?: () => void;
  to?: string;
  href?: string;
  button?: boolean;
}

const ListItem = forwardRef<HTMLLIElement, ListItemProps>(
  ({ children, onClick, to, href, button, className, ...props }, ref) => {
    const handleClick = () => {
      if (onClick) {
        onClick();
      }
    };

    const commonClasses = `block py-2 px-4 text-sm hover:bg-gray-100 text-gray-700`;
    const buttonClasses = button
      ? `${commonClasses} cursor-pointer`
      : commonClasses;

    const listItemContent = (
      <li
        ref={ref}
        onClick={handleClick}
        className={`${buttonClasses} ${className || ""}`}
        {...props}
      >
        {children}
      </li>
    );

    if (to) {
      return (
        <li ref={ref} className={className} {...props}>
          <Link to={to} className={`${commonClasses} block`}>
            {children}
          </Link>
        </li>
      );
    }

    if (href) {
      return (
        <li ref={ref} className={className} {...props}>
          <a href={href} className={`${commonClasses} block`}>
            {children}
          </a>
        </li>
      );
    }

    return listItemContent;
  }
);

ListItem.displayName = "ListItem";

export default ListItem;

/* Fin src\components\ui\ListItem.tsx */

/* Inicio src\components\ui\TextField.tsx */
/* src\components\ui\TextField.tsx */
import React, { InputHTMLAttributes } from "react";

type TextFieldProps = InputHTMLAttributes<HTMLInputElement> & {
  label?: string;
};

const TextField: React.FC<TextFieldProps> = ({
  label,
  className,
  ...props
}) => {
  return (
    <div>
      {label && (
        <label
          htmlFor={props.id}
          className="block text-sm font-medium text-gray-700"
        >
          {label}
        </label>
      )}
      <input
        {...props}
        className={`mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${
          className || ""
        }`}
      />
    </div>
  );
};

export default TextField;

/* Fin src\components\ui\TextField.tsx */

/* Inicio src\context\AppContext.tsx */
/* src\context\AppContext.tsx */
/* src\context\AppContext.tsx */
import { CircularProgress } from "@mui/material";
import { collection, onSnapshot } from "firebase/firestore";
import React, { createContext, ReactNode, useEffect, useState } from "react";
import ErrorBoundary from "../components/ui/ErrorBoundry";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export interface MenuItem {
  // Exporta la interfaz MenuItem
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
  recommendation: string;
  observations: string;
  availabilityStatus:
    | "disponible"
    | "noDisponibleMomento"
    | "noDisponibleLargoPlazo";
}

export type MenuItemType = MenuItem; // Define y exporta MenuItemType como alias de MenuItem

export interface AppContextProps {
  menu: MenuItemType[]; // Usa MenuItemType aquí
  loading: boolean;
}

export const AppContext = createContext<AppContextProps>({
  menu: [],
  loading: true,
});

interface AppProviderProps {
  children: ReactNode;
}

export const AppProvider: React.FC<AppProviderProps> = ({ children }) => {
  const [menu, setMenu] = useState<MenuItemType[]>([]); // Usa MenuItemType aquí
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let unsubscribe: () => void;
    try {
      const menuCollection = collection(db, COLLECTIONS.MENU);
      unsubscribe = onSnapshot(menuCollection, (snapshot) => {
        const menuData = snapshot.docs.map(
          (doc) => ({ id: doc.id, ...doc.data() } as MenuItemType) // Cassting a MenuItemType
        );
        setMenu(menuData);
        setLoading(false);
      });
    } catch (error) {
      console.error(error);
      setLoading(false);
    }
    return () => unsubscribe && unsubscribe();
  }, []);

  return (
    <AppContext.Provider value={{ menu, loading }}>
      <ErrorBoundary>{loading ? <CircularProgress /> : children}</ErrorBoundary>
    </AppContext.Provider>
  );
};

/* Fin src\context\AppContext.tsx */

/* Inicio src\context\AuthContext.tsx */
/* src\context\AuthContext.tsx */
// src/context/AuthContext.tsx

import {
  User,
  createUserWithEmailAndPassword,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth";
import { doc, getDoc, setDoc, updateDoc } from "firebase/firestore";
import React, { ReactNode, createContext, useEffect, useState } from "react";
import { auth, db } from "../utils/firebase";

export interface AuthContextProps {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  userRole: string | null;
  points: number;
  addPoints: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextProps>({
  user: null,
  loading: false,
  login: async () => {},
  register: async () => {},
  logout: async () => {},
  userRole: null,
  points: 0,
  addPoints: async () => {},
});

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [points, setPoints] = useState<number>(0);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        const userDocRef = doc(db, "users", currentUser.uid);
        try {
          const userDoc = await getDoc(userDocRef);
          if (userDoc.exists()) {
            setUserRole(userDoc.data().role);
            setPoints(userDoc.data().points || 0);
          } else {
            // Crear documento de usuario si no existe
            await setDoc(userDocRef, {
              role: "client",
              points: 0,
              email: currentUser.email,
            });
            setUserRole("client");
            setPoints(0);
          }
          setUser(currentUser);
        } catch (error) {
          console.error("Error fetching user document:", error);
          setUser(currentUser); // Even with error, set user to prevent login loop
        } finally {
          setLoading(false);
        }
      } else {
        setUser(null);
        setUserRole(null);
        setPoints(0);
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;

      const userDoc = await getDoc(doc(db, "users", user.uid));
      if (userDoc.exists()) {
        setUserRole(userDoc.data().role);
        setPoints(userDoc.data().points || 0);
      } else {
        setUserRole("client");
        setPoints(0);
      }
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  const register = async (email: string, password: string) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;

      await setDoc(doc(db, "users", user.uid), {
        role: "client",
        points: 0,
        email: email,
      });

      setUserRole("client");
      setPoints(0);
    } catch (error) {
      console.error(
        "Error en el registro:",
        (error as { message: string }).message
      );
      throw new Error((error as { message: string }).message);
    }
  };

  const addPoints = async () => {
    if (!user) return;

    try {
      await updateDoc(doc(db, "users", user.uid), {
        points: points + 10,
      });
      setPoints((prevPoints) => prevPoints + 10);
    } catch (error) {
      console.error("Error al sumar puntos", error);
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      setUserRole(null);
      setPoints(0);
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        login,
        register,
        logout,
        userRole,
        points,
        addPoints,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

/* Fin src\context\AuthContext.tsx */

/* Inicio src\hooks\useAuth.ts */
import { useContext } from 'react';
import { AuthContext, AuthContextProps } from '../context/AuthContext';

export const useAuth = (): AuthContextProps => {
    const context = useContext<AuthContextProps>(AuthContext);
    if (!context) {
        throw new Error("useAuth must be used within a AuthProvider")
    }
    return context;
};
/* Fin src\hooks\useAuth.ts */

/* Inicio src\hooks\useMenu.ts */
import { useContext } from 'react';
import { AppContext, AppContextProps } from '../context/AppContext';

export const useMenu = (): AppContextProps => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error("useMenu must be used within a AppProvider")
  }
  return context;
};
/* Fin src\hooks\useMenu.ts */

/* Inicio src\main.tsx */
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

/* Fin src\main.tsx */

/* Inicio src\pages\Dashboard.tsx */
/* src\pages\Dashboard.tsx */
import {
  BarElement,
  CategoryScale,
  Chart as ChartJS,
  Legend,
  LinearScale,
  Title,
  Tooltip,
} from "chart.js";
import {
  collection,
  doc,
  onSnapshot, // Import updateDoc here
  query,
  setDoc,
  updateDoc,
  where,
} from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { Bar } from "react-chartjs-2";
import { v4 as uuidv4 } from "uuid"; // Import UUID
import { useAuth } from "../hooks/useAuth";
import { db } from "../utils/firebase";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

/** Interfaz para pedido */
interface Pedido {
  id: string;
  status: string;
  total: number;
  orderDate: Date;
  userId: string; // Asegúrate de que tu interfaz Pedido incluya userId
}

interface Task {
  id: string;
  taskId: string;
  taskName: string;
  taskType: "daily" | "periodic";
  dueDate?: Date | null;
  dailyCompletions: { [date: string]: boolean }; // Track completion per day
  completionDate?: Date | null;
  dayOfWeek?: number;
  subtasks?: string[];
}

// Estados que manejaremos en la app
const ALL_STATUSES = [
  "pendiente",
  "atendiendo",
  "preparando",
  "enviado",
  "entregado",
];

const defaultDailyTasks = [
  {
    taskName: "Hacer el aseo del restaurante",
    subtasks: [
      "Barrer y trapear pisos",
      "Limpiar mesas y sillas",
      "Vaciar papeleras",
      "Limpiar baños",
    ],
  },
  { taskName: "Lavar la freidora", subtasks: [] },
  {
    taskName: "Revisar inventario y hacer pedidos si es necesario",
    subtasks: [
      "Verificar niveles de stock",
      "Listar productos a pedir",
      "Enviar pedido a proveedores",
      "Recibir y organizar pedido",
    ],
  },
];

const periodicTasksConfig = [
  { dayOfMonth: 25, taskName: "Pagar arriendo", taskType: "periodic" },
  { dayOfMonth: 25, taskName: "Pagar factura de luz", taskType: "periodic" },
  { dayOfMonth: 25, taskName: "Pagar factura de agua", taskType: "periodic" },
  // Add more periodic tasks as needed
];

const Dashboard: React.FC = () => {
  const { user, userRole, points } = useAuth();
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loadingTasks, setLoadingTasks] = useState<boolean>(true);

  // Para filtrar por un estado específico o "todos"
  const [selectedStatus, setSelectedStatus] = useState<string | "todos">(
    "todos"
  );

  // Métricas generales
  const [todaySales, setTodaySales] = useState<number>(0);
  const [monthSales, setMonthSales] = useState<number>(0);
  const [pendingOrdersCount, setPendingOrdersCount] = useState<number>(0);
  const [totalOrders, setTotalOrders] = useState<number>(0);
  const [, setClientTotalOrders] = useState<number>(0); // Total pedidos del cliente

  // Gráficos (últimos 7 días + últimos 6 meses)
  const [dailyLabels, setDailyLabels] = useState<string[]>([]);
  const [dailyData, setDailyData] = useState<number[]>([]);
  const [monthlyLabels, setMonthlyLabels] = useState<string[]>([]);
  const [monthlyData, setMonthlyData] = useState<number[]>([]);

  useEffect(() => {
    // Escuchamos la colección 'pedidos'
    let pedidosQuery = collection(db, "pedidos");
    if (userRole === 'client' && user) {
      pedidosQuery = query(pedidosQuery, where("userId", "==", user.uid)) as never;
    }

    const unsubscribe = onSnapshot(pedidosQuery, (snapshot) => {
      const pedidosData: Pedido[] = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          status: data.status,
          total: data.total,
          orderDate: data.orderDate?.toDate
            ? data.orderDate.toDate()
            : new Date(), // fallback
          userId: data.userId, // Asegúrate de mapear userId
        } as Pedido;
      });
      setPedidos(pedidosData);
      setLoading(false);
    }, (error) => {
      console.error("Error en el listener de pedidos:", error);
      setLoading(false);
    });
    return () => unsubscribe();
  }, [user, userRole]);

  useEffect(() => {
    // Conditionally subscribe to tasks only if user is admin or encargado
    if (userRole === 'admin' || userRole === 'encargado') {
      const today = new Date();
      const todayDateString = today.toISOString().split("T")[0];

      const tasksCollection = collection(db, "tasks");
      const unsubscribeTasks = onSnapshot(tasksCollection, (snapshot) => {
        let fetchedTasks: Task[] = snapshot.docs.map((doc) => {
          const data = doc.data();
          return {
            id: doc.id,
            taskId: data.taskId,
            taskName: data.taskName,
            taskType: data.taskType,
            dueDate: data.dueDate ? data.dueDate.toDate() : null,
            dailyCompletions: data.dailyCompletions || {}, // Initialize dailyCompletions
            completionDate: data.completionDate
              ? data.completionDate.toDate()
              : null,
            subtasks: data.subtasks || [],
          } as Task;
        });

        // Filter for today's daily tasks and periodic tasks due today
        fetchedTasks = fetchedTasks.filter((task) => {
          if (task.taskType === "daily") {
            return true; // Show all daily tasks
          } else if (task.taskType === "periodic" && task.dueDate) {
            const taskDueDate = task.dueDate;
            return taskDueDate.toISOString().split("T")[0] === todayDateString;
          }
          return false;
        });
        setTasks(fetchedTasks);
        setLoadingTasks(false);

        if (fetchedTasks.length === 0) {
          // Initialize daily tasks if none exist for today
          defaultDailyTasks.forEach(async (defaultTask) => {
            await addDefaultTask(
              defaultTask.taskName,
              "daily",
              defaultTask.subtasks
            );
          });
          // Initialize periodic tasks if today is the day for them and they don't exist
          periodicTasksConfig.forEach(async (periodicTaskConfig) => {
            if (today.getDate() === periodicTaskConfig.dayOfMonth) {
              const taskExists = fetchedTasks.some(
                (task) =>
                  task.taskType === "periodic" &&
                  task.taskName === periodicTaskConfig.taskName &&
                  task.dueDate &&
                  task.dueDate.getDate() === today.getDate() &&
                  task.dueDate.getMonth() === today.getMonth() &&
                  task.dueDate.getFullYear() === today.getFullYear()
              );
              if (!taskExists) {
                const dueDate = new Date(
                  today.getFullYear(),
                  today.getMonth(),
                  periodicTaskConfig.dayOfMonth
                );
                await addDefaultTask(
                  periodicTaskConfig.taskName,
                  "periodic",
                  [],
                  dueDate
                );
              }
            }
          });
        }
      }, (error) => {
        console.error("Error en el listener de tareas:", error);
        setLoadingTasks(false);
      });
      return () => unsubscribeTasks();
    } else {
      setLoadingTasks(false); // If not admin/encargado, we are not loading tasks
    }
  }, [userRole]);

  const addDefaultTask = async (
    taskName: string,
    taskType: "daily" | "periodic",
    subtasks: string[] = [],
    dueDate: Date | null = null
  ) => {
    try {
      await setDoc(doc(collection(db, "tasks"), uuidv4()), {
        // use uuid as doc id
        taskId: uuidv4(), // add taskId
        taskName: taskName,
        taskType: taskType,
        completed: false,
        dailyCompletions: {}, // Initialize dailyCompletions to empty object
        subtasks: subtasks,
        dueDate: dueDate || null,
      });
    } catch (error) {
      console.error("Error adding default task:", error);
    }
  };

  // Recalcula estadísticas cuando cambien los pedidos o el filtro de estado
  useEffect(() => {
    if (!pedidos.length) {
      // Si no hay pedidos, limpiamos
      setTodaySales(0);
      setMonthSales(0);
      setPendingOrdersCount(0);
      setTotalOrders(0);
      setDailyLabels([]);
      setDailyData([]);
      setMonthlyLabels([]);
      setMonthlyData([]);
      setClientTotalOrders(0); // Reset client total orders
      return;
    }

    const filtered =
      selectedStatus === "todos"
        ? pedidos
        : pedidos.filter((p) => p.status === selectedStatus);

    // ---------- Estadísticas simples ----------
    const now = new Date();
    const today = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate()
    ).getTime();

    let sumToday = 0;
    let sumMonth = 0;
    let pendingCount = 0;
    const totalCount = filtered.length;
    let clientOrderCount = 0; // Contador para pedidos del cliente

    filtered.forEach((pedido) => {
      // Fecha sin hora del pedido
      const pedidoDate = new Date(
        pedido.orderDate.getFullYear(),
        pedido.orderDate.getMonth(),
        pedido.orderDate.getDate()
      ).getTime();

      // Venta de hoy
      if (pedidoDate === today) {
        sumToday += pedido.total;
      }

      // Venta del mes actual
      const isThisMonth =
        pedido.orderDate.getMonth() === now.getMonth() &&
        pedido.orderDate.getFullYear() === now.getFullYear();
      if (isThisMonth) {
        sumMonth += pedido.total;
      }

      // Pedidos pendientes
      if (pedido.status === "pendiente") {
        pendingCount++;
      }

      if (userRole === 'client' && user && pedido.userId === user.uid) {
        clientOrderCount++; // Incrementa solo si es pedido del cliente
      }
    });

    setTodaySales(sumToday);
    setMonthSales(sumMonth);
    setPendingOrdersCount(pendingCount);
    setTotalOrders(totalCount);
    setClientTotalOrders(clientOrderCount); // Establece el total de pedidos del cliente

    // ---------- Gráfico: últimos 7 días ----------
    const last7Dates = Array.from({ length: 7 }).map((_, i) => {
      const d = new Date();
      // "hace (6 - i) días" para que se armen en orden cronológico
      d.setDate(d.getDate() - (6 - i));
      return d;
    });

    const daysLabels: string[] = [];
    const daysData: number[] = [];

    last7Dates.forEach((date) => {
      // Etiqueta: "dd/MM"
      const dayKey = date.toLocaleDateString("es-ES", {
        day: "2-digit",
        month: "2-digit",
      });
      daysLabels.push(dayKey);

      let dayTotal = 0;
      filtered.forEach((pedido) => {
        if (
          pedido.orderDate.getDate() === date.getDate() &&
          pedido.orderDate.getMonth() === date.getMonth() &&
          pedido.orderDate.getFullYear() === date.getFullYear()
        ) {
          dayTotal += pedido.total;
        }
      });
      daysData.push(dayTotal);
    });

    setDailyLabels(daysLabels);
    setDailyData(daysData);

    // ---------- Gráfico: últimos 6 meses ----------
    const last6Months = Array.from({ length: 6 }).map((_, i) => {
      const d = new Date();
      // retrocedemos (5 - i) meses
      d.setMonth(d.getMonth() - (5 - i));
      d.setDate(1);
      return d;
    });

    const monthLabels: string[] = [];
    const monthTotals: number[] = [];

    last6Months.forEach((date) => {
      // Etiqueta "MM/YY"
      const label = date.toLocaleDateString("es-ES", {
        month: "2-digit",
        year: "2-digit",
      });
      monthLabels.push(label);

      let monthTotal = 0;
      filtered.forEach((pedido) => {
        if (
          pedido.orderDate.getFullYear() === date.getFullYear() &&
          pedido.orderDate.getMonth() === date.getMonth()
        ) {
          monthTotal += pedido.total;
        }
      });
      monthTotals.push(monthTotal);
    });

    setMonthlyLabels(monthLabels);
    setMonthlyData(monthTotals);
  }, [pedidos, selectedStatus, userRole, user]);

  // Opciones genéricas para los gráficos
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false as const,
      },
      tooltip: {
        backgroundColor: "#1e293b", // gris oscuro
        titleColor: "#fff",
        bodyColor: "#fff",
        callbacks: {
          label: function (context) {
            let label = context.dataset.label || "";
            if (label) {
              label += ": ";
            }
            if (context.parsed.y !== null) {
              label += new Intl.NumberFormat("es-CO", {
                style: "currency",
                currency: "COP",
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
              }).format(context.parsed.y);
            }
            return label;
          },
        },
      },
    },
  };

  // Dataset para gráfico diario
  const dailyChartData = {
    labels: dailyLabels,
    datasets: [
      {
        label: "Ventas diarias",
        data: dailyData,
        backgroundColor: "#4F46E5", // Indigo-600
        borderRadius: 4,
      },
    ],
  };

  // Dataset para gráfico mensual
  const monthlyChartData = {
    labels: monthlyLabels,
    datasets: [
      {
        label: "Ventas mensuales",
        data: monthlyData,
        backgroundColor: "#22C55E", // Green-500
        borderRadius: 4,
      },
    ],
  };

  // Para saber si debemos mostrar la parte de admin/encargado
  const showAdminStats = userRole === "admin" || userRole === "encargado";
  const showChecklist = userRole === "admin" || userRole === "encargado";
  const showClientStats = userRole === 'client';

  const handleTaskCompletionChange = async (
    taskId: string,
    completed: boolean
  ) => {
    const todayDate = new Date().toISOString().split("T")[0]; // YYYY-MM-DD
    try {
      const taskDocRef = doc(db, "tasks", taskId);
      await updateDoc(taskDocRef, {
        [`dailyCompletions.${todayDate}`]: completed, // Update completion for today
        completionDate: completed ? new Date() : null, // Optionally update completionDate
      });

      setTasks((currentTasks) =>
        currentTasks.map((task) => {
          if (task.id === taskId) {
            return {
              ...task,
              dailyCompletions: {
                ...task.dailyCompletions,
                [todayDate]: completed,
              },
              completionDate: completed ? new Date() : null,
            };
          }
          return task;
        })
      );
    } catch (error) {
      console.error("Error updating task completion:", error);
    }
  };

  const last7Days = Array.from({ length: 7 }, (_, i) => {
    const day = new Date();
    day.setDate(day.getDate() - i);
    return day;
  }).reverse();

  const last7DaysFormatted = last7Days.map(
    (day) => day.toISOString().split("T")[0]
  );



  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  if (loading || loadingTasks) {
    return (
      <div className="pt-20 p-4 text-center">
        <p className="text-xl animate-pulse">Cargando Dashboard...</p>
      </div>
    );
  }

  if (showClientStats) {
    return (
      <div className="pt-20 p-4 md:p-6 bg-gray-100 min-h-screen">
        <h1 className="text-3xl font-bold text-gray-900 mb-4 transition-all duration-300 hover:scale-105">
          Bienvenido a SrPol! <span className="text-sm ml-2">({user?.email})</span>
        </h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-700 font-semibold text-lg mb-2">Descubre nuestro Menú</p>
            <p className="text-gray-600">Explora deliciosos platos y arma tu pedido.</p>
             <p className="text-2xl font-bold text-indigo-600 mt-4">¡Haz tu pedido ahora!</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-700 font-semibold text-lg mb-2">Acumula Puntos</p>
            <p className="text-gray-600">Cada pedido te da puntos para descuentos.</p>
            <p className="text-2xl font-bold text-green-600 mt-4">Tienes {points} puntos.</p>
          </div>
        </div>

        <div className="bg-white rounded shadow p-4 mb-6 text-center">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">
              ¿Listo para ordenar?
            </h2>
            <p className="text-gray-600 mb-4">
                Navega por nuestro menú, personaliza tu pedido y disfruta de la mejor comida.
            </p>
            <p className="text-lg text-indigo-700 font-semibold">
                ¡Empieza a explorar nuestro menú hoy mismo!
            </p>
          </div>

      </div>
    );
  }

  return (
    <div className="pt-20 p-4 md:p-6 bg-gray-100 min-h-screen">
      {/* Título */}
      <h1 className="text-3xl font-bold text-gray-900 mb-4 transition-all duration-300 hover:scale-105">
        Dashboard
        {user?.email && <span className="text-sm ml-2">({user.email})</span>}
      </h1>

      {/* Filtro por estado */}
      {showAdminStats && (
        <div className="flex flex-wrap items-center mb-6 gap-2">
          {/* ... filter buttons for admin/encargado ... */}
          <button
            onClick={() => setSelectedStatus("todos")}
            className={`px-4 py-2 rounded-md text-sm font-medium shadow-sm transition transform hover:scale-105
              ${
                selectedStatus === "todos"
                  ? "bg-indigo-600 text-white"
                  : "bg-white text-gray-800 hover:bg-gray-200"
              }`}
          >
            Todos
          </button>
          {ALL_STATUSES.map((status) => (
            <button
              key={status}
              onClick={() => setSelectedStatus(status)}
              className={`px-4 py-2 rounded-md text-sm font-medium shadow-sm transition transform hover:scale-105
                ${
                  selectedStatus === status
                    ? "bg-indigo-600 text-white"
                    : "bg-white text-gray-800 hover:bg-gray-200"
                }`}
            >
              {status.charAt(0).toUpperCase() + status.slice(1)}
            </button>
          ))}
        </div>
      )}


      {/* Sección de Tarjetas de estadísticas */}
      {showAdminStats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          {/* ... statistic cards for admin/encargado ... */}
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Total de Pedidos</p>
            <p className="text-2xl font-bold text-indigo-600">{totalOrders}</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Ventas Hoy</p>
            <p className="text-2xl font-bold text-indigo-600">
              {formatPriceCOP(todaySales)}
            </p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Ventas del Mes</p>
            <p className="text-2xl font-bold text-indigo-600">
              {formatPriceCOP(monthSales)}
            </p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Pedidos Pendientes</p>
            <p className="text-2xl font-bold text-indigo-600">
              {pendingOrdersCount}
            </p>
          </div>
        </div>
      )}

      {/* Gráfico de Ventas Diarias (últimos 7 días) */}
      {showAdminStats && (
        <div className="bg-white rounded shadow p-4 mb-6">
          {/* ... daily sales chart for admin/encargado ... */}
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Ventas diarias (últimos 7 días)
          </h2>
          <div className="h-64">
            <Bar data={dailyChartData} options={chartOptions} />
          </div>
        </div>
      )}


      {/* Gráfico de Ventas Mensuales (últimos 6 meses) */}
      {showAdminStats && (
        <div className="bg-white rounded shadow p-4 mb-6">
          {/* ... monthly sales chart for admin/encargado ... */}
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Ventas mensuales (últimos 6 meses)
          </h2>
          <div className="h-64">
            <Bar data={monthlyChartData} options={chartOptions} />
          </div>
        </div>
      )}


      {/* Daily Checklist Section */}
      {showChecklist && (
        <div className="bg-white rounded shadow p-4 mb-6">
          {/* ... daily checklist for admin/encargado ... */}
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Checklist Diario de Tareas (Hoy)
          </h2>
          <ul>
            {tasks.map((task) => (
              <li
                key={task.id}
                className="py-2 border-b border-gray-200 last:border-b-0"
              >
                <div className="flex items-center justify-between">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-indigo-600 rounded focus:ring-indigo-500"
                      checked={
                        task.dailyCompletions[
                          new Date().toISOString().split("T")[0]
                        ] === true
                      } // Check against today's completion status
                      onChange={(e) =>
                        handleTaskCompletionChange(task.id, e.target.checked)
                      }
                    />
                    <span className="ml-2 text-gray-700">{task.taskName}</span>
                  </label>
                </div>
                {task.subtasks && task.subtasks.length > 0 && (
                  <ul className="ml-6 mt-1">
                    {task.subtasks.map((subtask, index) => (
                      <li
                        key={index}
                        className="text-sm text-gray-500 list-disc ml-4"
                      >
                        {subtask}
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}

      {showChecklist && (
        <div className="bg-white rounded shadow p-4 mb-6 overflow-x-auto">
          {/* ... weekly task status table for admin/encargado ... */}
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Estado de Tareas Semanal
          </h2>
          <div className="overflow-x-auto">
            <table className="min-w-full table-fixed border-collapse border border-gray-200">
              <thead>
                <tr>
                  <th className="border border-gray-200 px-4 py-2 text-left">
                    Tarea
                  </th>
                  {last7Days.map((day) => (
                    <th
                      key={day.toISOString().split("T")[0]}
                      className="border border-gray-200 px-4 py-2 text-center"
                    >
                      {day.toLocaleDateString("es-ES", { weekday: "short" })}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {tasks.map((task) => (
                  <tr key={task.taskId}>
                    <td className="border border-gray-200 px-4 py-2">
                      {task.taskName}
                    </td>
                    {last7DaysFormatted.map((date) => (
                      <td
                        key={`${task.taskId}-${date}`}
                        className="border border-gray-200 px-4 py-2 text-center"
                      >
                        {task.dailyCompletions[date] ? "✅" : "❌"}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Aquí podrías agregar más secciones o gráficos */}
    </div>
  );
};

export default Dashboard;
/* Fin src\pages\Dashboard.tsx */

/* Inicio src\pages\GestionMenu.tsx */
import { Alert, Snackbar } from '@mui/material'
import { addDoc, collection, doc, updateDoc } from 'firebase/firestore'
import React, { useState } from 'react'
import MenuList from '../components/menu/MenuList'
import MenuModal from '../components/menu/MenuModal'
import Button from '../components/ui/Button' // Importa el Button de Tailwind
import Container from '../components/ui/Container' // Importa Container de Tailwind si lo creaste, sino usa un div normal
import { MenuItem } from '../context/AppContext'
import { useAuth } from '../hooks/useAuth' // Importa useAuth
import { useMenu } from '../hooks/useMenu'
import { COLLECTIONS } from '../utils/constants'
import { db } from '../utils/firebase'

const GestionMenu: React.FC = () => {
  const { menu, loading } = useMenu()
  const [openModal, setOpenModal] = useState(false)
  const [selectedItem, setSelectedItem] = useState<MenuItem | null>(null)
  const [snackbar, setSnackbar] = useState<{
    open: boolean
    message: string
    severity: 'success' | 'error'
  }>({ open: false, message: '', severity: 'success' })
  const { userRole } = useAuth() // Obtiene el rol del usuario
  const [loadingSampleData, setLoadingSampleData] = useState(false) // Estado de carga para el botón de datos de ejemplo

  if (loading) {
    return <div>Cargando...</div>
  }

  const handleOpenModal = () => {
    setOpenModal(true)
    setSelectedItem(null)
  }

  const handleCloseModal = () => {
    setOpenModal(false)
    setSelectedItem(null)
  }

  const handleEdit = (item: MenuItem) => {
    setSelectedItem(item)
    setOpenModal(true)
  }

  const handleDelete = async (item: MenuItem) => {
    if (
      !window.confirm(
        `¿Estás seguro de marcar como no disponible a largo plazo el item "${item.name}"?`,
      )
    )
      return
    try {
      // Al "eliminar" un item, se actualiza su estado a "noDisponibleLargoPlazo" y available a false
      await updateDoc(doc(db, COLLECTIONS.MENU, item.id), {
        availabilityStatus: 'noDisponibleLargoPlazo', // Se marca como no disponible a largo plazo
        available: false, // Se marca como no disponible para que no aparezca en el menu para clientes
      })
      setSnackbar({
        open: true,
        message: 'Item marcado como no disponible a largo plazo.',
        severity: 'success',
      })
    } catch (error) {
      console.error(error)
      setSnackbar({
        open: true,
        message: 'Error al actualizar el item.',
        severity: 'error',
      })
    }
  }

  const handleSubmit = async (values: Partial<MenuItem>) => {
    try {
      if (selectedItem) {
        await updateDoc(doc(db, COLLECTIONS.MENU, selectedItem.id), values)
        setSnackbar({
          open: true,
          message: 'Item actualizado exitosamente.',
          severity: 'success',
        })
      } else {
        await addDoc(collection(db, COLLECTIONS.MENU), values)
        setSnackbar({
          open: true,
          message: 'Item agregado exitosamente.',
          severity: 'success',
        })
      }
      handleCloseModal()
    } catch (error) {
      console.error(error)
      setSnackbar({
        open: true,
        message: 'Error al guardar el item.',
        severity: 'error',
      })
    }
  }

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false })
  }

  // Función para agregar datos de ejemplo
  const handleAddSampleData = async () => {
    setLoadingSampleData(true)
    setSnackbar({
      open: true,
      message: 'Agregando datos de ejemplo...',
      severity: 'success',
    })
    try {
      const sampleMenuItems = generateSampleMenuItems()
      const menuCollectionRef = collection(db, COLLECTIONS.MENU)
      for (const item of sampleMenuItems) {
        await addDoc(menuCollectionRef, item)
      }
      setSnackbar({
        open: true,
        message: 'Datos de ejemplo agregados exitosamente!',
        severity: 'success',
      })
    } catch (error) {
      console.error('Error al agregar datos de ejemplo:', error)
      setSnackbar({
        open: true,
        message: 'Error al agregar datos de ejemplo.',
        severity: 'error',
      })
    } finally {
      setLoadingSampleData(false)
    }
  }

  const generateSampleMenuItems = () => {
    return [
      {
        name: 'Hamburguesa Clásica',
        description: 'Carne de res, queso cheddar, lechuga, tomate y cebolla.',
        price: 28000, // COP Approx. $8.99 USD
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Hamburguesas',
        observations: 'Se puede pedir sin cebolla.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Pizza Margarita Personal',
        description: 'Salsa de tomate, mozzarella fresca y albahaca.',
        price: 35000, // COP Approx. $12.5 USD (Adjusted for personal size)
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Pizzas',
        observations: 'Opción vegana disponible con queso de almendras.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Pizza Margarita Familiar',
        description: 'Salsa de tomate, mozzarella fresca y albahaca.',
        price: 65000, // COP Approx. $12.5 USD (Adjusted for family size)
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Pizzas',
        observations: 'Opción vegana disponible con queso de almendras.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Ensalada César',
        description: 'Lechuga romana, crutones, parmesano y aderezo César.',
        price: 22000, // COP Approx. $6.75 USD
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Ensaladas',
        observations: 'Se puede añadir pollo a la parrilla.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Pasta Carbonara',
        description: 'Spaghetti, huevo, panceta, queso pecorino romano y pimienta negra.',
        price: 32000, // COP Approx. $10.2 USD
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Pastas',
        observations: 'Sin gluten disponible con pasta de arroz.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Tacos al Pastor (3 unidades)',
        description:
          'Carne de cerdo adobada, piña, cebolla y cilantro, en tortilla de maíz. Orden de 3 tacos.',
        price: 30000, // COP Approx. $9.5 USD (for 3 tacos)
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Tacos',
        observations: 'Picante medio.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Sushi Variado (12 piezas)',
        description: 'Selección de nigiris y makis variados. 12 piezas.',
        price: 50000, // COP Approx. $15.99 USD
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Sushi',
        observations: 'Incluye salsa de soya, wasabi y jengibre.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Pollo Frito Individual',
        description: '1 presa grande de pollo frito, crujiente y jugoso.',
        price: 15000, // COP - Individual piece
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Pollos',
        observations: 'Opción extra crujiente disponible.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Combo Pollo Frito Personal',
        description: '2 presas de pollo frito, papas fritas pequeñas y gaseosa personal.',
        price: 30000, // COP - Personal combo
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Combos de Pollo',
        observations: 'Incluye gaseosa personal a elección.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Combo Pollo Frito Familiar',
        description:
          '6 presas de pollo frito, papas fritas familiares, ensalada coleslaw familiar y gaseosa 1.5L.',
        price: 85000, // COP - Family combo
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Combos de Pollo',
        observations: 'Ideal para compartir en familia.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Pollo Asado Entero',
        description: 'Pollo entero asado al carbón, jugoso y lleno de sabor.',
        price: 55000, // COP - Whole roasted chicken
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Pollos',
        observations: 'Perfecto para compartir.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Sopa de Tomate',
        description: 'Sopa cremosa de tomate, hecha en casa.',
        price: 18000, // COP Approx. $5.5 USD
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Sopas',
        observations: 'Servida con pan tostado.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Brownie con Helado',
        description: 'Brownie de chocolate caliente con helado de vainilla.',
        price: 20000, // COP Approx. $6.25 USD
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Postres',
        observations: 'Se puede pedir sin nueces.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Jugo de Naranja',
        description: 'Jugo de naranja natural, recién exprimido.',
        price: 8000, // COP
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Bebidas',
        observations: 'Sin azúcar añadida.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Limonada Natural',
        description: 'Limonada refrescante, preparada al momento.',
        price: 7000, // COP
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Bebidas',
        observations: 'Puedes pedirla endulzada o sin azúcar.',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Coca-Cola Personal',
        description: 'Gaseosa Coca-Cola en presentación personal.',
        price: 5000, // COP
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Gaseosas',
        observations: '',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Sprite Personal',
        description: 'Gaseosa Sprite en presentación personal.',
        price: 5000, // COP
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Gaseosas',
        observations: '',
        availabilityStatus: 'disponible',
      },
      {
        name: 'Agua con gas Personal',
        description: 'Agua con gas en presentación personal.',
        price: 4000, // COP
        imageUrl: 'https://tofuu.getjusto.com/orioneat-local/resized2/6GwfDxr96Ey4RnvzH-300-x.webp',
        available: true,
        recommendation: 'Bebidas',
        observations: '',
        availabilityStatus: 'disponible',
      },
    ]
  }

  return (
    <Container className="my-3">
      <div className="flex justify-between items-center mb-4">
        <Button variant="contained" color="primary" onClick={handleOpenModal} className="">
          Agregar Item
        </Button>
        {/* Botón "Agregar datos de ejemplo" condicional */}
        {(userRole === 'admin' || userRole === 'encargado') && (
          <Button
            variant="contained"
            color="success"
            onClick={void handleAddSampleData}
            disabled={loadingSampleData}
          >
            {loadingSampleData ? 'Cargando Menú...' : 'Cargar Menú Ejemplo'}
          </Button>
        )}
      </div>

      <MenuList menu={menu} onEdit={handleEdit} onDelete={handleDelete} />
      <MenuModal
        open={openModal}
        onClose={handleCloseModal} // Pass handleCloseModal as onClose
        initialValues={selectedItem || undefined}
        onSubmit={handleSubmit}
      />
      <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleCloseSnackbar}>
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  )
}

export default GestionMenu

/* Fin src\pages\GestionMenu.tsx */

/* Inicio src\pages\GestionUsuarios.tsx */
// src/pages/GestionUsuarios.tsx
import {
    Button,
    Container,
    List,
    ListItem,
    ListItemText,
    Typography,
} from "@mui/material";
import { collection, doc, getDocs, updateDoc } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { db } from "../utils/firebase";

interface Usuario {
  uid: string;
  email: string;
  role: string;
  points: number;
}

const GestionUsuarios: React.FC = () => {
  const [usuarios, setUsuarios] = useState<Usuario[]>([]);

  useEffect(() => {
    const fetchUsuarios = async () => {
      const usuariosCol = collection(db, "users");
      const usuariosSnapshot = await getDocs(usuariosCol);
      const usuariosList = usuariosSnapshot.docs.map((doc) => ({
        uid: doc.id,
        email: doc.data().email || "No email",
        role: doc.data().role,
        points: doc.data().points || 0,
      }));
      setUsuarios(usuariosList);
    };

    fetchUsuarios();
  }, []);

  const cambiarRol = async (uid: string, nuevoRol: string) => {
    const usuarioRef = doc(db, "users", uid);
    await updateDoc(usuarioRef, { role: nuevoRol });
    setUsuarios((prevUsuarios) =>
      prevUsuarios.map((usuario) =>
        usuario.uid === uid ? { ...usuario, role: nuevoRol } : usuario
      )
    );
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Gestión de Usuarios
      </Typography>
      <List>
        {usuarios.map((usuario) => (
          <ListItem key={usuario.uid}>
            <ListItemText
              primary={`Correo: ${usuario.email}`}
              secondary={`Rol: ${usuario.role} | Puntos: ${usuario.points}`}
            />
            <Button
              variant="contained"
              color="secondary"
              onClick={() =>
                cambiarRol(
                  usuario.uid,
                  usuario.role === "admin" ? "client" : "admin"
                )
              }
            >
              Cambiar a {usuario.role === "admin" ? "Cliente" : "Administrador"}
            </Button>
          </ListItem>
        ))}
      </List>
    </Container>
  );
};

export default GestionUsuarios;

/* Fin src\pages\GestionUsuarios.tsx */

/* Inicio src\pages\Login.tsx */
// src/pages/Login.tsx
import React, { useState } from "react";
import LoginForm from "../components/auth/LoginForm";
import RegisterForm from "../components/auth/RegisterForm";
import PublicLayout from "../components/layout/PublicLayout";

const Login: React.FC = () => {
  const [tabValue, setTabValue] = useState(0);

  const handleChange = (newValue: number) => {
    // Simplificamos el handler
    setTabValue(newValue);
  };

  return (
    <PublicLayout>
      <div className="max-w-md w-full">
        {" "}
        {/* Contenedor principal con Tailwind */}
        <div className="bg-white shadow-md rounded-lg p-6">
          {" "}
          {/* Reemplaza Paper con div y clases */}
          <div className="flex justify-center border-b border-gray-200 mb-4">
            {" "}
            {/* Reemplaza Tabs con divs */}
            <button
              className={`py-2 px-4 -mb-px border-b-2 ${
                tabValue === 0
                  ? "border-blue-500 text-blue-500"
                  : "border-transparent hover:border-gray-300"
              } font-semibold`}
              onClick={() => handleChange(0)}
            >
              Iniciar Sesión
            </button>
            <button
              className={`py-2 px-4 -mb-px border-b-2 ${
                tabValue === 1
                  ? "border-blue-500 text-blue-500"
                  : "border-transparent hover:border-gray-300"
              } font-semibold`}
              onClick={() => handleChange(1)}
            >
              Registrarse
            </button>
          </div>
          {tabValue === 0 && <LoginForm />}
          {tabValue === 1 && <RegisterForm />}
        </div>
      </div>
    </PublicLayout>
  );
};

export default Login;

/* Fin src\pages\Login.tsx */

/* Inicio src\pages\MenuPage.tsx */
/* Inicio src\pages\MenuPage.tsx */
/* src\pages\MenuPage.tsx */
/* src\pages\MenuPage.tsx */
import { Typography } from "@mui/material";
import { addDoc, collection, getDocs, query, where } from "firebase/firestore";
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

import { Person } from "../components/menu/GroupOrderPage"; // Importa interfaces
import JoinOrderModal from "../components/menu/JoinOrderModal";
import PedidoForm from "../components/pedidos/PedidoForm";
import Button from "../components/ui/Button";
import Container from "../components/ui/Container";
import TextField from "../components/ui/TextField";
import { MenuItemType } from "../context/AppContext"; // Importa MenuItemType
import { useAuth } from "../hooks/useAuth";
import { useMenu } from "../hooks/useMenu";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

const MenuPage: React.FC = () => {
  const { menu } = useMenu();
  const [numPeople, setNumPeople] = useState<number>(1);
  const [people, setPeople] = useState<Person[]>(() => {
    // Initialize people here
    return Array.from({ length: 1 }, (_, index) => ({
      personIndex: index,
      userId: null,
      name: `Persona ${index + 1}`, // Default name for initial render
      items: [],
      locked: false,
      finished: false,
    }));
  });
  const [showMenu, setShowMenu] = useState(false);
  const [, setOpenPedidoModal] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [isCreatingSharedOrder, setIsCreatingSharedOrder] = useState(false);
  const [isJoiningOrder, setIsJoiningOrder] = useState(false);
  const [, setJoinCode] = useState("");
  const navigate = useNavigate();
  const { user } = useAuth();

  const handleNumPeopleChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const num = Number(event.target.value);
    setNumPeople(num);

    // Initialize people array here based on numPeople
    const initialPeople = Array.from({ length: num }, (_, index) => ({
      personIndex: index,
      userId: null,
      name: `Persona ${index + 1}`, // Default name
      items: [],
      locked: false,
      finished: false,
    }));
    setPeople(initialPeople);
  };

  const handleNameChange = (index: number, value: string) => {
    const updatedPeople = [...people];
    if (updatedPeople[index]) {
      // Check if updatedPeople[index] is defined
      updatedPeople[index].name = value;
      setPeople(updatedPeople);
    }
  };

  const handleStartOrder = async () => {
    setIsCreatingSharedOrder(true);
    setShowMenu(true);

    const code = generateCode();
    try {
      if (!user) {
        setMessage("Debes iniciar sesión para crear un pedido compartido.");
        setTimeout(() => setMessage(null), 5000);
        setIsCreatingSharedOrder(false);
        return;
      }
      const groupOrderRef = await addDoc(
        collection(db, COLLECTIONS.GROUP_ORDERS),
        {
          code: code,
          ownerId: user.uid,
          status: "open",
          maxPeople: numPeople,
          createdAt: new Date(),
          participants: people, // Use the 'people' state which is now initialized
          sharedItems: [],
        }
      );
      navigate(`/menu/${groupOrderRef.id}?code=${code}`);
    } catch (error) {
      console.error("Error al crear pedido compartido en Firestore:", error);
      setMessage("Error al crear el pedido compartido.");
      setTimeout(() => setMessage(null), 5000);
      setIsCreatingSharedOrder(false);
    }
  };

  const handleAddItemToPerson = (personIndex: number, item: MenuItemType) => {
    setPeople(
      (prevPeople) =>
        prevPeople.map((person, index) =>
          index === personIndex
            ? {
                ...person,
                items: [...person.items, { itemId: item.id, quantity: 1 }], // Usa itemId en lugar de id
              }
            : person
        ) as Person[]
    );
  };

  const handlePersonOrderItemQuantityChange = (
    personIndex: number,
    itemId: string,
    quantity: string
  ) => {
    const quantityNumber = parseInt(quantity, 10);
    if (isNaN(quantityNumber) || quantityNumber < 0) {
      return;
    }

    setPeople((prevPeople) =>
      prevPeople.map((person, index) =>
        index === personIndex
          ? {
              ...person,
              items: person.items.map((item) =>
                item.id === itemId // Usa itemId para comparar
                  ? { ...item, quantity: quantityNumber }
                  : item
              ),
            }
          : person
      )
    );
  };

  const handleRemoveItemFromPerson = (personIndex: number, itemId: string) => {
    setPeople((prevPeople) =>
      prevPeople.map((person, index) =>
        index === personIndex
          ? {
              ...person,
              items: person.items.filter((item) => item.id !== itemId), // Usa itemId para filtrar
            }
          : person
      )
    );
  };

  const handleOpenPedidoModal = () => {
    setOpenPedidoModal(true);
  };

  const handleClosePedidoModal = () => {
    setOpenPedidoModal(false);
  };

  const generateCode = () => {
    return Math.floor(1000 + Math.random() * 9000).toString();
  };

  const handleJoinOrder = () => {
    setIsJoiningOrder(true);
  };

  const processJoinOrder = async (code: string) => {
    setIsJoiningOrder(false);
    setJoinCode(code);
    const q = query(
      collection(db, COLLECTIONS.GROUP_ORDERS),
      where("code", "==", code),
      where("status", "==", "open")
    );
    try {
      const querySnapshot = await getDocs(q);
      if (!querySnapshot.empty) {
        const groupOrderDoc = querySnapshot.docs[0];
        navigate(`/menu/${groupOrderDoc.id}?code=${code}`);
      } else {
        setMessage(
          "No hay pedido activo con este código o el código es incorrecto."
        );
        setTimeout(() => setMessage(null), 5000);
      }
    } catch (error) {
      console.error("Error al buscar pedido compartido:", error);
      setMessage("Error al unirse al pedido compartido.");
      setTimeout(() => setMessage(null), 5000);
    }
  };

  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    });
  };

  return (
    <Container className="my-8">
      <div className="text-center mb-8">
        <Typography
          variant="h4"
          component="h1"
          className="text-3xl font-bold text-gray-900 mb-2"
        >
          ¡Descubre nuestro Menú y Pide Fácil!
        </Typography>
        <Typography className="text-gray-600">
          Crea un pedido compartido con amigos o únete a uno existente.
        </Typography>
      </div>

      <div className="mb-8 grid grid-cols-1 md:grid-cols-2 gap-6 max-w-lg mx-auto">
        <Button
          variant="contained"
          color="primary"
          onClick={() => setIsCreatingSharedOrder(true)}
          className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
        >
          🎉 Crear Pedido Compartido
        </Button>
        <Button
          variant="outlined"
          color="primary"
          onClick={handleJoinOrder}
          className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
        >
          🤝 Unirme a Pedido Existente
        </Button>
      </div>

      {message && (
        <div className="mb-4 text-center text-red-500">{message}</div>
      )}

      {isCreatingSharedOrder && !showMenu && (
        <div className="max-w-md mx-auto p-6 rounded-xl shadow-lg bg-white animate-slide-down overflow-hidden">
          <Typography variant="h6" className="text-gray-800 mb-4 text-center">
            Configura tu Pedido Compartido
          </Typography>
          <div className="mb-4">
            <label
              htmlFor="numPeople"
              className="block text-gray-700 text-sm font-bold mb-2"
            >
              ¿Cuántas personas?
            </label>
            <TextField
              type="number"
              id="numPeople"
              value={numPeople}
              onChange={handleNumPeopleChange}
              min="1"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            />
          </div>
          {Array.from({ length: numPeople }).map((_, index) => (
            <div key={index} className="mb-4">
              <label
                htmlFor={`personName-${index}`}
                className="block text-gray-700 text-sm font-bold mb-2"
              >
                Nombre de la persona {index + 1} (Opcional):
              </label>
              <TextField
                type="text"
                id={`personName-${index}`}
                value={people[index]?.name}
                onChange={(e) => handleNameChange(index, e.target.value)}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              />
            </div>
          ))}
          <div className="mt-6 text-center">
            <Button
              variant="contained"
              color="primary"
              onClick={handleStartOrder}
              className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
            >
              Comenzar a Pedir
            </Button>
          </div>
        </div>
      )}

      {showMenu && (
        <div className="mt-10">
          <Typography
            variant="h5"
            className="font-bold text-gray-900 mb-6 text-center"
          >
            Nuestro Menú para Hoy
          </Typography>
          <div className="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {people.map((person, personIndex) => (
              <div
                key={person.personIndex} // Usa personIndex como key
                className="p-6 border rounded-xl shadow-md bg-white hover:shadow-lg transition-shadow duration-300"
              >
                <h2 className="text-xl font-semibold text-gray-900 mb-4">
                  {person.name || `Persona ${personIndex + 1}`}
                </h2>
                <p className="text-gray-700 mb-3">
                  Selecciona tus items del menú:
                </p>
                <ul className="mb-4 space-y-3">
                  {person.items.length > 0 ? (
                    person.items.map((item) => {
                      const menuItem = menu.find(
                        (menuItem) => menuItem.id === item.id // Usa itemId para buscar
                      );
                      return menuItem ? (
                        <li
                          key={item.id}
                          className="py-2 px-4 rounded-md bg-gray-100 flex items-center justify-between"
                        >
                          <Typography className="text-gray-800">
                            {menuItem.name} x {item.quantity}
                          </Typography>
                          <div className="flex items-center space-x-2">
                            <TextField
                              type="number"
                              value={item.quantity}
                              onChange={(e) =>
                                handlePersonOrderItemQuantityChange(
                                  personIndex,
                                  item.id,
                                  e.target.value
                                )
                              }
                              min="1"
                              className="shadow appearance-none border rounded w-16 py-1 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-center"
                            />
                            <Button
                              variant="contained"
                              color="error"
                              onClick={() =>
                                handleRemoveItemFromPerson(personIndex, item.id)
                              }
                              className="py-1 px-3 text-sm rounded-md"
                            >
                              Eliminar
                            </Button>
                          </div>
                        </li>
                      ) : null;
                    })
                  ) : (
                    <Typography className="text-gray-500">
                      Aún no has seleccionado items.
                    </Typography>
                  )}
                </ul>
                <div className="grid gap-4 grid-cols-1 md:grid-cols-2">
                  {menu.map((item) => (
                    <Button
                      key={item.id}
                      variant="outlined"
                      color="primary"
                      onClick={() => handleAddItemToPerson(personIndex, item)}
                      className="py-2 px-4 rounded-md transition-colors duration-300 border-blue-500 text-blue-500 hover:bg-blue-50"
                    >
                      {item.name} - {formatPriceCOP(item.price)}
                    </Button>
                  ))}
                </div>
              </div>
            ))}
          </div>
          <div className="mt-12 text-center">
            <Button
              variant="contained"
              color="success"
              onClick={handleOpenPedidoModal}
              className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 text-xl"
            >
              ¡Realizar Pedido Grupal!
            </Button>
          </div>
          <PedidoForm onClose={handleClosePedidoModal} people={people} />
        </div>
      )}

      <JoinOrderModal
        open={isJoiningOrder}
        onClose={() => setIsJoiningOrder(false)}
        onJoinOrder={processJoinOrder}
      />
    </Container>
  );
};

export default MenuPage;
/* Fin src\pages\MenuPage.tsx */

/* Fin src\pages\MenuPage.tsx */

/* Inicio src\pages\PedidosPage.tsx */

import { Container, Typography } from "@mui/material";
import React from "react";
import PedidoList from "../components/pedidos/PedidoList";

const PedidosPage: React.FC = () => {
  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Pedidos
      </Typography>
      <PedidoList />
    </Container>
  );
};

export default PedidosPage;

/* Fin src\pages\PedidosPage.tsx */

/* Inicio src\pages\Perfil.tsx */
// src/pages/Perfil.tsx
import {
  Alert,
  Avatar,
  Button,
  Container,
  Grid,
  Paper,
  Snackbar,
  Typography,
} from "@mui/material";
import React, { useState } from "react";
import { useAuth } from "../hooks/useAuth";

const Perfil: React.FC = () => {
  const { user, addPoints, points } = useAuth();
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: "success" | "error";
  }>({ open: false, message: "", severity: "success" });

  const handleAddPoints = async () => {
    try {
      await addPoints();
      setSnackbar({
        open: true,
        message: "Puntos agregados exitosamente.",
        severity: "success",
      });
    } catch {
      setSnackbar({
        open: true,
        message: "Error al agregar puntos.",
        severity: "error",
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Paper sx={{ padding: 4 }}>
        <Grid container spacing={4}>
          <Grid item xs={12} sm={4} sx={{ textAlign: "center" }}>
            <Avatar
              alt={user?.email}
              src="/static/images/avatar/1.jpg"
              sx={{ width: 120, height: 120, margin: "0 auto" }}
            />
            <Typography variant="h6" sx={{ mt: 2 }}>
              {user?.email}
            </Typography>
          </Grid>
          <Grid item xs={12} sm={8}>
            <Typography variant="h5" gutterBottom>
              Información del Perfil
            </Typography>
            <Typography variant="body1">
              <strong>UID:</strong> {user?.uid}
            </Typography>
            <Typography variant="body1">
              <strong>Puntos:</strong> {points}
            </Typography>
            <Button
              variant="contained"
              color="primary"
              onClick={handleAddPoints}
              sx={{ mt: 2 }}
            >
              Sumar 10 Puntos
            </Button>
          </Grid>
        </Grid>
      </Paper>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default Perfil;

/* Fin src\pages\Perfil.tsx */

/* Inicio src\pages\Success.tsx */
// src/pages/Success.tsx
import { Container, Typography } from "@mui/material";
import React, { useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { handlePaymentNotification } from "../payment/payment";
import "../styles/global.css";

const Success: React.FC = () => {
  const [searchParams] = useSearchParams();
  const sessionId = searchParams.get("session_id");
  const navigate = useNavigate();

  useEffect(() => {
    const handleSuccessPayment = async () => {
      if (sessionId) {
        try {
          await handlePaymentNotification(sessionId);
          navigate("/pedidos");
        } catch (error) {
          console.log(
            "Error al procesar el pago:",
            (error as { message: string }).message
          );
          navigate("/pedidos");
        }
      } else {
        navigate("/pedidos");
      }
    };
    handleSuccessPayment();
  }, [navigate, sessionId]);

  return (
    <Container>
      <Typography variant="h4">Pago exitoso, gracias por tu compra</Typography>
    </Container>
  );
};

export default Success;

/* Fin src\pages\Success.tsx */

/* Inicio src\payment\payment.ts */
// src/payment/payment.ts
import { doc, updateDoc } from "firebase/firestore";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export const updateOrderStatus = async (orderId: string, status: string) => {
    try {
        await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), { status: status });
        return true;
    } catch (error) {
        console.error("Error al actualizar el estado del pedido:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al actualizar el estado del pedido");
    }
};

export const handlePaymentNotification = async (session_id: string) => {
    console.log("Manejando notificacion de pago:", session_id);
    try {
        // Aquí debes implementar la lógica para verificar el pago con Stripe
        // Por ejemplo, puedes hacer una llamada a tu backend para verificar el estado del pago
        // Luego, actualizar el estado del pedido en Firestore
        // Este es un ejemplo simplificado:

        // Simulación de verificación de pago
        const paymentVerified = true; // Reemplaza con la lógica real

        if (paymentVerified) {
            // Supongamos que tienes el orderId en los metadatos de la sesión
            const orderId = "orderId_from_metadata"; // Reemplaza con el valor real
            await updateOrderStatus(orderId, "enviado");
            return true;
        } else {
            throw new Error("Pago no verificado");
        }
    } catch (error) {
        console.log("Error", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al manejar la notificacion");
    }
};

declare const window;

export const createCheckoutSession = async (amount: number, orderId: string) => {
    try {
        const response = await fetch('https://api.stripe.com/v1/checkout/sessions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer YOUR_STRIPE_SECRET_KEY`,
            },
            body: JSON.stringify({
                line_items: [
                    {
                        price_data: {
                            currency: 'usd',
                            unit_amount: amount * 100,
                            product_data: {
                                name: 'Pedido',
                            },
                        },
                        quantity: 1,
                    }
                ],
                mode: 'payment',
                success_url: `${window.location.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
                cancel_url: window.location.origin,
                metadata: {
                    orderId: orderId,
                },
            }),
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Error al crear sesion');
        }
        return data.id;
    } catch (error) {
        console.error("Error al crear la sesion de checkout:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || 'Error al crear sesion');
    }
};

export const processPayment = async (sessionId: string, publicKey: string) => {
    const stripe = window.Stripe(publicKey);
    stripe.redirectToCheckout({ sessionId });
};

/* Fin src\payment\payment.ts */

/* Inicio src\types\css.d.ts */
declare module '*.css'

/* Fin src\types\css.d.ts */

/* Inicio src\types\global.d.ts */
// src/types/global.d.ts
import { MenuItem } from '../context/AppContext'

declare global {
  interface Window {
    MercadoPago?: MercadoPago
    Stripe: (publicKey: string) => void
  }
  export type MenuItemType = MenuItem // Exporta MenuItemType
}

interface MercadoPago {
  new (
    publicKey: string,
    options?,
  ): {
    checkout: (params) => void
  }
}

export {} // Exporta un objeto vacío para evitar error de módulo

/* Fin src\types\global.d.ts */

/* Inicio src\utils\constants.ts */
/* src\utils\constants.ts */
export const COLLECTIONS = {
  MENU: 'menu',
  PEDIDOS: 'pedidos',
  GROUP_ORDERS: 'groupOrders', // Añadida la nueva colección
};
/* Fin src\utils\constants.ts */

/* Inicio src\utils\firebase.ts */
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyCKnLLXRtyfyLwVDVs05-q1NLR2JidFzus",
  authDomain: "alacartes.firebaseapp.com",
  projectId: "alacartes",
  storageBucket: "alacartes.firebasestorage.app",
  messagingSenderId: "145893311915",
  appId: "1:145893311915:web:9cd7cb44eba542ffda3eee"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
/* Fin src\utils\firebase.ts */

/* Inicio src\utils\theme.ts */
// src/utils/theme.ts
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
    palette: {
        primary: {
            main: '#1976d2', // Color primario
        },
        secondary: {
            main: '#dc004e', // Color secundario
        },
        background: {
            default: '#f4f6f8', // Fondo general
            paper: '#ffffff', // Fondos de componentes
        },
    },
    typography: {
        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
        h5: {
            fontWeight: 600,
        },
    },
    components: {
        MuiButton: {
            styleOverrides: {
                root: {
                    textTransform: 'none', // Mantener el texto en su forma original
                },
            },
        },
        MuiTextField: {
            styleOverrides: {
                root: {
                    marginTop: '8px',
                    marginBottom: '8px',
                },
            },
        },
    },
});

export default theme;

/* Fin src\utils\theme.ts */

/* Inicio tailwind.config.js */
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
}

/* Fin tailwind.config.js */

/* Inicio tsconfig.app.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "noImplicitAny": false,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

/* Fin tsconfig.app.json */

/* Inicio tsconfig.json */
{
  "compilerOptions": {
    "typeRoots": [
      "src/types",
      "./node_modules/@types"
    ],
    "outDir": "dist",
    "rootDir": "src",
    "strict": false,
    "noImplicitAny": false,
    "allowJs": true,
    "skipLibCheck": true,
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "jsx": "react-jsx",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": false,
    "noImplicitAny": false,
    "skipLibCheck": true,
  },
  "include": [
    "src"
  ], //  <-  Incluye solo la carpeta 'src' (archivos fuente)
  "exclude": [
    "node_modules",
    "dist",
    "eslint.config.js"
  ]
}
/* Fin tsconfig.json */

/* Inicio tsconfig.node.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

/* Fin tsconfig.node.json */

/* Inicio vite.config.ts */
import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'
import { VitePWA } from 'vite-plugin-pwa'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      manifest: {
        name: 'SrPol',
        short_name: 'SrPol',
        description: 'Aplicación para restaurantes',
        theme_color: '#ffffff',
        icons: [
          {
            src: '/logo192.png',
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: '/logo512.png',
            sizes: '512x512',
            type: 'image/png',
          },
        ],
        start_url: '.',
        display: 'standalone',
        background_color: '#ffffff',
      },
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],
      },
    }),
  ],
})

/* Fin vite.config.ts */
