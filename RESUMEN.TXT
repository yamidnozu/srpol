
/* Directorio:  */
â”œâ”€â”€ eslint.config.js [29]
â”œâ”€â”€ firebase.json [1]
â”œâ”€â”€ index.html [17]
â”œâ”€â”€ package.json [44]
â”œâ”€â”€ README.md [51]
â”œâ”€â”€ ðŸ“‚ src
â”‚   â”œâ”€â”€ App.tsx [147]
â”‚   â”œâ”€â”€ ðŸ“‚ assets
â”‚   â”‚   â””â”€â”€ react.svg [1]
â”‚   â”œâ”€â”€ ðŸ“‚ components
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ auth
â”‚   â”‚   â”‚   â”œâ”€â”€ LoginForm.tsx [59]
â”‚   â”‚   â”‚   â””â”€â”€ RegisterForm.tsx [59]
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ forms
â”‚   â”‚   â”‚   â”œâ”€â”€ MenuForm.tsx [104]
â”‚   â”‚   â”‚   â””â”€â”€ PedidoForm.tsx [188]
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ layout
â”‚   â”‚   â”‚   â”œâ”€â”€ MainLayout.tsx [35]
â”‚   â”‚   â”‚   â”œâ”€â”€ Navbar.tsx [47]
â”‚   â”‚   â”‚   â”œâ”€â”€ PublicLayout.tsx [16]
â”‚   â”‚   â”‚   â””â”€â”€ Sidebar.tsx [110]
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ menu
â”‚   â”‚   â”‚   â”œâ”€â”€ MenuForm.tsx [128]
â”‚   â”‚   â”‚   â”œâ”€â”€ MenuItem.tsx [57]
â”‚   â”‚   â”‚   â”œâ”€â”€ MenuList.tsx [24]
â”‚   â”‚   â”‚   â””â”€â”€ MenuModal.tsx [41]
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ payment
â”‚   â”‚   â”‚   â””â”€â”€ PaymentForm.tsx [80]
â”‚   â”‚   â”œâ”€â”€ ðŸ“‚ pedidos
â”‚   â”‚   â”‚   â”œâ”€â”€ PedidoForm.tsx [181]
â”‚   â”‚   â”‚   â”œâ”€â”€ PedidoItem.tsx [9]
â”‚   â”‚   â”‚   â””â”€â”€ PedidoList.tsx [298]
â”‚   â”‚   â””â”€â”€ ðŸ“‚ ui
â”‚   â”‚       â”œâ”€â”€ Button.tsx [14]
â”‚   â”‚       â”œâ”€â”€ ErrorBoundry.tsx [43]
â”‚   â”‚       â”œâ”€â”€ ListItem.tsx [43]
â”‚   â”‚       â””â”€â”€ TextField.tsx [14]
â”‚   â”œâ”€â”€ ðŸ“‚ context
â”‚   â”‚   â”œâ”€â”€ AppContext.tsx [65]
â”‚   â”‚   â””â”€â”€ AuthContext.tsx [164]
â”‚   â”œâ”€â”€ ðŸ“‚ hooks
â”‚   â”‚   â”œâ”€â”€ useAuth.ts [10]
â”‚   â”‚   â””â”€â”€ useMenu.ts [10]
â”‚   â”œâ”€â”€ main.tsx [10]
â”‚   â”œâ”€â”€ ðŸ“‚ pages
â”‚   â”‚   â”œâ”€â”€ Dashboard.tsx [19]
â”‚   â”‚   â”œâ”€â”€ GestionMenu.tsx [78]
â”‚   â”‚   â”œâ”€â”€ GestionUsuarios.tsx [82]
â”‚   â”‚   â”œâ”€â”€ Login.tsx [30]
â”‚   â”‚   â”œâ”€â”€ MenuPage.tsx [223]
â”‚   â”‚   â”œâ”€â”€ PedidosPage.tsx [18]
â”‚   â”‚   â”œâ”€â”€ Perfil.tsx [27]
â”‚   â”‚   â””â”€â”€ Success.tsx [41]
â”‚   â”œâ”€â”€ ðŸ“‚ payment
â”‚   â”‚   â””â”€â”€ payment.ts [87]
â”‚   â”œâ”€â”€ ðŸ“‚ styles
â”‚   â”‚   â””â”€â”€ global.css [14]
â”‚   â”œâ”€â”€ ðŸ“‚ types
â”‚   â”‚   â”œâ”€â”€ css.d.ts [1]
â”‚   â”‚   â””â”€â”€ global.d.ts [14]
â”‚   â””â”€â”€ ðŸ“‚ utils
â”‚       â”œâ”€â”€ constants.ts [4]
â”‚       â”œâ”€â”€ firebase.ts [16]
â”‚       â””â”€â”€ theme.ts [1]
â”œâ”€â”€ tsconfig.app.json [31]
â”œâ”€â”€ tsconfig.json [20]
â”œâ”€â”€ tsconfig.node.json [25]
â””â”€â”€ vite.config.ts [34]


Total de lÃ­neas resumidas: 2864


/* Inicio eslint.config.js */
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

/* Fin eslint.config.js */

/* Inicio firebase.json */

/* Fin firebase.json */

/* Inicio index.html */
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#ffffff" />
    <title>SrPol</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

/* Fin index.html */

/* Inicio package.json */
{
  "name": "srpol",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mercadopago/sdk-js": "^0.0.3",
    "@mui/icons-material": "^6.4.1",
    "@mui/material": "^6.4.1",
    "@stripe/stripe-js": "^5.5.0",
    "axios": "^1.7.9",
    "firebase": "^11.2.0",
    "firebase-admin": "^13.0.2",
    "firebase-functions": "^6.3.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.3",
    "stripe": "^17.5.0",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5",
    "vite-plugin-pwa": "^0.21.1"
  }
}

/* Fin package.json */

/* Inicio README.md */
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

/* Fin README.md */

/* Inicio src\App.tsx */
// src/App.tsx
import React from "react";
import {
  Navigate,
  Route,
  BrowserRouter as Router,
  Routes,
} from "react-router-dom";
import MainLayout from "./components/layout/MainLayout";
import PublicLayout from "./components/layout/PublicLayout";
import ErrorBoundary from "./components/ui/ErrorBoundry";
import { AppProvider } from "./context/AppContext";
import { AuthProvider } from "./context/AuthContext";
import { useAuth } from "./hooks/useAuth";
import Dashboard from "./pages/Dashboard";
import GestionMenu from "./pages/GestionMenu";
import GestionUsuarios from "./pages/GestionUsuarios";
import Login from "./pages/Login";
import MenuPage from "./pages/MenuPage";
import PedidosPage from "./pages/PedidosPage";
import Perfil from "./pages/Perfil";
import Success from "./pages/Success";
import "./styles/global.css";

const PrivateRoute: React.FC<{
  children: React.ReactNode;
  allowedRoles?: string[];
}> = ({ children, allowedRoles }) => {
  const { user, loading, userRole } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  if (!user) {
    return <Navigate to="/login" />;
  }

  if (allowedRoles && !allowedRoles.includes(userRole || "client")) {
    return <Navigate to="/" />;
  }

  return <MainLayout>{children}</MainLayout>;
};

const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  return !user ? <PublicLayout>{children}</PublicLayout> : <Navigate to="/" />;
};

const App: React.FC = () => {
  return (
    <AuthProvider>
      <AppProvider>
        <Router>
          <ErrorBoundary>
            <Routes>
              <Route
                path="/login"
                element={
                  <PublicRoute>
                    <Login />
                  </PublicRoute>
                }
              />
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <Success />
                  </PrivateRoute>
                }
              />
              <Route
                path="/"
                element={
                  <PrivateRoute>
                    <Dashboard />
                  </PrivateRoute>
                }
              />
              <Route
                path="/menu"
                element={
                  <PrivateRoute>
                    <MenuPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/pedidos"
                element={
                  <PrivateRoute>
                    <PedidosPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/gestion-menu"
                element={
                  <PrivateRoute allowedRoles={["admin", "encargado"]}>
                    <GestionMenu />
                  </PrivateRoute>
                }
              />
              <Route
                path="/perfil"
                element={
                  <PrivateRoute>
                    <Perfil />
                  </PrivateRoute>
                }
              />
              <Route
                path="/gestion-usuarios"
                element={
                  <PrivateRoute allowedRoles={["admin"]}>
                    <GestionUsuarios />
                  </PrivateRoute>
                }
              />
              {/* Ruta para manejar pagos exitosos */}
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <Success />
                  </PrivateRoute>
                }
              />
              {/* Ruta por defecto */}
              <Route path="*" element={<Navigate to="/" />} />
            </Routes>
          </ErrorBoundary>
        </Router>
      </AppProvider>
    </AuthProvider>
  );
};

export default App;

/* Fin src\App.tsx */

/* Inicio src\assets\react.svg */
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
/* Fin src\assets\react.svg */

/* Inicio src\components\auth\LoginForm.tsx */
import { Alert, Button, Grid, TextField, Typography } from "@mui/material";
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";

const LoginForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const { login } = useAuth();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await login(email, password);
    } catch (error) {
      setError((error as { message: string }).message);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <Typography variant="h4" gutterBottom>
        Iniciar SesiÃ³n
      </Typography>
      <Grid container spacing={2} sx={{ marginBottom: 2 }}>
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="Correo electrÃ³nico"
            variant="outlined"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="ContraseÃ±a"
            variant="outlined"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </Grid>
      </Grid>
      {error && <Alert severity="error">{error}</Alert>}
      <Button type="submit" variant="contained" color="primary">
        Iniciar SesiÃ³n
      </Button>
    </form>
  );
};

export default LoginForm;

/* Fin src\components\auth\LoginForm.tsx */

/* Inicio src\components\auth\RegisterForm.tsx */
import { Alert, Button, Grid, TextField, Typography } from "@mui/material";
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";

const RegisterForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const { register } = useAuth();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await register(email, password);
    } catch (error) {
      setError((error as { message: string }).message);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <Typography variant="h4" gutterBottom>
        Registrarse
      </Typography>
      <Grid container spacing={2} sx={{ marginBottom: 2 }}>
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="Correo electrÃ³nico"
            variant="outlined"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12}>
          <TextField
            fullWidth
            label="ContraseÃ±a"
            variant="outlined"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </Grid>
      </Grid>
      {error && <Alert severity="error">{error}</Alert>}
      <Button type="submit" variant="contained" color="primary">
        Registrarse
      </Button>
    </form>
  );
};

export default RegisterForm;

/* Fin src\components\auth\RegisterForm.tsx */

/* Inicio src\components\forms\MenuForm.tsx */
import { Button, Grid, TextField, Typography } from "@mui/material";
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
}

const MenuForm: React.FC<MenuFormProps> = ({ initialValues, onSubmit }) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(initialValues?.description || "");
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available: true,
      recommendation,
      observations,
    });
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit}>
      <Typography variant="h5" sx={{ marginBottom: 2 }}>
        {initialValues?.id ? "Editar Item" : "Agregar Item"}
      </Typography>
      <Grid container spacing={2}>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Nombre del Item"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="DescripciÃ³n del Item"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Precio del Item"
            type="number"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Url de la imagen"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Recomendaciones"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Observaciones"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
          />
        </Grid>
        <Grid item xs={12}>
          <Button type="submit" variant="contained" color="primary">
            {initialValues?.id ? "Guardar Cambios" : "Agregar Item"}
          </Button>
        </Grid>
      </Grid>
    </form>
  );
};

export default MenuForm;
/* Fin src\components\forms\MenuForm.tsx */

/* Inicio src\components\forms\PedidoForm.tsx */
// src/components/pedidos/PedidoForm.tsx
import {
    Button,
    Checkbox,
    FormControl,
    FormControlLabel,
    InputLabel,
    MenuItem,
    Select,
    TextField,
    Typography,
} from "@mui/material";
import { addDoc, collection, Timestamp } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu";
import { db } from "../../utils/firebase";

interface PedidoFormProps {
  onClose: () => void;
  people?: {
    id: string;
    name: string;
    items: { id: string; quantity: number }[];
  }[];
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people }) => {
  const { menu } = useMenu();
  const { user, addPoints } = useAuth();

  const [items, setItems] = useState<
    { id: string; quantity: number; assignedTo: string }[]
  >([]);
  const [peopleOrder, setPeopleOrder] = useState<
    { id: string; name: string }[]
  >([]);
  const [sede, setSede] = useState("");
  const [deliveryFee, setDeliveryFee] = useState(0);
  const [deliveryIncluded, setDeliveryIncluded] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState("contraentrega");

  useEffect(() => {
    if (people) {
      setPeopleOrder(
        people.map((person) => ({ id: person.id, name: person.name }))
      );
      const newItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        }))
      );
      setItems(newItems);
    }
  }, [people]);

  // SimulaciÃ³n de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ["Sede Norte", "Sede Sur", "Sede Centro"];

  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0]);
    }
  }, [sedesDisponibles]);

  const calculateTotal = () => {
    let total = 0;
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id);
      if (menuItem) {
        total += menuItem.price * item.quantity;
      }
    });
    return total + deliveryFee;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!user) return;

    try {
      const total = calculateTotal();
      const orderId = uuidv4();
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: "pendiente",
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
      };

      await addDoc(collection(db, "pedidos"), orderData);
      handlePaymentSuccess();
    } catch (error) {
      console.error("Error al agregar el pedido:", error);
    }
  };

  const handlePaymentSuccess = async () => {
    // Sumar puntos al usuario
    await addPoints();
    alert("Pedido realizado con Ã©xito y puntos sumados.");
    onClose();
  };

  return (
    <form onSubmit={handleSubmit}>
      <Typography variant="h5" sx={{ marginBottom: 2 }}>
        Realizar Pedido
      </Typography>

      {/* Seleccionar Sede */}
      <FormControl fullWidth sx={{ marginBottom: 2 }}>
        <InputLabel>Sede</InputLabel>
        <Select
          value={sede}
          label="Sede"
          onChange={(e) => setSede(e.target.value)}
          required
        >
          {sedesDisponibles.map((sedeItem) => (
            <MenuItem value={sedeItem} key={sedeItem}>
              {sedeItem}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {/* Costo de EnvÃ­o */}
      <TextField
        label="Costo de EnvÃ­o"
        type="number"
        value={deliveryFee}
        onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
        fullWidth
        sx={{ marginBottom: 2 }}
        required
        inputProps={{ min: 0 }}
      />

      {/* Domicilio Incluido */}
      <FormControlLabel
        control={
          <Checkbox
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
          />
        }
        label="Â¿El domicilio estÃ¡ incluido?"
        sx={{ marginBottom: 2 }}
      />

      {/* MÃ©todo de Pago */}
      <FormControl fullWidth sx={{ marginBottom: 2 }}>
        <InputLabel>MÃ©todo de Pago</InputLabel>
        <Select
          value={paymentMethod}
          label="MÃ©todo de Pago"
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
        >
          <MenuItem value="contraentrega">Contraentrega</MenuItem>
          {/* Puedes aÃ±adir otros mÃ©todos de pago si lo deseas */}
        </Select>
      </FormControl>

      <Button type="submit" variant="contained" color="primary" fullWidth>
        Realizar Pedido
      </Button>
    </form>
  );
};

export default PedidoForm;

/* Fin src\components\forms\PedidoForm.tsx */

/* Inicio src\components\layout\MainLayout.tsx */
import { Box, Grid, } from '@mui/material';
import React, { useState } from 'react';
import Navbar from './Navbar';
import Sidebar from './Sidebar';

interface MainLayoutProps {
  children: React.ReactNode;
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
    const [drawerOpen, setDrawerOpen] = useState(false);

  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen);
  };

  const handleDrawerClose = () => {
    setDrawerOpen(false);
  };
  return (
    <Box sx={{ display: 'flex' }}>
      <Navbar toggleDrawer={handleDrawerToggle} />
      <Sidebar  drawerOpen={drawerOpen} handleDrawerClose={handleDrawerClose} />
      <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
         <Grid container spacing={3} >
            <Grid item xs={12}>
                 {children}
            </Grid>
        </Grid>
      </Box>
    </Box>
  );
};

export default MainLayout;
/* Fin src\components\layout\MainLayout.tsx */

/* Inicio src\components\layout\Navbar.tsx */
import MenuIcon from '@mui/icons-material/Menu';
import { AppBar, Box, IconButton, Toolbar, Typography } from '@mui/material';
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

interface NavbarProps {
    toggleDrawer: () => void
}

const Navbar: React.FC<NavbarProps> = ({ toggleDrawer }) => {
    const { logout, user } = useAuth();
    const navigate = useNavigate();
    const handleLogout = async () => {
        await logout();
        navigate('/login');
    }
    return (
        <AppBar position="fixed" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
            <Toolbar>
                <IconButton
                    color="inherit"
                    aria-label="open drawer"
                    edge="start"
                    onClick={toggleDrawer}
                    sx={{ mr: 2, display: { md: 'none' } }}
                >
                    <MenuIcon />
                </IconButton>
                <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
                    SrPol
                </Typography>
                 <Box sx={{display: 'flex', alignItems: 'center'}}>
                    <Typography variant="body1" sx={{mr: 2}}>{user?.email}</Typography>
                     <IconButton
                         color="inherit"
                         onClick={handleLogout}
                     >
                       Cerrar SesiÃ³n
                    </IconButton>
                 </Box>
            </Toolbar>
        </AppBar>
    );
};

export default Navbar;
/* Fin src\components\layout\Navbar.tsx */

/* Inicio src\components\layout\PublicLayout.tsx */
import { Box } from '@mui/material';
import React, { ReactNode } from 'react';

interface PublicLayoutProps {
  children: ReactNode;
}

const PublicLayout: React.FC<PublicLayoutProps> = ({ children }) => {
  return (
      <Box  sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
        {children}
      </Box>
  );
};

export default PublicLayout;
/* Fin src\components\layout\PublicLayout.tsx */

/* Inicio src\components\layout\Sidebar.tsx */
// src/components/layout/Sidebar.tsx

import {
  ChevronLeft as ChevronLeftIcon,
  Menu as MenuIcon,
  Person as PersonIcon,
  RestaurantMenu as RestaurantMenuIcon,
  Settings as SettingsIcon,
  ShoppingCart as ShoppingCartIcon,
} from "@mui/icons-material";
import {
  Box,
  Drawer,
  IconButton,
  List,
  ListItemIcon,
  ListItemText,
  Toolbar,
} from "@mui/material";
import React from "react";
import { useAuth } from "../../hooks/useAuth";
import ListItem from "../ui/ListItem";

interface SidebarProps {
  drawerOpen: boolean;
  handleDrawerClose: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({ drawerOpen, handleDrawerClose }) => {
  const { userRole } = useAuth();
  const menuItems = [
    {
      text: "Dashboard",
      icon: <MenuIcon />,
      path: "/",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "MenÃº",
      icon: <RestaurantMenuIcon />,
      path: "/menu",
      roles: ["admin", "encargado", "client", "public"],
    }, // AÃ±adimos 'public'
    {
      text: "Pedidos",
      icon: <ShoppingCartIcon />,
      path: "/pedidos",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Gestionar MenÃº",
      icon: <SettingsIcon />,
      path: "/gestion-menu",
      roles: ["admin", "encargado"],
    },
    {
      text: "Perfil",
      icon: <PersonIcon />,
      path: "/perfil",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "GestiÃ³n de Usuarios",
      icon: <PersonIcon />,
      path: "/gestion-usuarios",
      roles: ["admin"],
    },
  ];

  return (
    <Drawer
      sx={{
        width: 240,
        flexShrink: 0,
        "& .MuiDrawer-paper": {
          width: 240,
          boxSizing: "border-box",
        },
      }}
      variant="persistent"
      anchor="left"
      open={drawerOpen}
    >
      <Toolbar>
        <IconButton onClick={handleDrawerClose}>
          <ChevronLeftIcon />
        </IconButton>
      </Toolbar>
      <Box sx={{ overflow: "auto" }}>
        <List>
          {menuItems
            .filter(
              (item) =>
                item.roles.includes(userRole || "public") ||
                item.roles.includes("public")
            )
            .map((item) => (
              <ListItem to={item.path} button key={item.text}>
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItem>
            ))}
        </List>
      </Box>
    </Drawer>
  );
};

export default Sidebar;

/* Fin src\components\layout\Sidebar.tsx */

/* Inicio src\components\menu\MenuForm.tsx */
import {
    Button,
    Checkbox,
    FormControlLabel,
    Grid,
    TextField,
    Typography,
} from "@mui/material";
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
}

const MenuForm: React.FC<MenuFormProps> = ({ initialValues, onSubmit }) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
    });
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit}>
      <Typography variant="h5" sx={{ marginBottom: 2 }}>
        {initialValues?.id ? "Editar Item" : "Agregar Item"}
      </Typography>
      <Grid container spacing={2}>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Nombre del Item"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="DescripciÃ³n del Item"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Precio del Item"
            type="number"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Url de la imagen"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Recomendaciones"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
          />
        </Grid>
        <Grid item xs={12} sm={6}>
          <TextField
            label="Observaciones"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
          />
        </Grid>
        <Grid item xs={12}>
          <FormControlLabel
            control={
              <Checkbox
                checked={available}
                onChange={(e) => setAvailable(e.target.checked)}
              />
            }
            label="Disponible"
          />
        </Grid>
        <Grid item xs={12}>
          <Button type="submit" variant="contained" color="primary">
            {initialValues?.id ? "Guardar Cambios" : "Agregar Item"}
          </Button>
        </Grid>
      </Grid>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\menu\MenuForm.tsx */

/* Inicio src\components\menu\MenuItem.tsx */
import { Delete, Edit } from '@mui/icons-material';
import { Box, Card, CardActions, CardContent, CardMedia, IconButton, Typography } from '@mui/material';
import React from "react";
import { MenuItem as MenuItemType } from '../../context/AppContext';

interface MenuItemProps {
  item: MenuItemType;
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => void;
}


const MenuItem: React.FC<MenuItemProps> = ({ item, onEdit, onDelete }) => {
    return (
        <Card sx={{ maxWidth: 345, minWidth: 345 }}>
            <CardMedia
                component="img"
                height="194"
                image={item.imageUrl}
                alt={item.name}
            />
            <CardContent>
                <Typography gutterBottom variant="h5" component="div">
                {item.name}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                 {item.description}
                </Typography>
                <Typography variant="h6" color="text.secondary">
                 Precio: {item.price}
                </Typography>
                <Box>
                   {item.recommendation && (
                        <Typography variant="body2" color="text.secondary">
                         Recomendaciones: {item.recommendation}
                        </Typography>
                    )}
                      {item.observations && (
                        <Typography variant="body2" color="text.secondary">
                        Observaciones: {item.observations}
                        </Typography>
                    )}
                </Box>
            </CardContent>
             <CardActions sx={{justifyContent: 'flex-end'}}>
                 <IconButton onClick={() => onEdit(item)}>
                     <Edit />
                 </IconButton>
                <IconButton onClick={() => onDelete(item)}>
                    <Delete />
                </IconButton>
            </CardActions>
        </Card>
    );
};

export default MenuItem;
/* Fin src\components\menu\MenuItem.tsx */

/* Inicio src\components\menu\MenuList.tsx */
import { Grid } from '@mui/material';
import React from 'react';
import { MenuItem as MenuItemType } from '../../context/AppContext';
import MenuItem from './MenuItem';

interface MenuListProps {
  menu: MenuItemType[];
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => void;
}

const MenuList: React.FC<MenuListProps> = ({ menu, onEdit, onDelete }) => {
  return (
    <Grid container spacing={2}>
      {menu.map((item) => (
        <Grid item xs={12} sm={6} md={4} key={item.id}>
          <MenuItem item={item} onEdit={onEdit} onDelete={onDelete} />
        </Grid>
      ))}
    </Grid>
  );
};

export default MenuList;
/* Fin src\components\menu\MenuList.tsx */

/* Inicio src\components\menu\MenuModal.tsx */
import { Box, Modal, } from '@mui/material';
import React from 'react';
import { MenuItem } from '../../context/AppContext';
import MenuForm from '../forms/MenuForm';

interface MenuModalProps {
  open: boolean;
  onClose: () => void;
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void
}

const style = {
    position: 'absolute' as const,
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 600,
    bgcolor: 'background.paper',
    border: '2px solid #000',
    boxShadow: 24,
    p: 4,
    outline: 'none'
};

const MenuModal: React.FC<MenuModalProps> = ({ open, onClose, initialValues, onSubmit }) => {
  return (
    <Modal
      open={open}
      onClose={onClose}
      aria-labelledby="modal-modal-title"
      aria-describedby="modal-modal-description"
    >
      <Box sx={style}>
        <MenuForm initialValues={initialValues} onSubmit={onSubmit} />
      </Box>
    </Modal>
  );
};

export default MenuModal;
/* Fin src\components\menu\MenuModal.tsx */

/* Inicio src\components\payment\PaymentForm.tsx */
import { Alert, Button } from "@mui/material";
import React, { useEffect, useState } from "react";
import {
  createCheckoutSession,
  handlePaymentNotification,
  processPayment,
} from "../../payment/payment";

interface PaymentFormProps {
  amount: number;
  orderId: string;
  onSuccess: () => void;
}
const PaymentForm: React.FC<PaymentFormProps> = ({
  amount,
  onSuccess,
  orderId,
}) => {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [publicKey, setPublicKey] = useState<string | null>(null);
  const [paymentResult] = useState<string | null>(null);
  useEffect(() => {
    const loadPublicKey = async () => {
      setPublicKey("YOUR_STRIPE_PUBLIC_KEY");
    };
    loadPublicKey();
  }, []);

  const handlePayment = async () => {
    setLoading(true);
    setError(null);
    try {
      if (!publicKey) {
        setError("Clave publica no encontrada");
        setLoading(false);
        setTimeout(() => setError(null), 5000);
        return;
      }
      const sessionId = await createCheckoutSession(amount, orderId);
      await processPayment(sessionId, publicKey);
      const response = await handlePaymentNotification(sessionId);
      if (response) {
        setLoading(false);
        onSuccess();
      } else {
        throw new Error("Error al procesar el pago");
      }
    } catch (error) {
      setError(error.message);
      setLoading(false);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <>
      {error && <Alert severity="error">{error}</Alert>}
      {paymentResult === "success" && (
        <Alert severity="success">Pago Exitoso</Alert>
      )}
      {paymentResult === "failure" && (
        <Alert severity="error">Pago Fallido</Alert>
      )}
      {paymentResult === "pending" && (
        <Alert severity="info">Pago Pendiente</Alert>
      )}
      <Button
        variant="contained"
        color="primary"
        onClick={handlePayment}
        disabled={loading}
      >
        {loading ? "Procesando" : "Pagar"}
      </Button>
    </>
  );
};
export default PaymentForm;

/* Fin src\components\payment\PaymentForm.tsx */

/* Inicio src\components\pedidos\PedidoForm.tsx */
// src/components/forms/PedidoForm.tsx

import {
  Button,
  Checkbox,
  FormControl,
  FormControlLabel,
  InputLabel,
  MenuItem,
  Select,
  TextField,
  Typography,
} from "@mui/material";
import { addDoc, collection, Timestamp } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu";
import { db } from "../../utils/firebase";

interface PedidoFormProps {
  onClose: () => void;
  people?: { id: string; name: string; items: { id: string; quantity: number }[] }[];
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people }) => {
  const { menu } = useMenu();
  const { user, addPoints } = useAuth();

  const [items, setItems] = useState<
    { id: string; quantity: number; assignedTo: string }[]
  >([]);
  const [peopleOrder, setPeopleOrder] = useState<{ id: string; name: string }[]>([]);
  const [sede, setSede] = useState("");
  const [deliveryFee, setDeliveryFee] = useState(0);
  const [deliveryIncluded, setDeliveryIncluded] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState("contraentrega");


  useEffect(() => {
    if (people) {
        setPeopleOrder(people.map(person => ({ id: person.id, name: person.name })))
      const newItems = people.flatMap(person =>
          person.items.map(item => ({
            id: item.id,
            quantity: item.quantity,
              assignedTo: person.name,
          }))
      );
      setItems(newItems);
    }
  }, [people]);

  // SimulaciÃ³n de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ["Sede Norte", "Sede Sur", "Sede Centro"];

  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0]);
    }
  }, [sedesDisponibles]);


  const calculateTotal = () => {
    let total = 0;
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id);
      if (menuItem) {
        total += menuItem.price * item.quantity;
      }
    });
    return total + deliveryFee;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!user) return;

    try {
      const total = calculateTotal();
      const orderId = uuidv4();
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
            assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: "pendiente",
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
      };

      await addDoc(collection(db, "pedidos"), orderData);
        handlePaymentSuccess()

    } catch (error) {
      console.error("Error al agregar el pedido:", error);
    }
  };

  const handlePaymentSuccess = async () => {
      // Sumar puntos al usuario
      await addPoints();
      alert("Pedido realizado con Ã©xito y puntos sumados.");
      onClose();
  };

  return (
    <form onSubmit={handleSubmit}>
      <Typography variant="h5" sx={{ marginBottom: 2 }}>
        Realizar Pedido
      </Typography>

      {/* Seleccionar Sede */}
      <FormControl fullWidth sx={{ marginBottom: 2 }}>
        <InputLabel>Sede</InputLabel>
        <Select
          value={sede}
          label="Sede"
          onChange={(e) => setSede(e.target.value)}
          required
        >
          {sedesDisponibles.map((sedeItem) => (
            <MenuItem value={sedeItem} key={sedeItem}>
              {sedeItem}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      {/* Costo de EnvÃ­o */}
      <TextField
        label="Costo de EnvÃ­o"
        type="number"
        value={deliveryFee}
        onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
        fullWidth
        sx={{ marginBottom: 2 }}
        required
        inputProps={{ min: 0 }}
      />

      {/* Domicilio Incluido */}
      <FormControlLabel
        control={
          <Checkbox
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
          />
        }
        label="Â¿El domicilio estÃ¡ incluido?"
        sx={{ marginBottom: 2 }}
      />
      {/* MÃ©todo de Pago */}
        <FormControl fullWidth sx={{ marginBottom: 2 }}>
            <InputLabel>MÃ©todo de Pago</InputLabel>
            <Select
              value={paymentMethod}
              label="MÃ©todo de Pago"
              onChange={(e) => setPaymentMethod(e.target.value)}
              required
            >
              <MenuItem value="contraentrega">Contraentrega</MenuItem>
            </Select>
          </FormControl>

      <Button type="submit" variant="contained" color="primary" fullWidth>
        Realizar Pedido
      </Button>
    </form>
  );
};

export default PedidoForm;
/* Fin src\components\pedidos\PedidoForm.tsx */

/* Inicio src\components\pedidos\PedidoItem.tsx */
import React from "react";

const PedidoItem: React.FC = () => {
    return (
        <div>Pedido Item</div>
    )
}

export default PedidoItem;
/* Fin src\components\pedidos\PedidoItem.tsx */

/* Inicio src\components\pedidos\PedidoList.tsx */
// src/components/pedidos/PedidoList.tsx
import {
  Box,
  Button,
  CircularProgress,
  Dialog,
  DialogTitle,
  Divider,
  FormControl,
  InputLabel,
  List,
  ListItem,
  ListItemText,
  MenuItem,
  Select,
  Typography,
} from "@mui/material";
import { SelectChangeEvent } from "@mui/material/Select";
import {
  collection,
  doc,
  onSnapshot,
  query,
  updateDoc,
  where,
} from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { COLLECTIONS } from "../../utils/constants";
import { db } from "../../utils/firebase";

interface Pedido {
  id: string;
  userId: string;
  items: { id: string; quantity: number; assignedTo: string }[];
  people: { id: string; name: string }[];
  sede: string;
  status: string;
  total: number;
  deliveryFee: number;
  deliveryIncluded: boolean;
  paymentMethod: string;
  orderDate: Date;
  orderId: string;
}

const PedidoList: React.FC = () => {
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const { user, userRole } = useAuth();
  const [selectedStatus, setSelectedStatus] = useState("pendiente");
  const [openDetails, setOpenDetails] = useState(false);
  const [selectedPedidoDetails, setSelectedPedidoDetails] =
    useState<Pedido | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!user) return;

    setLoading(true);
    let pedidosQuery = query(collection(db, COLLECTIONS.PEDIDOS));

    if (userRole === "client") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("userId", "==", user.uid)
      );
    } else if (userRole === "admin" || userRole === "encargado") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("status", "==", selectedStatus)
      );
    }

    const unsubscribe = onSnapshot(pedidosQuery, (snapshot) => {
      const pedidosData = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          userId: data.userId,
          items: data.items || [],
          people: data.people || [],
          sede: data.sede,
          status: data.status,
          total: data.total,
          deliveryFee: data.deliveryFee,
          deliveryIncluded: data.deliveryIncluded,
          paymentMethod: data.paymentMethod,
          orderDate: data.orderDate ? data.orderDate.toDate() : new Date(),
          orderId: data.orderId,
        } as Pedido;
      });
      setPedidos(pedidosData);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [user, userRole, selectedStatus]);

  const handleStatusChange = (event: SelectChangeEvent<string>) => {
    setSelectedStatus(event.target.value);
  };

  const handleStatusUpdate = async (orderId: string, newStatus: string) => {
    try {
      await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), {
        status: newStatus,
      });
    } catch (error) {
      console.error(
        "Error actualizando el estado del pedido:",
        (error as { message: string }).message
      );
    }
  };

  const handleOpenDetails = (order: Pedido) => {
    setSelectedPedidoDetails(order);
    setOpenDetails(true);
  };

  const handleCloseDetails = () => {
    setSelectedPedidoDetails(null);
    setOpenDetails(false);
  };

  return (
    <Box>
      <Typography variant="h5" component="h2" gutterBottom>
        Tus Pedidos
      </Typography>
      {userRole !== "client" && (
        <FormControl fullWidth sx={{ marginBottom: 2 }}>
          <InputLabel>Filtrar por estado</InputLabel>
          <Select
            value={selectedStatus}
            label="Filtrar por estado"
            onChange={handleStatusChange}
          >
            <MenuItem value="pendiente">Pendiente</MenuItem>
            <MenuItem value="atendiendo">Atendiendo</MenuItem>
            <MenuItem value="preparando">Preparando</MenuItem>
            <MenuItem value="enviado">Enviado</MenuItem>
          </Select>
        </FormControl>
      )}
      {loading && <CircularProgress />}
      <List>
        {pedidos.map((pedido) => (
          <Box
            key={pedido.id}
            sx={{ marginBottom: 2, padding: 2, border: "1px solid #eee" }}
          >
            <ListItem>
              <ListItemText primary={`ID del pedido: ${pedido.id}`} />
              <Button
                sx={{ marginLeft: 2 }}
                color="primary"
                variant="outlined"
                onClick={() => handleOpenDetails(pedido)}
              >
                Ver Detalles
              </Button>
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText primary={`Estado del pedido: ${pedido.status}`} />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText primary={`Total: $${pedido.total}`} />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText
                primary={`Costo de EnvÃ­o: $${pedido.deliveryFee}`}
              />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText
                primary={`MÃ©todo de Pago: ${pedido.paymentMethod}`}
              />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText
                primary={`Domicilio Incluido: ${
                  pedido.deliveryIncluded ? "SÃ­" : "No"
                }`}
              />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText primary={`Sede: ${pedido.sede}`} />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText
                primary={`Personas: ${pedido.people
                  .map((p) => p.name)
                  .join(", ")}`}
              />
            </ListItem>
            <Divider />
            <ListItem>
              <ListItemText primary={`Items:`} />
            </ListItem>
            {pedido.items.map((item) => (
              <ListItem key={item.id}>
                <ListItemText
                  primary={`- ${item.id} (Cantidad: ${item.quantity})`}
                  secondary={`Asignado a: ${item.assignedTo || "N/A"}`}
                />
              </ListItem>
            ))}
            {userRole !== "client" && (
              <Box sx={{ display: "flex", justifyContent: "flex-end" }}>
                <Button
                  color="primary"
                  variant="contained"
                  onClick={() => handleStatusUpdate(pedido.id, "atendiendo")}
                  disabled={pedido.status === "atendiendo"}
                >
                  Atendiendo
                </Button>
                <Button
                  color="primary"
                  variant="contained"
                  onClick={() => handleStatusUpdate(pedido.id, "preparando")}
                  disabled={pedido.status === "preparando"}
                  sx={{ ml: 1 }}
                >
                  Preparando
                </Button>
                <Button
                  color="primary"
                  variant="contained"
                  onClick={() => handleStatusUpdate(pedido.id, "enviado")}
                  disabled={pedido.status === "enviado"}
                  sx={{ ml: 1 }}
                >
                  Enviado
                </Button>
              </Box>
            )}
          </Box>
        ))}
      </List>
      <Dialog open={openDetails} onClose={handleCloseDetails}>
        <DialogTitle>Detalle del Pedido</DialogTitle>
        {selectedPedidoDetails && (
          <Box sx={{ padding: 2 }}>
            <Typography variant="body1">
              <strong>ID del Pedido:</strong> {selectedPedidoDetails.id}
            </Typography>
            <Typography variant="body1">
              <strong>Estado:</strong> {selectedPedidoDetails.status}
            </Typography>
            <Typography variant="body1">
              <strong>Total:</strong> ${selectedPedidoDetails.total}
            </Typography>
            <Typography variant="body1">
              <strong>Costo de EnvÃ­o:</strong> $
              {selectedPedidoDetails.deliveryFee}
            </Typography>
            <Typography variant="body1">
              <strong>MÃ©todo de Pago:</strong>{" "}
              {selectedPedidoDetails.paymentMethod}
            </Typography>
            <Typography variant="body1">
              <strong>Domicilio Incluido:</strong>{" "}
              {selectedPedidoDetails.deliveryIncluded ? "SÃ­" : "No"}
            </Typography>
            <Typography variant="body1">
              <strong>Sede:</strong> {selectedPedidoDetails.sede}
            </Typography>
            <Typography variant="body1">
              <strong>Personas:</strong>{" "}
              {selectedPedidoDetails.people.map((p) => p.name).join(", ")}
            </Typography>
            <Typography variant="h6" sx={{ marginTop: 2 }}>
              Items:
            </Typography>
            {selectedPedidoDetails.items.map((item) => (
              <Typography variant="body1" key={item.id}>
                - {item.id} (Cantidad: {item.quantity}){" "}
                {item.assignedTo && `Asignado a: ${item.assignedTo}`}
              </Typography>
            ))}
          </Box>
        )}
      </Dialog>
    </Box>
  );
};

export default PedidoList;

/* Fin src\components\pedidos\PedidoList.tsx */

/* Inicio src\components\ui\Button.tsx */
import {
    Button as MuiButton,
    ButtonProps as MuiButtonProps,
} from "@mui/material";
import React, { ButtonHTMLAttributes } from "react";

type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & MuiButtonProps;

const Button: React.FC<ButtonProps> = ({ children, ...props }) => {
  return <MuiButton {...props}>{children}</MuiButton>;
};

export default Button;

/* Fin src\components\ui\Button.tsx */

/* Inicio src\components\ui\ErrorBoundry.tsx */
import { Alert } from '@mui/material';
import React, { Component, ErrorInfo, ReactNode } from 'react';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Error caught by error boundary", error, errorInfo);
      this.setState({ errorInfo });
  }


  render() {
    if (this.state.hasError) {
      return (
          <Alert severity="error">
              Algo salio mal
          </Alert>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
/* Fin src\components\ui\ErrorBoundry.tsx */

/* Inicio src\components\ui\ListItem.tsx */
import {
  ListItem as MuiListItem,
  ListItemProps as MuiListItemProps,
} from "@mui/material";
import { forwardRef, ReactNode } from "react";
import { Link } from "react-router-dom";

interface ListItemProps extends Omit<MuiListItemProps, "children"> {
  children: ReactNode;
  onClick?: () => void;
  to?: string;
  href?: string;
  button?: boolean;
}

const ListItem = forwardRef<HTMLLIElement, ListItemProps>(
  ({ children, onClick, to, href, button, ...props }, ref) => {
    const handleClick = () => {
      if (onClick) {
        onClick();
      }
    };

    return (
      <MuiListItem
        component={to ? Link : "li"}
        to={to}
        href={to ? to : href}
        onClick={handleClick}
        ref={ref}
        button={button ? "true" : undefined}
        {...props}
      >
        {children}
      </MuiListItem>
    );
  }
);

ListItem.displayName = "ListItem";

export default ListItem;

/* Fin src\components\ui\ListItem.tsx */

/* Inicio src\components\ui\TextField.tsx */
import {
    TextField as MuiTextField,
    TextFieldProps as MuiTextFieldProps,
} from "@mui/material";
import React, { InputHTMLAttributes } from "react";

type TextFieldProps = InputHTMLAttributes<HTMLInputElement> & MuiTextFieldProps;

const TextField: React.FC<TextFieldProps> = ({ ...props }) => {
  return <MuiTextField fullWidth variant="outlined" {...props} />;
};

export default TextField;

/* Fin src\components\ui\TextField.tsx */

/* Inicio src\context\AppContext.tsx */
import { CircularProgress } from "@mui/material";
import { collection, onSnapshot } from "firebase/firestore";
import React, {
  createContext,
  ReactNode,
  useEffect,
  useState,
} from "react";
import ErrorBoundary from "../components/ui/ErrorBoundry";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
  recommendation: string;
  observations: string;
}

export interface AppContextProps {
  menu: MenuItem[];
  loading: boolean;
}

export const AppContext = createContext<AppContextProps>({
  menu: [],
  loading: true,
});

interface AppProviderProps {
  children: ReactNode;
}

export const AppProvider: React.FC<AppProviderProps> = ({ children }) => {
  const [menu, setMenu] = useState<MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let unsubscribe: () => void;
    try {
      const menuCollection = collection(db, COLLECTIONS.MENU);
      unsubscribe = onSnapshot(menuCollection, (snapshot) => {
        const menuData = snapshot.docs.map(
          (doc) => ({ id: doc.id, ...doc.data() } as MenuItem)
        );
        setMenu(menuData);
        setLoading(false);
      });
    } catch (error) {
      console.error(error);
      setLoading(false);
    }
    return () => unsubscribe && unsubscribe();
  }, []);

  return (
    <AppContext.Provider value={{ menu, loading }}>
      <ErrorBoundary>{loading ? <CircularProgress /> : children}</ErrorBoundary>
    </AppContext.Provider>
  );
};

/* Fin src\context\AppContext.tsx */

/* Inicio src\context\AuthContext.tsx */
// src/context/AuthContext.tsx

import {
  User,
  createUserWithEmailAndPassword,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth";
import { doc, getDoc, setDoc, updateDoc } from "firebase/firestore";
import React, { ReactNode, createContext, useEffect, useState } from "react";
import { auth, db } from "../utils/firebase";

export interface AuthContextProps {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  userRole: string | null;
  points: number;
  addPoints: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextProps>({
  user: null,
  loading: false,
  login: async () => {},
  register: async () => {},
  logout: async () => {},
  userRole: null,
  points: 0,
  addPoints: async () => {},
});

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [points, setPoints] = useState<number>(0);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      if (currentUser) {
        const userDoc = await getDoc(doc(db, "users", currentUser.uid));
        if (userDoc.exists()) {
          setUserRole(userDoc.data().role);
          setPoints(userDoc.data().points || 0);
        } else {
          // Crear documento de usuario si no existe
          await setDoc(doc(db, "users", currentUser.uid), {
            role: "client",
            points: 0,
            email: currentUser.email,
          });
          setUserRole("client");
          setPoints(0);
        }
      } else {
        setUserRole(null);
        setPoints(0);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;

      const userDoc = await getDoc(doc(db, "users", user.uid));
      if (userDoc.exists()) {
        setUserRole(userDoc.data().role);
        setPoints(userDoc.data().points || 0);
      } else {
        setUserRole("client");
        setPoints(0);
      }
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  const register = async (email: string, password: string) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;
      console.log("Usuario registrado:", user.uid);

      await setDoc(doc(db, "users", user.uid), {
        role: "client",
        points: 0,
        email: email,
      });
      console.log("Documento de usuario creado en Firestore");

      setUserRole("client");
      setPoints(0);
    } catch (error) {
      console.error(
        "Error en el registro:",
        (error as { message: string }).message
      );
      throw new Error((error as { message: string }).message);
    }
  };

  const addPoints = async () => {
    if (!user) return;

    try {
      await updateDoc(doc(db, "users", user.uid), {
        points: points + 10,
      });
      setPoints((prevPoints) => prevPoints + 10);
    } catch (error) {
      console.error("Error al sumar puntos", error);
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      setUserRole(null);
      setPoints(0);
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        login,
        register,
        logout,
        userRole,
        points,
        addPoints,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

/* Fin src\context\AuthContext.tsx */

/* Inicio src\hooks\useAuth.ts */
import { useContext } from 'react';
import { AuthContext, AuthContextProps } from '../context/AuthContext';

export const useAuth = (): AuthContextProps => {
    const context = useContext<AuthContextProps>(AuthContext);
    if (!context) {
        throw new Error("useAuth must be used within a AuthProvider")
    }
    return context;
};
/* Fin src\hooks\useAuth.ts */

/* Inicio src\hooks\useMenu.ts */
import { useContext } from 'react';
import { AppContext, AppContextProps } from '../context/AppContext';

export const useMenu = (): AppContextProps => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error("useMenu must be used within a AppProvider")
  }
  return context;
};
/* Fin src\hooks\useMenu.ts */

/* Inicio src\main.tsx */
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

/* Fin src\main.tsx */

/* Inicio src\pages\Dashboard.tsx */
import { Container, Typography } from "@mui/material";
import React from "react";

const Dashboard: React.FC = () => {
  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Dashboard
      </Typography>
      <Typography variant="body1">
        Bienvenido al panel de control, aqui podras ver un resumen de la
        aplicacion.
      </Typography>
    </Container>
  );
};

export default Dashboard;

/* Fin src\pages\Dashboard.tsx */

/* Inicio src\pages\GestionMenu.tsx */
import { Button, Container } from "@mui/material";
import {
    addDoc,
    collection,
    deleteDoc,
    doc,
    updateDoc,
} from "firebase/firestore";
import React, { useState } from "react";
import MenuList from "../components/menu/MenuList";
import MenuModal from "../components/menu/MenuModal";
import { MenuItem } from "../context/AppContext";
import { useMenu } from "../hooks/useMenu";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

const GestionMenu: React.FC = () => {
  const { menu, loading } = useMenu();
  const [openModal, setOpenModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState<MenuItem | null>(null);

  if (loading) {
    return <div>Cargando...</div>;
  }

  const handleOpenModal = () => {
    setOpenModal(true);
    setSelectedItem(null);
  };
  const handleCloseModal = () => {
    setOpenModal(false);
    setSelectedItem(null);
  };

  const handleEdit = (item: MenuItem) => {
    setSelectedItem(item);
    setOpenModal(true);
  };

  const handleDelete = async (item: MenuItem) => {
    try {
      await deleteDoc(doc(db, COLLECTIONS.MENU, item.id));
    } catch (error) {
      console.error(error);
    }
  };

  const handleSubmit = async (values: Partial<MenuItem>) => {
    try {
      if (selectedItem) {
        await updateDoc(doc(db, COLLECTIONS.MENU, selectedItem.id), values);
      } else {
        await addDoc(collection(db, COLLECTIONS.MENU), values);
      }
      handleCloseModal();
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Button variant="contained" color="primary" onClick={handleOpenModal}>
        Agregar Item
      </Button>
      <MenuList menu={menu} onEdit={handleEdit} onDelete={handleDelete} />
      <MenuModal
        open={openModal}
        onClose={handleCloseModal}
        initialValues={selectedItem || undefined}
        onSubmit={handleSubmit}
      />
    </Container>
  );
};

export default GestionMenu;

/* Fin src\pages\GestionMenu.tsx */

/* Inicio src\pages\GestionUsuarios.tsx */
// src/pages/GestionUsuarios.tsx
import {
    Button,
    Container,
    List,
    ListItem,
    ListItemText,
    Typography,
} from "@mui/material";
import { collection, doc, getDocs, updateDoc } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { db } from "../utils/firebase";

interface Usuario {
  uid: string;
  email: string;
  role: string;
  points: number;
}

const GestionUsuarios: React.FC = () => {
  const [usuarios, setUsuarios] = useState<Usuario[]>([]);

  useEffect(() => {
    const fetchUsuarios = async () => {
      const usuariosCol = collection(db, "users");
      const usuariosSnapshot = await getDocs(usuariosCol);
      const usuariosList = usuariosSnapshot.docs.map((doc) => ({
        uid: doc.id,
        email: doc.data().email || "No email",
        role: doc.data().role,
        points: doc.data().points || 0,
      }));
      setUsuarios(usuariosList);
    };

    fetchUsuarios();
  }, []);

  const cambiarRol = async (uid: string, nuevoRol: string) => {
    const usuarioRef = doc(db, "users", uid);
    await updateDoc(usuarioRef, { role: nuevoRol });
    setUsuarios((prevUsuarios) =>
      prevUsuarios.map((usuario) =>
        usuario.uid === uid ? { ...usuario, role: nuevoRol } : usuario
      )
    );
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        GestiÃ³n de Usuarios
      </Typography>
      <List>
        {usuarios.map((usuario) => (
          <ListItem key={usuario.uid}>
            <ListItemText
              primary={`Correo: ${usuario.email}`}
              secondary={`Rol: ${usuario.role} | Puntos: ${usuario.points}`}
            />
            <Button
              variant="contained"
              color="secondary"
              onClick={() =>
                cambiarRol(
                  usuario.uid,
                  usuario.role === "admin" ? "client" : "admin"
                )
              }
            >
              Cambiar a {usuario.role === "admin" ? "Cliente" : "Administrador"}
            </Button>
          </ListItem>
        ))}
      </List>
    </Container>
  );
};

export default GestionUsuarios;

/* Fin src\pages\GestionUsuarios.tsx */

/* Inicio src\pages\Login.tsx */
import { Grid, Paper, Tab, Tabs } from '@mui/material';
import React, { useState } from 'react';
import LoginForm from '../components/auth/LoginForm';
import RegisterForm from '../components/auth/RegisterForm';
import PublicLayout from '../components/layout/PublicLayout';

const Login: React.FC = () => {
    const [tabValue, setTabValue] = useState(0);

    const handleChange = (event: React.SyntheticEvent, newValue: number) => {
        setTabValue(newValue);
    };

  return (
    <PublicLayout>
    <Grid item xs={10} sm={8} md={6} lg={4}>
        <Paper elevation={3} sx={{ padding: 3 }}>
            <Tabs value={tabValue} onChange={handleChange} centered>
                <Tab label="Iniciar SesiÃ³n" />
                <Tab label="Registrarse" />
            </Tabs>
            {tabValue === 0 && <LoginForm />}
            {tabValue === 1 && <RegisterForm />}
        </Paper>
      </Grid>
    </PublicLayout>
  );
};

export default Login;
/* Fin src\pages\Login.tsx */

/* Inicio src\pages\MenuPage.tsx */
import {
  Button,
  Container,
  Grid,
  TextField,
  Typography,
} from "@mui/material";
import React, { useState } from "react";
import { v4 as uuidv4 } from "uuid";
import PedidoForm from "../components/pedidos/PedidoForm";
import { MenuItem } from "../context/AppContext";
import { useMenu } from "../hooks/useMenu";

interface Person {
  id: string;
  name: string;
  items: { id: string; quantity: number }[];
}

const MenuPage: React.FC = () => {
  const { menu } = useMenu();
  const [numPeople, setNumPeople] = useState<number>(1);
  const [people, setPeople] = useState<Person[]>([]);
  const [showMenu, setShowMenu] = useState(false);
  const [, setOpenPedidoModal] = useState(false);

  const handleNumPeopleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setNumPeople(Number(event.target.value));
  };

  const handleNameChange = (index: number, value: string) => {
    const updatedPeople = [...people];
    updatedPeople[index].name = value;
    setPeople(updatedPeople);
  };

  const handleStartOrder = () => {
    const initialPeople = Array.from({ length: numPeople }, (_, index) => ({
      id: uuidv4(),
      name: `Persona ${index + 1}`,
      items: [],
    }));
    setPeople(initialPeople);
    setShowMenu(true);
  };

  const handleAddItemToPerson = (personId: string, item: MenuItem) => {
    setPeople((prevPeople) =>
      prevPeople.map((person) =>
        person.id === personId
          ? {
              ...person,
              items: [...person.items, { id: item.id, quantity: 1 }],
            }
          : person
      )
    );
  };

  const handleQuantityChange = (
    personId: string,
    itemId: string,
    quantity: number
  ) => {
    setPeople((prevPeople) =>
      prevPeople.map((person) =>
        person.id === personId
          ? {
              ...person,
              items: person.items.map((item) =>
                item.id === itemId ? { ...item, quantity: quantity } : item
              ),
            }
          : person
      )
    );
  };

  const handleRemoveItemFromPerson = (personId: string, itemId: string) => {
    setPeople((prevPeople) =>
      prevPeople.map((person) =>
        person.id === personId
          ? {
              ...person,
              items: person.items.filter((item) => item.id !== itemId),
            }
          : person
      )
    );
  };

  const handleOpenPedidoModal = () => {
    setOpenPedidoModal(true);
  };

  const handleClosePedidoModal = () => {
    setOpenPedidoModal(false);
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        MenÃº
      </Typography>
      {!showMenu ? (
        <Grid container spacing={2} sx={{ marginBottom: 2 }}>
          <Grid item xs={12} sm={6}>
            <TextField
              label="NÃºmero de personas"
              type="number"
              value={numPeople}
              onChange={handleNumPeopleChange}
              fullWidth
              inputProps={{ min: 1 }}
            />
          </Grid>
          {people.map((person, index) => (
            <Grid item xs={12} sm={6} key={person.id}>
              <TextField
                label={`Nombre de la persona ${index + 1} (Opcional)`}
                value={person.name}
                onChange={(e) => handleNameChange(index, e.target.value)}
                fullWidth
              />
            </Grid>
          ))}

          <Grid item xs={12}>
            <Button
              variant="contained"
              color="primary"
              onClick={handleStartOrder}
            >
              Empezar Pedido
            </Button>
          </Grid>
        </Grid>
      ) : (
        <>
          <Grid container spacing={2}>
            {people.map((person) => (
              <Grid item xs={12} md={4} key={person.id}>
                <Typography variant="h6">
                  {person.name || "Persona sin nombre"}
                </Typography>
                <Typography variant="body2">
                  Items:
                </Typography>
                  {person.items.length > 0 ? (
                    <ul style={{ listStyleType: "none", paddingLeft: 0 }}>
                      {person.items.map((item) => {
                        const menuItem = menu.find((menuItem) => menuItem.id === item.id)
                        return menuItem ?(
                          <li key={item.id}>
                            <Typography variant="body2">
                            {menuItem.name} x{" "}
                            <TextField
                            type="number"
                            value={item.quantity}
                              onChange={(e) =>
                                handleQuantityChange(
                                    person.id,
                                  item.id,
                                  parseInt(e.target.value)
                              )}
                                sx={{ width: '60px' }}
                                inputProps={{ min: 1 }}
                              />
                            <Button
                                  variant="outlined"
                                  color="secondary"
                                  onClick={() =>
                                    handleRemoveItemFromPerson(person.id, item.id)
                                  }
                                sx={{ marginLeft: 2, padding: '2px 5px', minWidth: 'auto' }}
                              >
                                  Eliminar
                                </Button>
                          </Typography>
                          </li>
                        ): null
                    })}
                    </ul>
                  ) : (
                      <Typography variant="body2">
                          Esta persona aun no tiene items
                      </Typography>
                  )}
                <Typography variant="body2">
                  Menu:
                </Typography>

                  <Grid container spacing={2}>
                      {menu.map((item) => (
                        <Grid item xs={12} sm={6} md={12} key={item.id}>
                            <Button
                                variant="outlined"
                                color="primary"
                              onClick={() => handleAddItemToPerson(person.id, item)}
                              >
                                {item.name}
                              </Button>
                        </Grid>
                      ))}
                  </Grid>
              </Grid>
            ))}
          </Grid>
           <Button
            variant="contained"
            color="primary"
            onClick={handleOpenPedidoModal}
          >
            Realizar Pedido
          </Button>
           <PedidoForm onClose={handleClosePedidoModal} people={people} />
        </>
      )}
    </Container>
  );
};

export default MenuPage;
/* Fin src\pages\MenuPage.tsx */

/* Inicio src\pages\PedidosPage.tsx */

import { Container, Typography } from "@mui/material";
import React from "react";
import PedidoList from "../components/pedidos/PedidoList";

const PedidosPage: React.FC = () => {
  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Pedidos
      </Typography>
      <PedidoList />
    </Container>
  );
};

export default PedidosPage;

/* Fin src\pages\PedidosPage.tsx */

/* Inicio src\pages\Perfil.tsx */
import { Button, Container, Typography } from "@mui/material";
import React from "react";
import { useAuth } from "../hooks/useAuth";

const Perfil: React.FC = () => {
  const { user, addPoints, points } = useAuth();
  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Perfil
      </Typography>
      {user && (
        <>
          <Typography variant="body1">Correo: {user.email}</Typography>
          <Typography variant="body1">UID: {user.uid}</Typography>
          <Typography variant="body1">Puntos: {points}</Typography>
          <Button variant="contained" color="primary" onClick={addPoints}>
            Sumar puntos
          </Button>
        </>
      )}
    </Container>
  );
};

export default Perfil;

/* Fin src\pages\Perfil.tsx */

/* Inicio src\pages\Success.tsx */
// src/pages/Success.tsx
import { Container, Typography } from "@mui/material";
import React, { useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { handlePaymentNotification } from "../payment/payment";
import "../styles/global.css";

const Success: React.FC = () => {
  const [searchParams] = useSearchParams();
  const sessionId = searchParams.get("session_id");
  const navigate = useNavigate();

  useEffect(() => {
    const handleSuccessPayment = async () => {
      if (sessionId) {
        try {
          await handlePaymentNotification(sessionId);
          navigate("/pedidos");
        } catch (error) {
          console.log(
            "Error al procesar el pago:",
            (error as { message: string }).message
          );
          navigate("/pedidos");
        }
      } else {
        navigate("/pedidos");
      }
    };
    handleSuccessPayment();
  }, [navigate, sessionId]);

  return (
    <Container>
      <Typography variant="h4">Pago exitoso, gracias por tu compra</Typography>
    </Container>
  );
};

export default Success;

/* Fin src\pages\Success.tsx */

/* Inicio src\payment\payment.ts */
// src/payment/payment.ts
import { doc, updateDoc } from "firebase/firestore";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export const updateOrderStatus = async (orderId: string, status: string) => {
    try {
        await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), { status: status });
        return true;
    } catch (error) {
        console.error("Error al actualizar el estado del pedido:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al actualizar el estado del pedido");
    }
};

export const handlePaymentNotification = async (session_id: string) => {
    console.log("Manejando notificacion de pago:", session_id);
    try {
        // AquÃ­ debes implementar la lÃ³gica para verificar el pago con Stripe
        // Por ejemplo, puedes hacer una llamada a tu backend para verificar el estado del pago
        // Luego, actualizar el estado del pedido en Firestore
        // Este es un ejemplo simplificado:

        // SimulaciÃ³n de verificaciÃ³n de pago
        const paymentVerified = true; // Reemplaza con la lÃ³gica real

        if (paymentVerified) {
            // Supongamos que tienes el orderId en los metadatos de la sesiÃ³n
            const orderId = "orderId_from_metadata"; // Reemplaza con el valor real
            await updateOrderStatus(orderId, "enviado");
            return true;
        } else {
            throw new Error("Pago no verificado");
        }
    } catch (error) {
        console.log("Error", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al manejar la notificacion");
    }
};

declare const window;

export const createCheckoutSession = async (amount: number, orderId: string) => {
    try {
        const response = await fetch('https://api.stripe.com/v1/checkout/sessions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer YOUR_STRIPE_SECRET_KEY`,
            },
            body: JSON.stringify({
                line_items: [
                    {
                        price_data: {
                            currency: 'usd',
                            unit_amount: amount * 100,
                            product_data: {
                                name: 'Pedido',
                            },
                        },
                        quantity: 1,
                    }
                ],
                mode: 'payment',
                success_url: `${window.location.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
                cancel_url: window.location.origin,
                metadata: {
                    orderId: orderId,
                },
            }),
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Error al crear sesion');
        }
        return data.id;
    } catch (error) {
        console.error("Error al crear la sesion de checkout:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || 'Error al crear sesion');
    }
};

export const processPayment = async (sessionId: string, publicKey: string) => {
    const stripe = window.Stripe(publicKey);
    stripe.redirectToCheckout({ sessionId });
};

/* Fin src\payment\payment.ts */

/* Inicio src\styles\global.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

/* Fin src\styles\global.css */

/* Inicio src\types\css.d.ts */
declare module '*.css';
/* Fin src\types\css.d.ts */

/* Inicio src\types\global.d.ts */
// src/types/global.d.ts
interface MercadoPago {
    new (publicKey: string, options?): {
       checkout: (params) => void;
    }
  }
  
  interface Window {
    MercadoPago?: MercadoPago;
  }

  interface window {
    Stripe: (publicKey: string) => void;
  }
/* Fin src\types\global.d.ts */

/* Inicio src\utils\constants.ts */
export const COLLECTIONS = {
    MENU: 'menu',
    PEDIDOS: 'pedidos',
  };
/* Fin src\utils\constants.ts */

/* Inicio src\utils\firebase.ts */
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyCKnLLXRtyfyLwVDVs05-q1NLR2JidFzus",
  authDomain: "alacartes.firebaseapp.com",
  projectId: "alacartes",
  storageBucket: "alacartes.firebasestorage.app",
  messagingSenderId: "145893311915",
  appId: "1:145893311915:web:9cd7cb44eba542ffda3eee"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
/* Fin src\utils\firebase.ts */

/* Inicio src\utils\theme.ts */

/* Fin src\utils\theme.ts */

/* Inicio tsconfig.app.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "noImplicitAny": false,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "src"
  ]
}
/* Fin tsconfig.app.json */

/* Inicio tsconfig.json */
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "typeRoots": [
      "src/types"
    ],
    "strict": false,
    "noImplicitAny": false,
    "allowJs": true,
    "skipLibCheck": true
  }
}
/* Fin tsconfig.json */

/* Inicio tsconfig.node.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

/* Fin tsconfig.node.json */

/* Inicio vite.config.ts */
import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'
import { VitePWA } from 'vite-plugin-pwa'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      manifest: {
        name: 'SrPol',
        short_name: 'SrPol',
        description: 'AplicaciÃ³n para restaurantes',
        theme_color: '#ffffff',
        icons: [
          {
            src: '/logo192.png',
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: '/logo512.png',
            sizes: '512x512',
            type: 'image/png',
          },
        ],
      },
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],
      },
    })
  ],
})
/* Fin vite.config.ts */
