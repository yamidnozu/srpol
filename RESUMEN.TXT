
/* Directorio:  */
├── eslint.config.js [30]
├── firebase.json [1]
├── index.html [17]
├── package.json [51]
├── postcss.config.js [9]
├── README.md [51]
├── 📂 src
│   ├── App.tsx [147]
│   ├── 📂 components
│   │   ├── 📂 auth
│   │   │   ├── LoginForm.tsx [83]
│   │   │   └── RegisterForm.tsx [83]
│   │   ├── 📂 forms
│   │   │   ├── MenuForm.tsx [203]
│   │   │   └── PedidoForm.tsx [232]
│   │   ├── 📂 layout
│   │   │   ├── MainLayout.tsx [37]
│   │   │   ├── Navbar.tsx [59]
│   │   │   ├── PublicLayout.tsx [19]
│   │   │   └── Sidebar.tsx [120]
│   │   ├── 📂 menu
│   │   │   ├── GroupOrderPage.tsx [667]
│   │   │   ├── MenuForm.tsx [189]
│   │   │   ├── MenuItem.tsx [61]
│   │   │   ├── MenuList.tsx [22]
│   │   │   ├── MenuModal.tsx [67]
│   │   │   └── PersonMenuModal.tsx [223]
│   │   ├── 📂 payment
│   │   │   └── PaymentForm.tsx [80]
│   │   ├── 📂 pedidos
│   │   │   ├── PedidoForm.tsx [232]
│   │   │   ├── PedidoItem.tsx [9]
│   │   │   └── PedidoList.tsx [290]
│   │   └── 📂 ui
│   │       ├── Button.tsx [79]
│   │       ├── ErrorBoundry.tsx [46]
│   │       ├── ListItem.tsx [64]
│   │       └── TextField.tsx [34]
│   ├── 📂 context
│   │   ├── AppContext.tsx [65]
│   │   └── AuthContext.tsx [164]
│   ├── 📂 hooks
│   │   ├── useAuth.ts [10]
│   │   └── useMenu.ts [10]
│   ├── main.tsx [10]
│   ├── 📂 pages
│   │   ├── Dashboard.tsx [672]
│   │   ├── GestionMenu.tsx [133]
│   │   ├── GestionUsuarios.tsx [82]
│   │   ├── Login.tsx [56]
│   │   ├── MenuPage.tsx [364]
│   │   ├── PedidosPage.tsx [18]
│   │   ├── Perfil.tsx [97]
│   │   └── Success.tsx [41]
│   ├── 📂 payment
│   │   └── payment.ts [87]
│   ├── 📂 styles
│   │   └── global.css [66]
│   ├── 📂 types
│   │   ├── css.d.ts [1]
│   │   └── global.d.ts [14]
│   └── 📂 utils
│       ├── constants.ts [4]
│       ├── firebase.ts [16]
│       └── theme.ts [43]
├── tailwind.config.js [11]
├── tsconfig.app.json [31]
├── tsconfig.json [20]
├── tsconfig.node.json [25]
└── vite.config.ts [37]


Total de líneas resumidas: 5282


/* Inicio eslint.config.js */

import js from '@eslint/js'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import globals from 'globals'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

/* Fin eslint.config.js */

/* Inicio firebase.json */

/* Fin firebase.json */

/* Inicio index.html */
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#ffffff" />
    <title>SrPol</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

/* Fin index.html */

/* Inicio package.json */
{
  "name": "srpol",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mercadopago/sdk-js": "^0.0.3",
    "@mui/icons-material": "^6.4.1",
    "@mui/material": "^6.4.1",
    "@mui/x-data-grid": "^7.24.1",
    "@stripe/stripe-js": "^5.5.0",
    "axios": "^1.7.9",
    "chart.js": "^4.4.7",
    "firebase": "^11.2.0",
    "firebase-admin": "^13.0.2",
    "firebase-functions": "^6.3.0",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "react-router-dom": "^7.1.3",
    "stripe": "^17.5.0",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.17",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5",
    "vite-plugin-pwa": "^0.21.1"
  }
}

/* Fin package.json */

/* Inicio postcss.config.js */
import autoprefixer from 'autoprefixer';
import tailwindcss from 'tailwindcss';

export default {
  plugins: [
    tailwindcss('./tailwind.config.js'),
    autoprefixer,
  ],
};
/* Fin postcss.config.js */

/* Inicio README.md */
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

/* Fin README.md */

/* Inicio src\App.tsx */
import React from "react";
import {
  Navigate,
  Route,
  BrowserRouter as Router,
  Routes,
} from "react-router-dom";
import MainLayout from "./components/layout/MainLayout";
import PublicLayout from "./components/layout/PublicLayout";
import ErrorBoundary from "./components/ui/ErrorBoundry";
import { AppProvider } from "./context/AppContext";
import { AuthProvider } from "./context/AuthContext";
import { useAuth } from "./hooks/useAuth";
import Dashboard from "./pages/Dashboard";
import GestionMenu from "./pages/GestionMenu";
import GestionUsuarios from "./pages/GestionUsuarios";
import Login from "./pages/Login";

import GroupOrderPage from "./components/menu/GroupOrderPage";
import PedidosPage from "./pages/PedidosPage";
import Perfil from "./pages/Perfil";
import Success from "./pages/Success";
import "./styles/global.css";

const PrivateRoute: React.FC<{
  children: React.ReactNode;
  allowedRoles?: string[];
}> = ({ children, allowedRoles }) => {
  const { user, loading, userRole } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  if (!user) {
    return <Navigate to="/login" />;
  }

  if (allowedRoles && !allowedRoles.includes(userRole || "client")) {
    return <Navigate to="/" />;
  }

  return <MainLayout>{children}</MainLayout>;
};

const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, loading } = useAuth();

  if (loading) {
    return <div>Cargando...</div>;
  }

  return !user ? <PublicLayout>{children}</PublicLayout> : <Navigate to="/" />;
};

const App: React.FC = () => {
  return (
    <AuthProvider>
      <AppProvider>
        <Router>
          <ErrorBoundary>
            <Routes>
              <Route
                path="/login"
                element={
                  <PublicRoute>
                    <Login />
                  </PublicRoute>
                }
              />
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <Success />
                  </PrivateRoute>
                }
              />
              <Route
                path="/"
                element={
                  <PrivateRoute>
                    <Dashboard />
                  </PrivateRoute>
                }
              />
              <Route
                path="/menu"
                element={
                  <PrivateRoute>
                    <GroupOrderPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/pedidos"
                element={
                  <PrivateRoute>
                    <PedidosPage />
                  </PrivateRoute>
                }
              />
              <Route
                path="/gestion-menu"
                element={
                  <PrivateRoute allowedRoles={["admin", "encargado"]}>
                    <GestionMenu />
                  </PrivateRoute>
                }
              />
              <Route
                path="/perfil"
                element={
                  <PrivateRoute>
                    <Perfil />
                  </PrivateRoute>
                }
              />
              <Route
                path="/gestion-usuarios"
                element={
                  <PrivateRoute allowedRoles={["admin"]}>
                    <GestionUsuarios />
                  </PrivateRoute>
                }
              />
              {/* Ruta para manejar pagos exitosos */}
              <Route
                path="/success"
                element={
                  <PrivateRoute>
                    <Success />
                  </PrivateRoute>
                }
              />
              {/* Ruta por defecto */}
              <Route path="*" element={<Navigate to="/" />} />
            </Routes>
          </ErrorBoundary>
        </Router>
      </AppProvider>
    </AuthProvider>
  );
};

export default App;

/* Fin src\App.tsx */

/* Inicio src\components\auth\LoginForm.tsx */
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";

const LoginForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const { login } = useAuth();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await login(email, password);
    } catch (error) {
      setError((error as { message: string }).message);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="mt-6 space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Iniciar Sesión</h2>
      <div>
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700"
          >
            Correo electrónico
          </label>
          <input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700"
          >
            Contraseña
          </label>
          <input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
      </div>
      {error && (
        <div
          className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-2"
          role="alert"
        >
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Iniciar Sesión
        </button>
      </div>
    </form>
  );
};

export default LoginForm;

/* Fin src\components\auth\LoginForm.tsx */

/* Inicio src\components\auth\RegisterForm.tsx */
import React, { useState } from "react";
import { useAuth } from "../../hooks/useAuth";

const RegisterForm: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const { register } = useAuth();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    try {
      await register(email, password);
    } catch (error) {
      setError((error as { message: string }).message);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Registrarse</h2>
      <div className="space-y-4">
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700"
          >
            Correo electrónico
          </label>
          <input
            id="email"
            name="email"
            type="email"
            autoComplete="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700"
          >
            Contraseña
          </label>
          <input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
      </div>
      {error && (
        <div
          className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-2"
          role="alert"
        >
          <strong className="font-bold">Error!</strong>
          <span className="block sm:inline">{error}</span>
        </div>
      )}
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Registrarse
        </button>
      </div>
    </form>
  );
};

export default RegisterForm;

/* Fin src\components\auth\RegisterForm.tsx */

/* Inicio src\components\forms\MenuForm.tsx */
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
}

const MenuForm: React.FC<MenuFormProps> = ({ initialValues, onSubmit }) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
    });
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Reemplaza form y añade spacing vertical */}
      <h2 className="text-xl font-bold text-gray-900">
        {" "}
        {/* Reemplaza Typography h5 */}
        {initialValues?.id ? "Editar Item" : "Agregar Item"}
      </h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {" "}
        {/* Reemplaza Grid container con grid y spacing */}
        <div>
          {" "}
          {/* Reemplaza Grid item */}
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Nombre del Item
          </label>{" "}
          {/* Reemplaza TextField label */}
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField input
          />
        </div>
        <div>
          {" "}
          {/* Reemplaza Grid item */}
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Descripción del Item
          </label>{" "}
          {/* Reemplaza TextField label */}
          <input
            type="text"
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField input
          />
        </div>
        <div>
          {" "}
          {/* Reemplaza Grid item */}
          <label
            htmlFor="price"
            className="block text-sm font-medium text-gray-700"
          >
            Precio del Item
          </label>{" "}
          {/* Reemplaza TextField label */}
          <input
            type="number"
            id="price"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField input
          />
        </div>
        <div>
          {" "}
          {/* Reemplaza Grid item */}
          <label
            htmlFor="imageUrl"
            className="block text-sm font-medium text-gray-700"
          >
            Url de la imagen
          </label>{" "}
          {/* Reemplaza TextField label */}
          <input
            type="url"
            id="imageUrl"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField input
          />
        </div>
        <div>
          {" "}
          {/* Reemplaza Grid item */}
          <label
            htmlFor="recommendation"
            className="block text-sm font-medium text-gray-700"
          >
            Recomendaciones
          </label>{" "}
          {/* Reemplaza TextField label */}
          <input
            type="text"
            id="recommendation"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField input
          />
        </div>
        <div>
          {" "}
          {/* Reemplaza Grid item */}
          <label
            htmlFor="observations"
            className="block text-sm font-medium text-gray-700"
          >
            Observaciones
          </label>{" "}
          {/* Reemplaza TextField label */}
          <input
            type="text"
            id="observations"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField input
          />
        </div>
      </div>
      <div className="flex items-center space-x-2 mb-4">
        {" "}
        {/* Reemplaza FormControlLabel y Checkbox con div flex */}
        <input
          type="checkbox"
          id="available"
          checked={available}
          onChange={(e) => setAvailable(e.target.checked)}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" // Reemplaza Checkbox input
        />
        <label
          htmlFor="available"
          className="block text-gray-700 text-sm font-bold"
        >
          Disponible
        </label>{" "}
        {/* Reemplaza FormControlLabel label */}
      </div>
      <div>
        {" "}
        {/* Reemplaza Grid item button container */}
        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" // Reemplaza Button
        >
          {initialValues?.id ? "Guardar Cambios" : "Agregar Item"}
        </button>
      </div>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\forms\MenuForm.tsx */

/* Inicio src\components\forms\PedidoForm.tsx */
// src/components/forms/PedidoForm.tsx
import { Timestamp, addDoc, collection } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu";
import { db } from "../../utils/firebase";

interface PedidoFormProps {
  onClose: () => void;
  people?: {
    id: string;
    name: string;
    items: { id: string; quantity: number }[];
  }[];
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people }) => {
  const { menu } = useMenu();
  const { user, addPoints } = useAuth();

  const [items, setItems] = useState<
    { id: string; quantity: number; assignedTo: string }[]
  >([]);
  const [peopleOrder, setPeopleOrder] = useState<
    { id: string; name: string }[]
  >([]);
  const [sede, setSede] = useState("");
  const [deliveryFee, setDeliveryFee] = useState(0);
  const [deliveryIncluded, setDeliveryIncluded] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState("contraentrega");

  useEffect(() => {
    /* ... useEffect hook same ... */
    if (people) {
      setPeopleOrder(
        people.map((person) => ({ id: person.id, name: person.name }))
      );
      const newItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        }))
      );
      setItems(newItems);
    }
  }, [people]);

  // Simulación de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ["Sede Norte", "Sede Sur", "Sede Centro"];

  useEffect(() => {
    /* ... useEffect hook same ... */
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0]);
    }
  }, [sedesDisponibles]);

  const calculateTotal = () => {
    /* ... calculateTotal function same ... */
    let total = 0;
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id);
      if (menuItem) {
        total += menuItem.price * item.quantity;
      }
    });
    return total + deliveryFee;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    /* ... handleSubmit function same ... */
    event.preventDefault();
    if (!user) return;

    try {
      const total = calculateTotal();
      const orderId = uuidv4();
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: "pendiente",
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
      };

      await addDoc(collection(db, "pedidos"), orderData);
      handlePaymentSuccess();
    } catch (error) {
      console.error("Error al agregar el pedido:", error);
    }
  };

  const handlePaymentSuccess = async () => {
    /* ... handlePaymentSuccess function same ... */
    // Sumar puntos al usuario
    await addPoints();
    alert("Pedido realizado con éxito y puntos sumados.");
    onClose();
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Reemplaza form and add vertical spacing */}
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>{" "}
      {/* Reemplaza Typography h5 */}
      {/* Seleccionar Sede */}
      <div>
        {" "}
        {/* Reemplaza FormControl */}
        <label
          htmlFor="sede"
          className="block text-sm font-medium text-gray-700"
        >
          Sede
        </label>{" "}
        {/* Reemplaza InputLabel */}
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza Select
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      {/* Costo de Envío */}
      <div>
        {" "}
        {/* Reemplaza FormControl */}
        <label
          htmlFor="deliveryFee"
          className="block text-sm font-medium text-gray-700"
        >
          Costo de Envío
        </label>{" "}
        {/* Reemplaza InputLabel */}
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza TextField
        />
      </div>
      {/* Domicilio Incluido */}
      <div className="flex items-start">
        {" "}
        {/* Reemplaza FormControlLabel with div flex */}
        <div className="flex items-center h-5">
          {" "}
          {/* Container for checkbox */}
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded" // Reemplaza Checkbox
          />
        </div>
        <div className="ml-2 text-sm">
          {" "}
          {/* Container for label text */}
          <label
            htmlFor="deliveryIncluded"
            className="font-medium text-gray-700"
          >
            {" "}
            {/* Reemplaza FormControlLabel label */}
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      {/* Método de Pago */}
      <div>
        {" "}
        {/* Reemplaza FormControl */}
        <label
          htmlFor="paymentMethod"
          className="block text-sm font-medium text-gray-700"
        >
          Método de Pago
        </label>{" "}
        {/* Reemplaza InputLabel */}
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" // Reemplaza Select
        >
          <option value="contraentrega">Contraentrega</option>{" "}
          {/* Reemplaza MenuItem with option */}
          {/* Puedes añadir otros métodos de pago si lo deseas */}
        </select>
      </div>
      <div>
        {" "}
        {/* Reemplaza container for Button */}
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" // Reemplaza Button
        >
          Realizar Pedido
        </button>
      </div>
    </form>
  );
};

export default PedidoForm;

/* Fin src\components\forms\PedidoForm.tsx */

/* Inicio src\components\layout\MainLayout.tsx */
// src/components/layout/MainLayout.tsx
import React, { useState } from "react";
import Navbar from "./Navbar";
import Sidebar from "./Sidebar";

interface MainLayoutProps {
  children: React.ReactNode;
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
  const [drawerOpen, setDrawerOpen] = useState(false);

  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen);
  };

  const handleDrawerClose = () => {
    setDrawerOpen(false);
  };

  return (
    <div className="flex h-screen bg-gray-100">
      <Navbar toggleDrawer={handleDrawerToggle} />
      <Sidebar drawerOpen={drawerOpen} handleDrawerClose={handleDrawerClose} />
      <main className="flex-1 overflow-x-hidden overflow-y-auto p-4 md:pl-64">
        {" "}
        {/* Ajuste de padding lateral en desktop para el sidebar fijo */}
        <div className="container mx-auto">
          <div className="w-full">{children}</div>
        </div>
      </main>
    </div>
  );
};

export default MainLayout;

/* Fin src\components\layout\MainLayout.tsx */

/* Inicio src\components\layout\Navbar.tsx */
// src/components/layout/Navbar.tsx
import MenuIcon from "@mui/icons-material/Menu";
import React from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../hooks/useAuth";

interface NavbarProps {
  toggleDrawer: () => void;
}

const Navbar: React.FC<NavbarProps> = ({ toggleDrawer }) => {
  const { logout, user } = useAuth();
  const navigate = useNavigate();

  const handleLogout = async () => {
    await logout();
    navigate("/login");
  };

  return (
    <header className="bg-white shadow-md fixed w-full top-0 z-50">
      <div className="container mx-auto px-4 sm:px-6 py-3 flex justify-between items-center">
        <div className="flex items-center">
          <button
            className="text-gray-500 hover:text-gray-700 focus:outline-none focus:text-gray-700 md:hidden transition-colors duration-200" // Transición en el icono
            aria-label="Abrir menú"
            onClick={toggleDrawer}
          >
            <MenuIcon className="transition-transform duration-300 hover:scale-110" />{" "}
            {/* Transición y escala en hover del icono */}
          </button>
          <img
            src="/public/SrPolForYouSinTitle.svg"
            alt="SrPol Logo"
            className="h-10 mr-2 transition-transform duration-300 hover:scale-105" // Transición en el logo
          />
          <span className="text-xl font-semibold text-gray-900 transition-colors duration-200 hover:text-indigo-700">
            SrPol
          </span>{" "}
          {/* Transición en el título */}
        </div>
        {user && (
          <div className="hidden md:flex items-center">
            <span className="text-gray-700 mr-4">{user.email}</span>
            <button
              className="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transition-colors duration-200 hover:scale-105" // Transición en el botón
              onClick={handleLogout}
            >
              Cerrar Sesión
            </button>
          </div>
        )}
      </div>
    </header>
  );
};

export default Navbar;

/* Fin src\components\layout\Navbar.tsx */

/* Inicio src\components\layout\PublicLayout.tsx */
// src/components/layout/PublicLayout.tsx
import React, { ReactNode } from "react";

interface PublicLayoutProps {
  children: ReactNode;
}

const PublicLayout: React.FC<PublicLayoutProps> = ({ children }) => {
  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      {" "}
      {/* Clases Tailwind para centrar y fondo */}
      {children}
    </div>
  );
};

export default PublicLayout;

/* Fin src\components\layout\PublicLayout.tsx */

/* Inicio src\components\layout\Sidebar.tsx */
// src/components/layout/Sidebar.tsx
import {
  Dashboard as DashboardIcon,
  People as PeopleIcon,
  Person as PersonIcon,
  RestaurantMenu as RestaurantMenuIcon,
  Settings as SettingsIcon,
  ShoppingCart as ShoppingCartIcon,
} from "@mui/icons-material";
import React from "react";
import { NavLink, useLocation } from "react-router-dom"; // Importa NavLink y useLocation
import { useAuth } from "../../hooks/useAuth";

interface SidebarProps {
  drawerOpen: boolean;
  handleDrawerClose: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({ drawerOpen, handleDrawerClose }) => {
  const { userRole } = useAuth();
  const location = useLocation(); // Hook para obtener la ruta actual

  const menuItems = [
    {
      text: "Dashboard",
      icon: <DashboardIcon />,
      path: "/",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Menú",
      icon: <RestaurantMenuIcon />,
      path: "/menu",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Pedidos",
      icon: <ShoppingCartIcon />,
      path: "/pedidos",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Gestionar Menú",
      icon: <SettingsIcon />,
      path: "/gestion-menu",
      roles: ["admin", "encargado"],
    },
    {
      text: "Perfil",
      icon: <PersonIcon />,
      path: "/perfil",
      roles: ["admin", "encargado", "client"],
    },
    {
      text: "Gestión de Usuarios",
      icon: <PeopleIcon />,
      path: "/gestion-usuarios",
      roles: ["admin"],
    },
  ];

  return (
    <aside
      className={`bg-gray-50 w-64 flex-shrink-0 overflow-y-auto fixed top-16 md:top-0 left-0 h-full z-40 transition-transform duration-300 ease-in-out md:translate-x-0 ${
        drawerOpen ? "translate-x-0" : "-translate-x-full"
      } md:shadow-md`} // Shadow en desktop
    >
      <div className="py-6 px-4 md:px-6">
        {" "}
        {/* Más padding en desktop */}
        <span className="text-xl font-semibold text-gray-900 block mb-2 md:hidden text-center">
          Navegación
        </span>{" "}
        {/* Título en mobile */}
        <nav className="space-y-2">
          {menuItems
            .filter(
              (item) =>
                item.roles.includes(userRole || "public") ||
                item.roles.includes("public")
            )
            .map((item) => {
              const isActive = location.pathname === item.path; // Verifica si la ruta coincide
              return (
                <NavLink
                  key={item.text}
                  to={item.path}
                  className={({
                    isActive,
                  }) => `group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200
                                      ${
                                        isActive
                                          ? "bg-indigo-100 text-indigo-700"
                                          : "text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                      }`}
                  onClick={handleDrawerClose} // Cierra el drawer en mobile al hacer clic
                >
                  <span
                    className={`mr-3 h-6 w-6 flex items-center justify-center ${
                      isActive
                        ? "text-indigo-500"
                        : "text-gray-500 group-hover:text-gray-600"
                    }`}
                  >
                    {" "}
                    {/* Icon color changes on hover and active */}
                    {item.icon}
                  </span>
                  {item.text}
                </NavLink>
              );
            })}
        </nav>
      </div>
    </aside>
  );
};

export default Sidebar;

/* Fin src\components\layout\Sidebar.tsx */

/* Inicio src\components\menu\GroupOrderPage.tsx */
/* Directorio: src\components\menu\GroupOrderPage.tsx */
/* Directorio: src\components\menu\GroupOrderPage.tsx */
import React, { useEffect, useRef, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";
import PedidoForm from "../forms/PedidoForm"; // Correct import path

interface Person {
    id: string;
    name: string;
    items: { id: string; quantity: number }[];
}

const GroupOrderPage: React.FC = () => {
    const { menu } = useMenu();
    const [numPeople, setNumPeople] = useState<number>(1);
    const [people, setPeople] = useState<Person[]>([]);
    const [showPeopleNames, setShowPeopleNames] = useState(false);
    const [showPedidoForm, setShowPedidoForm] = useState(false);
    const [sharedOrderItems, setSharedOrderItems] = useState<
        { itemId: string; quantity: number; personIds: string[] }[]
    >([]);
    const [activeTab, setActiveTab] = useState<string>("shared");

    const sharedOrderSummaryRef = useRef<HTMLDivElement>(null);
    const personOrderSummaryRef = useRef<HTMLDivElement>(null);
    const [, setIsMobile] = useState(false);
    const [, setIsSummaryVisible] = useState(true);

    // Nuevos estados añadidos
    const [activeItemId, setActiveItemId] = useState<string | null>(null);
    const [selectedPeople, setSelectedPeople] = useState<string[]>([]);
    const [feedbackMessage, setFeedbackMessage] = useState<string>("");

    useEffect(() => {
        const checkMobile = () => window.innerWidth < 768;
        setIsMobile(checkMobile());
        const handleResize = () => setIsMobile(checkMobile());
        window.addEventListener("resize", handleResize);
        setIsSummaryVisible(!checkMobile());
        return () => window.removeEventListener("resize", handleResize);
    }, []);


    const handleNumPeopleChange = (
        event: React.ChangeEvent<HTMLInputElement>
    ) => {
        const num = Number(event.target.value);
        setNumPeople(num);

        setPeople((prevPeople) => {
            const currentPeopleCount = prevPeople.length;
            if (num > currentPeopleCount) {
                const newPeople = Array.from({ length: num - currentPeopleCount }, (_, index) => ({
                    id: uuidv4(),
                    name: `Persona ${currentPeopleCount + index + 1}`,
                    items: [],
                }));
                return [...prevPeople, ...newPeople];
            } else if (num < currentPeopleCount) {
                return prevPeople.slice(0, num);
            } else {
                return prevPeople;
            }
        });
    };

    const handlePersonNameChange = (index: number, name: string) => {
        const updatedPeople = [...people];
        updatedPeople[index].name = name;
        setPeople(updatedPeople);
    };


    const handleStartOrder = () => {
        if (people.every(person => person.name.trim() !== "")) {
            setShowPeopleNames(true);
            setActiveTab("shared");
        } else {
            alert("Por favor, ingresa el nombre de cada persona.");
        }

    };


    const handleReviewOrder = () => {
        distributeSharedOrderItems();
        setShowPedidoForm(true);
    };

    const calculateSubtotal = (
        personItems: { id: string; quantity: number }[]
    ) => {
        let total = 0;
        personItems.forEach((item) => {
            const menuItem = menu.find((m) => m.id === item.id);
            if (menuItem) {
                total += menuItem.price * item.quantity;
            }
        });
        return total;
    };

    const calculateSharedSubtotal = () => {
        let total = 0;
        sharedOrderItems.forEach((sharedItem) => {
            const menuItem = menu.find((m) => m.id === sharedItem.itemId);
            if (menuItem) {
                total += menuItem.price * sharedItem.quantity;
            }
        });
        return total;
    };

    const handleAddToSharedOrder = (item: MenuItem) => {
        const existingItemIndex = sharedOrderItems.findIndex(
            (sharedItem) => sharedItem.itemId === item.id
        );
        if (existingItemIndex > -1) {
            const updatedSharedOrderItems = [...sharedOrderItems];
            updatedSharedOrderItems[existingItemIndex].quantity += 1;
            setSharedOrderItems(updatedSharedOrderItems);
        } else {
            setSharedOrderItems([
                ...sharedOrderItems,
                { itemId: item.id, quantity: 1, personIds: [] },
            ]);
        }
    };

    const handleSharedOrderItemQuantityChange = (
        itemId: string,
        quantity: number
    ) => {
        if (quantity < 0) return;
        const updatedSharedOrderItems = sharedOrderItems.map((sharedItem) =>
            sharedItem.itemId === itemId ? { ...sharedItem, quantity } : sharedItem
        );
        setSharedOrderItems(updatedSharedOrderItems);
    };

    const handleRemoveSharedOrderItem = (itemId: string) => {
        const updatedSharedOrderItems = sharedOrderItems.filter(
            (item) => item.itemId !== itemId
        );
        setSharedOrderItems(updatedSharedOrderItems);
    };

    const distributeSharedOrderItems = () => {
        const itemsToDistribute = [...sharedOrderItems];
        const updatedPeople = people.map((person) => ({
            ...person,
            items: [...person.items],
        }));

        itemsToDistribute.forEach((sharedItem) => {
            const menuItem = menu.find((m) => m.id === sharedItem.itemId);
            if (menuItem) {
                for (let i = 0; i < sharedItem.quantity; i++) {
                    const personToAssign = updatedPeople.reduce(
                        (bestPerson, currentPerson) => {
                            const bestPersonItemsCount = bestPerson.items.reduce(
                                (sum, item) => sum + item.quantity,
                                0
                            );
                            const currentPersonItemsCount = currentPerson.items.reduce(
                                (sum, item) => sum + item.quantity,
                                0
                            );
                            return currentPersonItemsCount < bestPersonItemsCount
                                ? currentPerson
                                : bestPerson;
                        },
                        updatedPeople[0]
                    );

                    personToAssign.items.push({ id: sharedItem.itemId, quantity: 1 });
                }
            }
        });
        setPeople(updatedPeople);
        setSharedOrderItems([]);
    };

    const handleAddItemToPerson = (personId: string, item: MenuItem) => {
        setPeople((prevPeople) => {
            return prevPeople.map((person) => {
                if (person.id === personId) {
                    const itemExists = person.items.some(
                        (orderItem) => orderItem.id === item.id
                    );
                    if (itemExists) {
                        return {
                            ...person,
                            items: person.items.map((orderItem) =>
                                orderItem.id === item.id
                                    ? { ...orderItem, quantity: orderItem.quantity + 1 }
                                    : orderItem
                            ),
                        };
                    } else {
                        return {
                            ...person,
                            items: [...person.items, { id: item.id, quantity: 1 }],
                        };
                    }
                }
                return person;
            });
        });
    };

    const handlePersonOrderItemQuantityChange = (personId: string, itemId: string, quantity: number) => {
        if (quantity < 0) return;
        setPeople(prevPeople =>
            prevPeople.map(person => {
                if (person.id === personId) {
                    return {
                        ...person,
                        items: person.items.map(item =>
                            item.id === itemId ? { ...item, quantity } : item
                        )
                    };
                }
                return person;
            })
        );
    };


    const handleRemoveItemFromPerson = (personId: string, itemId: string) => {
        setPeople((prevPeople) =>
            prevPeople.map((person) =>
                person.id === personId
                    ? {
                        ...person,
                        items: person.items.filter((item) => item.id !== itemId),
                    }
                    : person
            )
        );
    };


    const handleToggleSelectPerson = (personId: string) => {
        setSelectedPeople((prev) =>
            prev.includes(personId)
                ? prev.filter((id) => id !== personId)
                : [...prev, personId]
        );
    };

    const handleAddToSelected = (item: MenuItem) => {
        const targetPeople = people.filter((person) =>
            selectedPeople.includes(person.id)
        );

        setPeople((prevPeople) =>
            prevPeople.map((person) => {
                if (selectedPeople.includes(person.id)) {
                    const itemExists = person.items.some(
                        (orderItem) => orderItem.id === item.id
                    );
                    if (itemExists) {
                        return {
                            ...person,
                            items: person.items.map((orderItem) =>
                                orderItem.id === item.id
                                    ? { ...orderItem, quantity: orderItem.quantity + 1 }
                                    : orderItem
                            ),
                        };
                    } else {
                        return {
                            ...person,
                            items: [...person.items, { id: item.id, quantity: 1 }],
                        };
                    }
                }
                return person;
            })
        );

        setSharedOrderItems(prevSharedOrderItems =>
            prevSharedOrderItems.map(sharedItem => {
                if (sharedItem.itemId === item.id) {
                    return {
                        ...sharedItem,
                        personIds: [...sharedItem.personIds, ...selectedPeople]
                    };
                }
                return sharedItem;
            })
        );

        setSelectedPeople([]);
        setActiveItemId(null);

        const names = targetPeople.map((p) => p.name).join(", ");
        setFeedbackMessage(`Añadido a las órdenes de: ${names}`);

        setTimeout(() => {
            setFeedbackMessage("");
        }, 3000);
    };


    const menuCategories = menu.reduce((categories, item) => {
        const category = item.recommendation || "General";
        if (!categories[category]) {
            categories[category] = [];
        }
        categories[category].push(item);
        return categories;
    }, {});

    return (
        <div className="container mx-auto my-8 p-6 bg-white rounded-xl shadow-md relative">
            <h1 className="text-3xl font-bold text-gray-900 mb-6 text-center text-indigo-700">
                ¡Pedido Grupal Fácil y Divertido! 🎉
            </h1>

            {!showPeopleNames ? (
                <div className="mb-8 text-center">
                    <h2 className="text-xl font-semibold text-gray-800 mb-4">
                        ¿Cuántos son hoy?
                    </h2>
                    <div className="flex flex-col items-center space-y-4">
                        <div className="flex items-center space-x-4">
                            <label
                                htmlFor="numPeople"
                                className="block text-gray-700 text-sm font-bold"
                            >
                                Somos:
                            </label>
                            <input
                                type="number"
                                id="numPeople"
                                value={numPeople}
                                onChange={handleNumPeopleChange}
                                min="1"
                                className="shadow appearance-none border rounded w-20 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-center"
                            />
                            <span className="text-gray-700 text-sm font-bold">
                                Personas
                            </span>
                        </div>
                        {Array.from({ length: numPeople }).map((_, index) => (
                            <input
                                key={index}
                                type="text"
                                placeholder={`Nombre Persona ${index + 1}`}
                                className="shadow appearance-none border rounded w-full max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                value={people[index]?.name || ""}
                                onChange={(e) => handlePersonNameChange(index, e.target.value)}
                            />
                        ))}
                    </div>

                    <button
                        className="mt-6 bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:shadow-outline transition-colors duration-300"
                        onClick={handleStartOrder}
                    >
                        ¡A Pedir! 🚀
                    </button>
                </div>
            ) : !showPedidoForm ? (
                <>
                    <div className="border-b border-gray-200 mb-4">
                        <nav
                            className="-mb-px flex space-x-8 overflow-x-auto md:overflow-x-hidden"
                            aria-label="Tabs"
                        >
                            <button
                                onClick={() => setActiveTab("shared")}
                                className={`${
                                    activeTab === "shared"
                                        ? "border-indigo-500 text-indigo-600"
                                        : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300`}
                            >
                                🍕 Para Compartir
                            </button>
                            {people.map((person, index) => (
                                <button
                                    key={person.id}
                                    onClick={() => setActiveTab(person.id)}
                                    className={`${
                                        activeTab === person.id
                                            ? "border-indigo-500 text-indigo-600"
                                            : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                                    } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm transition-colors duration-300`}
                                >
                                    {person.name || `Persona ${index + 1}`}
                                </button>
                            ))}
                        </nav>
                    </div>

                    {activeTab === "shared" && (
                        <div className="mb-8">
                            <div className="sticky top-16 bg-white p-4 shadow-md z-20 rounded-md transition-transform duration-200 ease-out transform translate-y-0 hover:translate-y-[-2px] ring-2 ring-indigo-500 ring-opacity-50 hover:ring-opacity-100" ref={sharedOrderSummaryRef}>
                                <h2 className="text-2xl font-bold text-gray-900 mb-4 text-center">
                                    Pedido para Compartir 🤝
                                </h2>
                                <ul className="mb-4">
                                    {sharedOrderItems.map((sharedItem) => {
                                        const menuItem = menu.find(
                                            (m) => m.id === sharedItem.itemId
                                        );
                                        return menuItem ? (
                                            <li
                                                key={sharedItem.itemId}
                                                className="flex justify-between items-center py-2 border-b border-gray-200"
                                            >
                                                <span className="flex-1 min-w-0"> {/* Item name takes available space */}
                                                    {menuItem.name}
                                                </span>
                                                <div className="flex items-center space-x-2">
                                                    <button
                                                        onClick={() => handleSharedOrderItemQuantityChange(sharedItem.itemId, sharedItem.quantity - 1)}
                                                        className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                                                    >
                                                        -
                                                    </button>
                                                    <span className="w-6 text-center">{sharedItem.quantity}</span>
                                                    <button
                                                        onClick={() => handleSharedOrderItemQuantityChange(sharedItem.itemId, sharedItem.quantity + 1)}
                                                        className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                                                    >
                                                        +
                                                    </button>
                                                    <button
                                                        onClick={() => handleRemoveSharedOrderItem(sharedItem.itemId)}
                                                        className="text-red-500 hover:text-red-700 transition-colors duration-200"
                                                    >
                                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-5 h-5">
                                                            <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z" />
                                                        </svg>
                                                    </button>
                                                </div>
                                                <span className="w-12 text-right"> {/* Price with fixed width and right alignment */}
                                                    ${(menuItem.price * sharedItem.quantity).toFixed(2)}
                                                </span>
                                            </li>
                                        ) : null;
                                    })}
                                    {sharedOrderItems.length > 0 && (
                                        <li className="font-semibold text-right mt-2">
                                            Subtotal: <span className="text-indigo-700">${calculateSharedSubtotal().toFixed(2)}</span>
                                        </li>
                                    )}
                                </ul>
                            </div>
                            <p className="text-gray-600 mb-4 text-center mt-4">
                                ¿Algo más para compartir? ¡Elige del menú!
                            </p>
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
                                {Object.entries(menuCategories).map(
                                    ([categoryName, items]) => (
                                        <div key={categoryName} className="transition-all duration-300 transform hover:scale-105"> {/* Card animation */}
                                            <h3 className="font-bold text-lg text-gray-900 mb-2 text-indigo-500">
                                                {categoryName}
                                            </h3>
                                            <div className="flex flex-col space-y-2">
                                                {(items as MenuItem[]).map(
                                                    (item) => (
                                                        <button
                                                            key={item.id}
                                                            className="bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-left transition-colors duration-300"
                                                            onClick={() =>
                                                                handleAddToSharedOrder(
                                                                    item
                                                                )
                                                            }
                                                        >
                                                            {item.name} - ${item.price}
                                                        </button>
                                                    )
                                                )}
                                            </div>
                                        </div>
                                    )
                                )}
                            </div>
                        </div>
                    )}

                    {people.map(
                        (person, index) =>
                            activeTab === person.id && (
                                <div
                                    key={person.id}
                                    className="mb-8"
                                    ref={personOrderSummaryRef}
                                >
                                    <div className="sticky top-16 bg-white p-4 shadow-md z-20 rounded-md transition-transform duration-200 ease-out transform translate-y-0 hover:translate-y-[-2px] ring-2 ring-indigo-500 ring-opacity-50 hover:ring-opacity-100">
                                        <h2 className="text-xl font-semibold text-gray-900 mb-4 text-center">
                                            Pedido de {person.name || `Persona ${index + 1}`} 😋
                                        </h2>
                                        <ul className="mb-4">
                                            {person.items.map((item) => {
                                                const menuItem = menu.find((m) => m.id === item.id);
                                                return menuItem ? (
                                                    <li
                                                        key={item.id}
                                                        className="flex justify-between items-center py-2 border-b border-gray-200"
                                                    >
                                                        <span className="flex-1 min-w-0">
                                                            {menuItem.name}
                                                        </span>
                                                        <div className="flex items-center space-x-2">
                                                            <button
                                                                onClick={() => handlePersonOrderItemQuantityChange(person.id, item.id, item.quantity - 1)}
                                                                className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                                                            >
                                                                -
                                                            </button>
                                                            <span className="w-6 text-center">{item.quantity}</span>
                                                            <button
                                                                onClick={() => handlePersonOrderItemQuantityChange(person.id, item.id, item.quantity + 1)}
                                                                className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                                                            >
                                                                +
                                                            </button>
                                                            <button
                                                                onClick={() => handleRemoveItemFromPerson(person.id, item.id)}
                                                                className="text-red-500 hover:text-red-700 transition-colors duration-200"
                                                            >
                                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-5 h-5">
                                                                    <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z" />
                                                                </svg>
                                                            </button>
                                                        </div>
                                                        <span className="w-12 text-right">
                                                            ${(menuItem.price * item.quantity).toFixed(2)}
                                                        </span>
                                                    </li>
                                                ) : null;
                                            })}
                                            {person.items.length > 0 && (
                                                <li className="font-semibold text-right mt-2">
                                                    Subtotal: <span className="text-indigo-700">${calculateSubtotal(person.items).toFixed(2)}</span>
                                                </li>
                                            )}
                                        </ul>
                                    </div>

                                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                        {Object.entries(menuCategories).map(
                                            ([categoryName, items]) => (
                                                <div key={categoryName} className="transition-all duration-300 transform hover:scale-105"> {/* Card animation */}
                                                    <h3 className="font-bold text-lg text-gray-900 mb-2 text-indigo-500">
                                                        {categoryName}
                                                    </h3>
                                                    <div className="flex flex-col space-y-2">
                                                        {(items as MenuItem[]).map(
                                                            (item) => (
                                                                <button
                                                                    key={item.id}
                                                                    className="bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-left transition-colors duration-300"
                                                                    onClick={() =>
                                                                        handleAddItemToPerson(
                                                                            person.id,
                                                                            item
                                                                        )
                                                                    }
                                                                >
                                                                    {item.name} - ${item.price}
                                                                </button>
                                                            )
                                                        )}
                                                    </div>
                                                </div>
                                            )
                                        )}
                                    </div>
                                </div>
                            )
                    )}

                    <div className="flex justify-center mt-8">
                        <button
                            className="bg-green-500 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:shadow-outline disabled:opacity-50 transition-colors duration-300 animate-pulse hover:animate-none"  // Button pulse animation
                            onClick={handleReviewOrder}
                            disabled={
                                people.some((person) => person.items.length === 0) &&
                                sharedOrderItems.length === 0
                            }
                        >
                            ¡Revisar Pedido Grupal! ✅
                        </button>
                    </div>
                </>
            ) : (
                <div className="max-w-2xl mx-auto p-6 bg-white rounded-xl shadow-md animate-fade-in"> {/* Fade in animation for review */}
                    <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center text-indigo-700">
                        ¡Revisa tu Pedido Grupal! 🧐
                    </h2>
                    {sharedOrderItems.length > 0 && (
                        <div className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-50">
                            <h3 className="text-lg font-semibold text-gray-900 mb-3 text-indigo-600">
                                Pedido Compartido 🤝
                            </h3>
                            <ul>
                                {sharedOrderItems.map((sharedItem) => {
                                    const menuItem = menu.find(
                                        (m) => m.id === sharedItem.itemId
                                    );
                                    return menuItem ? (
                                        <li key={sharedItem.itemId} className="py-1 flex justify-between"> {/* Flex for alignment */}
                                            <span className="flex-1">{menuItem.name} x {sharedItem.quantity}</span> {/* Item name takes space */}
                                            <span className="w-12 text-right">${(menuItem.price * sharedItem.quantity).toFixed(2)}</span> {/* Price right aligned */}
                                        </li>
                                    ) : null;
                                })}
                            </ul>
                            <div className="font-semibold text-right">
                                Subtotal: <span className="text-indigo-700">${calculateSharedSubtotal().toFixed(2)}</span>
                            </div>
                        </div>
                    )}
                    {people.map((person) => (
                        <div
                            key={person.id}
                            className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-50"
                        >
                            <h3 className="text-lg font-semibold text-gray-900 mb-3 text-indigo-600">
                                {person.name || "Persona"}
                            </h3>
                            <ul>
                                {person.items.map((item) => {
                                    const menuItem = menu.find(
                                        (m) => m.id === item.id
                                    );
                                    return menuItem ? (
                                        <li key={item.id} className="py-1 flex justify-between"> {/* Flex for alignment */}
                                            <span className="flex-1">{menuItem.name} x {item.quantity}</span> {/* Item name takes space */}
                                            <span className="w-12 text-right">${(menuItem.price * item.quantity).toFixed(2)}</span> {/* Price right aligned */}
                                        </li>
                                    ) : null;
                                })}
                            </ul>
                            <div className="font-semibold text-right">
                                Subtotal: <span className="text-indigo-700">${calculateSubtotal(person.items).toFixed(2)}</span>
                            </div>
                        </div>
                    ))}
                    <PedidoForm
                        onClose={() => setShowPedidoForm(false)}
                        people={people}
                        sharedOrderItems={sharedOrderItems}
                    />
                </div>
            )}

            {feedbackMessage && (
                <div className="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg animate-fade-in">
                    {feedbackMessage}
                </div>
            )}
        </div>
    );
};

export default GroupOrderPage;
/* Fin src\components\menu\GroupOrderPage.tsx */

/* Inicio src\components\menu\MenuForm.tsx */
/* src\components\menu\MenuForm.tsx */
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
  onClose: () => void; // Add onClose prop
}

const MenuForm: React.FC<MenuFormProps> = ({
  initialValues,
  onSubmit,
  onClose,
}) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
    });
    onClose(); // Close modal on submit
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Formulario con espaciado vertical */}
      <div className="grid grid-cols-1 gap-4">
        {" "}
        {/* Grid para los campos */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Nombre del Item
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Descripción
          </label>
          <textarea /* Usamos textarea para la descripción */
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="price"
            className="block text-sm font-medium text-gray-700"
          >
            Precio
          </label>
          <input
            type="number"
            id="price"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="imageUrl"
            className="block text-sm font-medium text-gray-700"
          >
            URL de Imagen
          </label>
          <input
            type="url"
            id="imageUrl"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="recommendation"
            className="block text-sm font-medium text-gray-700"
          >
            Recomendaciones (Opcional)
          </label>
          <input
            type="text"
            id="recommendation"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="observations"
            className="block text-sm font-medium text-gray-700"
          >
            Observaciones (Opcional)
          </label>
          <input
            type="text"
            id="observations"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
      </div>
      <div className="flex items-center justify-between mt-4">
        {" "}
        {/* Contenedor para checkbox y botones */}
        <div className="flex items-center">
          <input
            type="checkbox"
            id="available"
            className="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
            checked={available}
            onChange={(e) => setAvailable(e.target.checked)}
          />
          <label htmlFor="available" className="ml-2 text-sm text-gray-700">
            Disponible
          </label>
        </div>
        <div className="space-x-2">
          <button
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            onClick={onClose}
            type="button" /* Importante: type="button" para evitar submit del form al cancelar */
          >
            Cancelar
          </button>
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            {initialValues?.id ? "Guardar" : "Agregar"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\menu\MenuForm.tsx */

/* Inicio src\components\menu\MenuItem.tsx */
/* src\components\menu\MenuItem.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../context/AppContext";

interface MenuItemProps {
  item: MenuItemType;
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => void;
}

const MenuItem: React.FC<MenuItemProps> = ({ item, onEdit, onDelete }) => {
  return (
    <div className="max-w-sm rounded overflow-hidden shadow-lg">
      {" "}
      {/* Card principal con Tailwind */}
      <img className="w-full" src={item.imageUrl} alt={item.name} />{" "}
      {/* Imagen responsive */}
      <div className="px-6 py-4">
        {" "}
        {/* Contenido principal card */}
        <div className="font-bold text-xl mb-2">{item.name}</div>{" "}
        {/* Nombre del item */}
        <p className="text-gray-700 text-base">{item.description}</p>{" "}
        {/* Descripción */}
        <p className="text-gray-700 text-lg mt-2">Precio: ${item.price}</p>{" "}
        {/* Precio */}
        <div>
          {item.recommendation && (
            <p className="text-gray-600 text-sm mt-1">
              Recomendaciones: {item.recommendation}
            </p>
          )}
          {item.observations && (
            <p className="text-gray-600 text-sm mt-1">
              Observaciones: {item.observations}
            </p>
          )}
        </div>
      </div>
      <div className="px-6 py-4 flex justify-end space-x-2">
        {" "}
        {/* Contenedor acciones */}
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => onEdit(item)}
        >
          Editar
        </button>
        <button
          className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => onDelete(item)}
        >
          Eliminar
        </button>
      </div>
    </div>
  );
};

export default MenuItem;

/* Fin src\components\menu\MenuItem.tsx */

/* Inicio src\components\menu\MenuList.tsx */
/* src\components\menu\MenuList.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../context/AppContext";
import MenuItemComponent from "./MenuItem";

interface MenuListProps {
  menu: MenuItemType[];
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => Promise<void>;
}

const MenuList: React.FC<MenuListProps> = ({ menu, onEdit, onDelete }) => {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6"> {/* Grid responsive para la lista */}
      {menu.map((item) => (
        <MenuItemComponent key={item.id} item={item} onEdit={onEdit} onDelete={onDelete} />
      ))}
    </div>
  );
};

export default MenuList;
/* Fin src\components\menu\MenuList.tsx */

/* Inicio src\components\menu\MenuModal.tsx */
/* src\components\menu\MenuModal.tsx */
import React from "react";
import { MenuItem } from "../../context/AppContext";
import MenuFormComponent from "./MenuForm";

interface MenuModalProps {
  open: boolean;
  onClose: () => void;
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
}

const MenuModal: React.FC<MenuModalProps> = ({
  open,
  onClose,
  initialValues,
  onSubmit,
}) => {
  if (!open) return null;

  return (
    <div className="fixed z-50 inset-0 overflow-y-auto">
      {" "}
      {/* Overlay y contenedor modal */}
      {/* Overlay */}
      <div
        className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
        onClick={onClose}
        aria-hidden="true"
      ></div>
      {/* Modal container */}
      <div className="flex items-center justify-center min-h-screen px-4 py-8">
        {" "}
        {/* Centrado vertical y horizontal */}
        {/* Modal panel */}
        <div className="bg-white w-full max-w-lg rounded-xl shadow-2xl overflow-hidden transform transition-all sm:w-full sm:mx-auto">
          {" "}
          {/* Panel modal */}
          <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
            {" "}
            {/* Header modal */}
            <h3
              className="text-lg font-semibold text-gray-900"
              id="modal-headline"
            >
              {initialValues?.id
                ? "Editar Item del Menú"
                : "Agregar Nuevo Item al Menú"}
            </h3>
          </div>
          <div className="p-6">
            {" "}
            {/* Body modal */}
            <MenuFormComponent
              initialValues={initialValues}
              onSubmit={onSubmit}
              onClose={onClose}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default MenuModal;

/* Fin src\components\menu\MenuModal.tsx */

/* Inicio src\components\menu\PersonMenuModal.tsx */
// src/components/forms/PedidoForm.tsx
import { Timestamp, addDoc, collection } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu";
import { db } from "../../utils/firebase";

interface PedidoFormProps {
  onClose: () => void;
  people?: {
    id: string;
    name: string;
    items: { id: string; quantity: number }[];
  }[];
  sharedOrderItems?: {
    itemId: string;
    quantity: number;
    personIds: string[];
  }[]; // Prop para items compartidos
}

const PedidoForm: React.FC<PedidoFormProps> = ({
  onClose,
  people,
  sharedOrderItems,
}) => {
  const { menu } = useMenu();
  const { user, addPoints } = useAuth();

  const [items, setItems] = useState<
    { id: string; quantity: number; assignedTo: string }[]
  >([]);
  const [peopleOrder, setPeopleOrder] = useState<
    { id: string; name: string }[]
  >([]);
  const [sede, setSede] = useState("");
  const [deliveryFee, setDeliveryFee] = useState(0);
  const [deliveryIncluded, setDeliveryIncluded] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState("contraentrega");

  useEffect(() => {
    if (people) {
      setPeopleOrder(
        people.map((person) => ({ id: person.id, name: person.name }))
      );
      const newItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        }))
      );
      setItems(newItems);
    }
  }, [people]);

  // Simulación de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ["Sede Norte", "Sede Sur", "Sede Centro"];

  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0]);
    }
  }, [sedesDisponibles]);

  const calculateTotal = () => {
    let total = 0;
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id);
      if (menuItem) {
        total += menuItem.price * item.quantity;
      }
    });
    if (sharedOrderItems) {
      // Sumar el costo de items compartidos
      sharedOrderItems.forEach((sharedItem) => {
        const menuItem = menu.find((m) => m.id === sharedItem.itemId);
        if (menuItem) {
          total += menuItem.price * sharedItem.personIds.length; // Precio por cada persona que lo pide
        }
      });
    }
    return total + deliveryFee;
  };

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!user) return;

    try {
      const total = calculateTotal();
      const orderId = uuidv4();
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: "pendiente",
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              // Incluir sharedOrderItems en los datos del pedido
              itemId: si.itemId,
              personIds: si.personIds,
            }))
          : [],
      };

      await addDoc(collection(db, "pedidos"), orderData);
      handlePaymentSuccess();
    } catch (error) {
      console.error("Error al agregar el pedido:", error);
    }
  };

  const handlePaymentSuccess = async () => {
    await addPoints();
    alert("Pedido realizado con éxito y puntos sumados.");
    onClose();
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label
          htmlFor="sede"
          className="block text-sm font-medium text-gray-700"
        >
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label
          htmlFor="deliveryFee"
          className="block text-sm font-medium text-gray-700"
        >
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label
            htmlFor="deliveryIncluded"
            className="font-medium text-gray-700"
          >
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label
          htmlFor="paymentMethod"
          className="block text-sm font-medium text-gray-700"
        >
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Realizar Pedido
        </button>
      </div>
    </form>
  );
};

export default PedidoForm;

/* Fin src\components\menu\PersonMenuModal.tsx */

/* Inicio src\components\payment\PaymentForm.tsx */
import { Alert, Button } from "@mui/material";
import React, { useEffect, useState } from "react";
import {
  createCheckoutSession,
  handlePaymentNotification,
  processPayment,
} from "../../payment/payment";

interface PaymentFormProps {
  amount: number;
  orderId: string;
  onSuccess: () => void;
}
const PaymentForm: React.FC<PaymentFormProps> = ({
  amount,
  onSuccess,
  orderId,
}) => {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [publicKey, setPublicKey] = useState<string | null>(null);
  const [paymentResult] = useState<string | null>(null);
  useEffect(() => {
    const loadPublicKey = async () => {
      setPublicKey("YOUR_STRIPE_PUBLIC_KEY");
    };
    loadPublicKey();
  }, []);

  const handlePayment = async () => {
    setLoading(true);
    setError(null);
    try {
      if (!publicKey) {
        setError("Clave publica no encontrada");
        setLoading(false);
        setTimeout(() => setError(null), 5000);
        return;
      }
      const sessionId = await createCheckoutSession(amount, orderId);
      await processPayment(sessionId, publicKey);
      const response = await handlePaymentNotification(sessionId);
      if (response) {
        setLoading(false);
        onSuccess();
      } else {
        throw new Error("Error al procesar el pago");
      }
    } catch (error) {
      setError(error.message);
      setLoading(false);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <>
      {error && <Alert severity="error">{error}</Alert>}
      {paymentResult === "success" && (
        <Alert severity="success">Pago Exitoso</Alert>
      )}
      {paymentResult === "failure" && (
        <Alert severity="error">Pago Fallido</Alert>
      )}
      {paymentResult === "pending" && (
        <Alert severity="info">Pago Pendiente</Alert>
      )}
      <Button
        variant="contained"
        color="primary"
        onClick={handlePayment}
        disabled={loading}
      >
        {loading ? "Procesando" : "Pagar"}
      </Button>
    </>
  );
};
export default PaymentForm;

/* Fin src\components\payment\PaymentForm.tsx */

/* Inicio src\components\pedidos\PedidoForm.tsx */
/* Directorio: src\components\forms\PedidoForm.tsx */
// src/components/forms/PedidoForm.tsx
import { Timestamp, addDoc, collection } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu";
import { db } from "../../utils/firebase";

interface PedidoFormProps {
  onClose: () => void;
  people?: {
    id: string;
    name: string;
    items: { id: string; quantity: number }[];
  }[];
  sharedOrderItems?: {
    itemId: string;
    quantity: number;
    personIds: string[];
  }[];
}

const PedidoForm: React.FC<PedidoFormProps> = ({
  onClose,
  people,
  sharedOrderItems,
}) => {
  const { menu } = useMenu();
  const { user, addPoints } = useAuth();

  const [items, setItems] = useState<
    { id: string; quantity: number; assignedTo: string }[]
  >([]);
  const [peopleOrder, setPeopleOrder] = useState<
    { id: string; name: string }[]
  >([]);
  const [sede, setSede] = useState("");
  const [deliveryFee, setDeliveryFee] = useState(0);
  const [deliveryIncluded, setDeliveryIncluded] = useState(true);
  const [paymentMethod, setPaymentMethod] = useState("contraentrega");

  useEffect(() => {
    if (people) {
      setPeopleOrder(
        people.map((person) => ({ id: person.id, name: person.name }))
      );
      // Flatten person items and assign person name
      const personItems = people.flatMap(person =>
        person.items.map(item => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        }))
      );
      setItems(personItems);
    }
  }, [people]);


  useEffect(() => {
    if (sharedOrderItems) {
      // Flatten shared items and assign 'Compartido' as assignedTo
      const sharedItemsForDisplay = sharedOrderItems.flatMap(sharedItem =>
        Array(sharedItem.quantity).fill(null).map(() => ({
          id: sharedItem.itemId,
          quantity: 1,
          assignedTo: 'Compartido'
        }))
      );
      setItems(prevItems => [...prevItems, ...sharedItemsForDisplay]);
    }
  }, [sharedOrderItems]);


  // Simulación de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ["Sede Norte", "Sede Sur", "Sede Centro"];

  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0]);
    }
  }, [sedesDisponibles]);

  const calculateTotal = () => {
    let total = 0;
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id);
      if (menuItem) {
        total += menuItem.price * item.quantity;
      }
    });
    return total + deliveryFee;
  };


  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();
    if (!user) return;

    try {
      const total = calculateTotal();
      const orderId = uuidv4();
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: "pendiente",
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              itemId: si.itemId,
              quantity: si.quantity, // Quantity here represents how many of shared items are in total
              personIds: si.personIds,
            }))
          : [],
      };

      await addDoc(collection(db, "pedidos"), orderData);
      handlePaymentSuccess();
    } catch (error) {
      console.error("Error al agregar el pedido:", error);
    }
  };

  const handlePaymentSuccess = async () => {
    await addPoints();
    alert("Pedido realizado con éxito y puntos sumados.");
    onClose();
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label
          htmlFor="sede"
          className="block text-sm font-medium text-gray-700"
        >
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label
          htmlFor="deliveryFee"
          className="block text-sm font-medium text-gray-700"
        >
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label
            htmlFor="deliveryIncluded"
            className="font-medium text-gray-700"
          >
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label
          htmlFor="paymentMethod"
          className="block text-sm font-medium text-gray-700"
        >
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200" // Added transition
        >
          Realizar Pedido
        </button>
      </div>
    </form>
  );
};

export default PedidoForm;
/* Fin src\components\pedidos\PedidoForm.tsx */

/* Inicio src\components\pedidos\PedidoItem.tsx */
import React from "react";

const PedidoItem: React.FC = () => {
    return (
        <div>Pedido Item</div>
    )
}

export default PedidoItem;
/* Fin src\components\pedidos\PedidoItem.tsx */

/* Inicio src\components\pedidos\PedidoList.tsx */
// src/components/pedidos/PedidoList.tsx
import {
  Box,
  Button,
  CircularProgress,
  Dialog,
  DialogTitle,

  FormControl,
  Grid,
  InputLabel,
  List,
  ListItem,
  ListItemText,
  MenuItem,
  Paper,
  Select,
  Typography,
} from "@mui/material";
import { SelectChangeEvent } from "@mui/material/Select";
import { DataGrid, GridColDef } from '@mui/x-data-grid';
import {
  collection,
  doc,
  onSnapshot,
  query,
  updateDoc,
  where,
} from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { COLLECTIONS } from "../../utils/constants";
import { db } from "../../utils/firebase";

interface Pedido {
  id: string;
  userId: string;
  items: { id: string; quantity: number; assignedTo: string }[];
  people: { id: string; name: string }[];
  sede: string;
  status: string;
  total: number;
  deliveryFee: number;
  deliveryIncluded: boolean;
  paymentMethod: string;
  orderDate: Date;
  orderId: string;
}

const PedidoList: React.FC = () => {
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const { user, userRole } = useAuth();
  const [selectedStatus, setSelectedStatus] = useState("pendiente");
  const [openDetails, setOpenDetails] = useState(false);
  const [selectedPedidoDetails, setSelectedPedidoDetails] = useState<Pedido | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!user) return;

    setLoading(true);
    let pedidosQuery = query(collection(db, COLLECTIONS.PEDIDOS));

    if (userRole === "client") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("userId", "==", user.uid)
      );
    } else if (userRole === "admin" || userRole === "encargado") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("status", "==", selectedStatus)
      );
    }

    const unsubscribe = onSnapshot(pedidosQuery, (snapshot) => {
      const pedidosData = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          userId: data.userId,
          items: data.items || [],
          people: data.people || [],
          sede: data.sede,
          status: data.status,
          total: data.total,
          deliveryFee: data.deliveryFee,
          deliveryIncluded: data.deliveryIncluded,
          paymentMethod: data.paymentMethod,
          orderDate: data.orderDate ? (data.orderDate).toDate() : new Date(),
          orderId: data.orderId,
        } as Pedido;
      });
      setPedidos(pedidosData);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [user, userRole, selectedStatus]);

  const handleStatusChange = (event: SelectChangeEvent<string>) => {
    setSelectedStatus(event.target.value);
  };

  const handleStatusUpdate = async (orderId: string, newStatus: string) => {
    try {
      await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), {
        status: newStatus,
      });
    } catch (error) {
      console.error(
        "Error actualizando el estado del pedido:",
        (error as { message: string }).message
      );
    }
  };

  const handleOpenDetails = (order: Pedido) => {
    setSelectedPedidoDetails(order);
    setOpenDetails(true);
  };

  const handleCloseDetails = () => {
    setSelectedPedidoDetails(null);
    setOpenDetails(false);
  };

  // Definir columnas para DataGrid
  const columns: GridColDef[] = [
    { field: 'id', headerName: 'ID del Pedido', width: 150 },
    { field: 'sede', headerName: 'Sede', width: 120 },
    { field: 'status', headerName: 'Estado', width: 120 },
    { field: 'total', headerName: 'Total ($)', width: 100 },
    { field: 'deliveryFee', headerName: 'Envío ($)', width: 100 },
    { field: 'paymentMethod', headerName: 'Pago', width: 150 },
    { 
      field: 'orderDate', 
      headerName: 'Fecha', 
      width: 180, 
      valueFormatter: (params) => new Date((params as {value: string}).value).toLocaleString(),
    },
    {
      field: 'actions',
      headerName: 'Acciones',
      width: 200,
      sortable: false,
      renderCell: (params) => {
        const order: Pedido = params.row;
        return (
          <Box>
            <Button
              variant="outlined"
              size="small"
              onClick={() => handleOpenDetails(order)}
              sx={{ mr: 1 }}
            >
              Ver Detalles
            </Button>
            {(userRole === "admin" || userRole === "encargado") && (
              <>
                <Button
                  variant="contained"
                  size="small"
                  color="primary"
                  onClick={() => handleStatusUpdate(order.id, "atendiendo")}
                  disabled={order.status === "atendiendo"}
                  sx={{ mr: 1 }}
                >
                  Atender
                </Button>
                <Button
                  variant="contained"
                  size="small"
                  color="warning"
                  onClick={() => handleStatusUpdate(order.id, "preparando")}
                  disabled={order.status === "preparando"}
                  sx={{ mr: 1 }}
                >
                  Preparar
                </Button>
                <Button
                  variant="contained"
                  size="small"
                  color="success"
                  onClick={() => handleStatusUpdate(order.id, "enviado")}
                  disabled={order.status === "enviado"}
                >
                  Enviar
                </Button>
              </>
            )}
          </Box>
        );
      },
    },
  ];

  return (
    <Box>
      <Typography variant="h5" component="h2" gutterBottom>
        Tus Pedidos
      </Typography>
      {userRole !== "client" && (
        <FormControl fullWidth sx={{ marginBottom: 2 }}>
          <InputLabel>Filtrar por estado</InputLabel>
          <Select
            value={selectedStatus}
            label="Filtrar por estado"
            onChange={handleStatusChange}
          >
            <MenuItem value="pendiente">Pendiente</MenuItem>
            <MenuItem value="atendiendo">Atendiendo</MenuItem>
            <MenuItem value="preparando">Preparando</MenuItem>
            <MenuItem value="enviado">Enviado</MenuItem>
          </Select>
        </FormControl>
      )}
      {loading ? (
        <CircularProgress />
      ) : (
        <Paper sx={{ height: 600, width: '100%' }}>
          <DataGrid
            rows={pedidos}
            columns={columns}
            pageSize={10} 
            rowsPerPageOptions={[10, 25, 50]}
            disableSelectionOnClick
            getRowId={(row) => row.id}
          />
        </Paper>
      )}
      <Dialog open={openDetails} onClose={handleCloseDetails} fullWidth maxWidth="md">
        <DialogTitle>Detalle del Pedido</DialogTitle>
        {selectedPedidoDetails && (
          <Box sx={{ padding: 2 }}>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <Typography variant="body1">
                  <strong>ID del Pedido:</strong> {selectedPedidoDetails.id}
                </Typography>
                <Typography variant="body1">
                  <strong>Estado:</strong> {selectedPedidoDetails.status}
                </Typography>
                <Typography variant="body1">
                  <strong>Total:</strong> ${selectedPedidoDetails.total}
                </Typography>
                <Typography variant="body1">
                  <strong>Costo de Envío:</strong> ${selectedPedidoDetails.deliveryFee}
                </Typography>
                <Typography variant="body1">
                  <strong>Método de Pago:</strong> {selectedPedidoDetails.paymentMethod}
                </Typography>
                <Typography variant="body1">
                  <strong>Domicilio Incluido:</strong> {selectedPedidoDetails.deliveryIncluded ? "Sí" : "No"}
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6}>
                <Typography variant="body1">
                  <strong>Sede:</strong> {selectedPedidoDetails.sede}
                </Typography>
                <Typography variant="body1">
                  <strong>Personas:</strong> {selectedPedidoDetails.people.map((p) => p.name).join(", ")}
                </Typography>
                <Typography variant="body1">
                  <strong>Fecha del Pedido:</strong> {selectedPedidoDetails.orderDate.toLocaleString()}
                </Typography>
              </Grid>
            </Grid>
            <Typography variant="h6" sx={{ mt: 3 }}>
              Items:
            </Typography>
            <List>
              {selectedPedidoDetails.items.map((item, index) => (
                <ListItem key={index}>
                  <ListItemText
                    primary={`- ${item.id} (Cantidad: ${item.quantity})`}
                    secondary={`Asignado a: ${item.assignedTo || "N/A"}`}
                  />
                </ListItem>
              ))}
            </List>
          </Box>
        )}
      </Dialog>
    </Box>
  );
};

export default PedidoList;

/* Fin src\components\pedidos\PedidoList.tsx */

/* Inicio src\components\ui\Button.tsx */
/* src\components\ui\Button.tsx */
import React, { ButtonHTMLAttributes, ReactNode } from "react";

type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {
  children: ReactNode;
  variant?: "primary" | "secondary" | "text" | "outlined" | "contained"; // Define variants if needed
  color?:
    | "primary"
    | "secondary"
    | "error"
    | "warning"
    | "info"
    | "success"
    | "inherit"; // Define colors if needed
};

const Button: React.FC<ButtonProps> = ({
  children,
  variant = "contained", // Default variant
  color = "primary", // Default color
  className,
  ...props
}) => {
  let buttonClasses =
    "font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50";

  // Color and variant styles (customize as needed)
  if (variant === "contained") {
    if (color === "primary") {
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    } else if (color === "secondary") {
      buttonClasses += " bg-red-500 hover:bg-red-700 text-white";
    } else if (color === "error") {
      buttonClasses += " bg-red-600 hover:bg-red-800 text-white";
    } else if (color === "warning") {
      buttonClasses += " bg-yellow-500 hover:bg-yellow-700 text-gray-800";
    } else if (color === "success") {
      buttonClasses += " bg-green-500 hover:bg-green-700 text-white";
    } else {
      // Default primary
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    }
  } else if (variant === "outlined") {
    if (color === "primary") {
      buttonClasses +=
        " border border-blue-500 hover:bg-blue-100 text-blue-700";
    } else if (color === "secondary") {
      buttonClasses += " border border-red-500 hover:bg-red-100 text-red-700";
    } else if (color === "error") {
      buttonClasses += " border border-red-600 hover:bg-red-100 text-red-800";
    } else if (color === "warning") {
      buttonClasses +=
        " border border-yellow-500 hover:bg-yellow-100 text-yellow-700";
    } else if (color === "success") {
      buttonClasses +=
        " border border-green-500 hover:bg-green-100 text-green-700";
    } else {
      // Default primary
      buttonClasses +=
        " border border-blue-500 hover:bg-blue-100 text-blue-700";
    }
  } else {
    // Default contained
    if (color === "primary") {
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    } else {
      // Default primary
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    }
  }

  return (
    <button {...props} className={`${buttonClasses} ${className || ""}`}>
      {children}
    </button>
  );
};

export default Button;
/* Fin src\components\ui\Button.tsx */

/* Inicio src\components\ui\ErrorBoundry.tsx */
// src/components/ui/ErrorBoundry.tsx
import { Alert } from "@mui/material";
import React, { Component, ErrorInfo, ReactNode } from "react";

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Error caught by error boundary", error, errorInfo);
    this.setState({ errorInfo });
  }

  render() {
    if (this.state.hasError) {
      return (
        <Alert severity="error" className="mt-4 rounded-md shadow-sm">
          {" "}
          {/* Added Tailwind classes to Alert */}
          Algo salió mal
        </Alert>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

/* Fin src\components\ui\ErrorBoundry.tsx */

/* Inicio src\components\ui\ListItem.tsx */
/* src\components\ui\ListItem.tsx */
import React, { forwardRef, ReactNode } from "react";
import { Link } from "react-router-dom";

interface ListItemProps extends React.LiHTMLAttributes<HTMLLIElement> {
  children: ReactNode;
  onClick?: () => void;
  to?: string;
  href?: string;
  button?: boolean;
}

const ListItem = forwardRef<HTMLLIElement, ListItemProps>(
  ({ children, onClick, to, href, button, className, ...props }, ref) => {
    const handleClick = () => {
      if (onClick) {
        onClick();
      }
    };

    const commonClasses = `block py-2 px-4 text-sm hover:bg-gray-100 text-gray-700`;
    const buttonClasses = button
      ? `${commonClasses} cursor-pointer`
      : commonClasses;

    const listItemContent = (
      <li
        ref={ref}
        onClick={handleClick}
        className={`${buttonClasses} ${className || ""}`}
        {...props}
      >
        {children}
      </li>
    );

    if (to) {
      return (
        <li ref={ref} className={className} {...props}>
          <Link to={to} className={`${commonClasses} block`}>
            {children}
          </Link>
        </li>
      );
    }

    if (href) {
      return (
        <li ref={ref} className={className} {...props}>
          <a href={href} className={`${commonClasses} block`}>
            {children}
          </a>
        </li>
      );
    }

    return listItemContent;
  }
);

ListItem.displayName = "ListItem";

export default ListItem;

/* Fin src\components\ui\ListItem.tsx */

/* Inicio src\components\ui\TextField.tsx */
/* src\components\ui\TextField.tsx */
import React, { InputHTMLAttributes } from "react";

type TextFieldProps = InputHTMLAttributes<HTMLInputElement> & {
  label?: string;
};

const TextField: React.FC<TextFieldProps> = ({
  label,
  className,
  ...props
}) => {
  return (
    <div>
      {label && (
        <label
          htmlFor={props.id}
          className="block text-sm font-medium text-gray-700"
        >
          {label}
        </label>
      )}
      <input
        {...props}
        className={`mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${
          className || ""
        }`}
      />
    </div>
  );
};

export default TextField;

/* Fin src\components\ui\TextField.tsx */

/* Inicio src\context\AppContext.tsx */
import { CircularProgress } from "@mui/material";
import { collection, onSnapshot } from "firebase/firestore";
import React, {
  createContext,
  ReactNode,
  useEffect,
  useState,
} from "react";
import ErrorBoundary from "../components/ui/ErrorBoundry";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export interface MenuItem {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
  recommendation: string;
  observations: string;
}

export interface AppContextProps {
  menu: MenuItem[];
  loading: boolean;
}

export const AppContext = createContext<AppContextProps>({
  menu: [],
  loading: true,
});

interface AppProviderProps {
  children: ReactNode;
}

export const AppProvider: React.FC<AppProviderProps> = ({ children }) => {
  const [menu, setMenu] = useState<MenuItem[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let unsubscribe: () => void;
    try {
      const menuCollection = collection(db, COLLECTIONS.MENU);
      unsubscribe = onSnapshot(menuCollection, (snapshot) => {
        const menuData = snapshot.docs.map(
          (doc) => ({ id: doc.id, ...doc.data() } as MenuItem)
        );
        setMenu(menuData);
        setLoading(false);
      });
    } catch (error) {
      console.error(error);
      setLoading(false);
    }
    return () => unsubscribe && unsubscribe();
  }, []);

  return (
    <AppContext.Provider value={{ menu, loading }}>
      <ErrorBoundary>{loading ? <CircularProgress /> : children}</ErrorBoundary>
    </AppContext.Provider>
  );
};

/* Fin src\context\AppContext.tsx */

/* Inicio src\context\AuthContext.tsx */
// src/context/AuthContext.tsx

import {
  User,
  createUserWithEmailAndPassword,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth";
import { doc, getDoc, setDoc, updateDoc } from "firebase/firestore";
import React, { ReactNode, createContext, useEffect, useState } from "react";
import { auth, db } from "../utils/firebase";

export interface AuthContextProps {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  userRole: string | null;
  points: number;
  addPoints: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextProps>({
  user: null,
  loading: false,
  login: async () => {},
  register: async () => {},
  logout: async () => {},
  userRole: null,
  points: 0,
  addPoints: async () => {},
});

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [points, setPoints] = useState<number>(0);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setUser(currentUser);
      if (currentUser) {
        const userDoc = await getDoc(doc(db, "users", currentUser.uid));
        if (userDoc.exists()) {
          setUserRole(userDoc.data().role);
          setPoints(userDoc.data().points || 0);
        } else {
          // Crear documento de usuario si no existe
          await setDoc(doc(db, "users", currentUser.uid), {
            role: "client",
            points: 0,
            email: currentUser.email,
          });
          setUserRole("client");
          setPoints(0);
        }
      } else {
        setUserRole(null);
        setPoints(0);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;

      const userDoc = await getDoc(doc(db, "users", user.uid));
      if (userDoc.exists()) {
        setUserRole(userDoc.data().role);
        setPoints(userDoc.data().points || 0);
      } else {
        setUserRole("client");
        setPoints(0);
      }
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  const register = async (email: string, password: string) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;
      console.log("Usuario registrado:", user.uid);

      await setDoc(doc(db, "users", user.uid), {
        role: "client",
        points: 0,
        email: email,
      });
      console.log("Documento de usuario creado en Firestore");

      setUserRole("client");
      setPoints(0);
    } catch (error) {
      console.error(
        "Error en el registro:",
        (error as { message: string }).message
      );
      throw new Error((error as { message: string }).message);
    }
  };

  const addPoints = async () => {
    if (!user) return;

    try {
      await updateDoc(doc(db, "users", user.uid), {
        points: points + 10,
      });
      setPoints((prevPoints) => prevPoints + 10);
    } catch (error) {
      console.error("Error al sumar puntos", error);
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      setUserRole(null);
      setPoints(0);
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        login,
        register,
        logout,
        userRole,
        points,
        addPoints,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

/* Fin src\context\AuthContext.tsx */

/* Inicio src\hooks\useAuth.ts */
import { useContext } from 'react';
import { AuthContext, AuthContextProps } from '../context/AuthContext';

export const useAuth = (): AuthContextProps => {
    const context = useContext<AuthContextProps>(AuthContext);
    if (!context) {
        throw new Error("useAuth must be used within a AuthProvider")
    }
    return context;
};
/* Fin src\hooks\useAuth.ts */

/* Inicio src\hooks\useMenu.ts */
import { useContext } from 'react';
import { AppContext, AppContextProps } from '../context/AppContext';

export const useMenu = (): AppContextProps => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error("useMenu must be used within a AppProvider")
  }
  return context;
};
/* Fin src\hooks\useMenu.ts */

/* Inicio src\main.tsx */
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

/* Fin src\main.tsx */

/* Inicio src\pages\Dashboard.tsx */
/* src/pages/Dashboard.tsx */
import {
  BarElement,
  CategoryScale,
  Chart as ChartJS,
  Legend,
  LinearScale,
  Title,
  Tooltip,
} from "chart.js";
import {
  collection,
  doc,
  onSnapshot,
  setDoc,
  updateDoc, // Import updateDoc here
} from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { Bar } from "react-chartjs-2";
import { v4 as uuidv4 } from "uuid"; // Import UUID
import { useAuth } from "../hooks/useAuth";
import { db } from "../utils/firebase";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

/** Interfaz para pedido */
interface Pedido {
  id: string;
  status: string;
  total: number;
  orderDate: Date;
}

interface Task {
  id: string;
  taskId: string;
  taskName: string;
  taskType: "daily" | "periodic";
  dueDate?: Date | null;
  dailyCompletions: { [date: string]: boolean }; // Track completion per day
  completionDate?: Date | null;
  dayOfWeek?: number;
  subtasks?: string[];
}

// Estados que manejaremos en la app
const ALL_STATUSES = [
  "pendiente",
  "atendiendo",
  "preparando",
  "enviado",
  "entregado",
];

const defaultDailyTasks = [
  {
    taskName: "Hacer el aseo del restaurante",
    subtasks: [
      "Barrer y trapear pisos",
      "Limpiar mesas y sillas",
      "Vaciar papeleras",
      "Limpiar baños",
    ],
  },
  { taskName: "Lavar la freidora", subtasks: [] },
  {
    taskName: "Revisar inventario y hacer pedidos si es necesario",
    subtasks: [
      "Verificar niveles de stock",
      "Listar productos a pedir",
      "Enviar pedido a proveedores",
      "Recibir y organizar pedido",
    ],
  },
];

const periodicTasksConfig = [
  { dayOfMonth: 25, taskName: "Pagar arriendo", taskType: "periodic" },
  { dayOfMonth: 25, taskName: "Pagar factura de luz", taskType: "periodic" },
  { dayOfMonth: 25, taskName: "Pagar factura de agua", taskType: "periodic" },
  // Add more periodic tasks as needed
];

const Dashboard: React.FC = () => {
  const { user, userRole } = useAuth();
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [loadingTasks, setLoadingTasks] = useState<boolean>(true);

  // Para filtrar por un estado específico o "todos"
  const [selectedStatus, setSelectedStatus] = useState<string | "todos">(
    "todos"
  );

  // Métricas generales
  const [todaySales, setTodaySales] = useState<number>(0);
  const [monthSales, setMonthSales] = useState<number>(0);
  const [pendingOrdersCount, setPendingOrdersCount] = useState<number>(0);
  const [totalOrders, setTotalOrders] = useState<number>(0);

  // Gráficos (últimos 7 días + últimos 6 meses)
  const [dailyLabels, setDailyLabels] = useState<string[]>([]);
  const [dailyData, setDailyData] = useState<number[]>([]);
  const [monthlyLabels, setMonthlyLabels] = useState<string[]>([]);
  const [monthlyData, setMonthlyData] = useState<number[]>([]);

  useEffect(() => {
    // Escuchamos la colección 'pedidos'
    const unsubscribe = onSnapshot(collection(db, "pedidos"), (snapshot) => {
      const pedidosData: Pedido[] = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          status: data.status,
          total: data.total,
          orderDate: data.orderDate?.toDate
            ? data.orderDate.toDate()
            : new Date(), // fallback
        } as Pedido;
      });
      setPedidos(pedidosData);
      setLoading(false);
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    const today = new Date();
    const todayDateString = today.toISOString().split("T")[0];

    const tasksCollection = collection(db, "tasks");
    const unsubscribeTasks = onSnapshot(tasksCollection, (snapshot) => {
      let fetchedTasks: Task[] = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          taskId: data.taskId,
          taskName: data.taskName,
          taskType: data.taskType,
          dueDate: data.dueDate ? data.dueDate.toDate() : null,
          dailyCompletions: data.dailyCompletions || {}, // Initialize dailyCompletions
          completionDate: data.completionDate
            ? data.completionDate.toDate()
            : null,
          subtasks: data.subtasks || [],
        } as Task;
      });

      // Filter for today's daily tasks and periodic tasks due today
      fetchedTasks = fetchedTasks.filter((task) => {
        if (task.taskType === "daily") {
          return true; // Show all daily tasks
        } else if (task.taskType === "periodic" && task.dueDate) {
          const taskDueDate = task.dueDate;
          return taskDueDate.toISOString().split("T")[0] === todayDateString;
        }
        return false;
      });
      setTasks(fetchedTasks);
      setLoadingTasks(false);

      if (fetchedTasks.length === 0) {
        // Initialize daily tasks if none exist for today
        defaultDailyTasks.forEach(async (defaultTask) => {
          await addDefaultTask(
            defaultTask.taskName,
            "daily",
            defaultTask.subtasks
          );
        });
        // Initialize periodic tasks if today is the day for them and they don't exist
        periodicTasksConfig.forEach(async (periodicTaskConfig) => {
          if (today.getDate() === periodicTaskConfig.dayOfMonth) {
            const taskExists = fetchedTasks.some(
              (task) =>
                task.taskType === "periodic" &&
                task.taskName === periodicTaskConfig.taskName &&
                task.dueDate &&
                task.dueDate.getDate() === today.getDate() &&
                task.dueDate.getMonth() === today.getMonth() &&
                task.dueDate.getFullYear() === today.getFullYear()
            );
            if (!taskExists) {
              const dueDate = new Date(
                today.getFullYear(),
                today.getMonth(),
                periodicTaskConfig.dayOfMonth
              );
              await addDefaultTask(
                periodicTaskConfig.taskName,
                "periodic",
                [],
                dueDate
              );
            }
          }
        });
      }
    });
    return () => unsubscribeTasks();
  }, []);

  const addDefaultTask = async (
    taskName: string,
    taskType: "daily" | "periodic",
    subtasks: string[] = [],
    dueDate: Date | null = null
  ) => {
    try {
      await setDoc(doc(collection(db, "tasks"), uuidv4()), {
        // use uuid as doc id
        taskId: uuidv4(), // add taskId
        taskName: taskName,
        taskType: taskType,
        completed: false,
        dailyCompletions: {}, // Initialize dailyCompletions to empty object
        subtasks: subtasks,
        dueDate: dueDate || null,
      });
    } catch (error) {
      console.error("Error adding default task:", error);
    }
  };

  // Recalcula estadísticas cuando cambien los pedidos o el filtro de estado
  useEffect(() => {
    if (!pedidos.length) {
      // Si no hay pedidos, limpiamos
      setTodaySales(0);
      setMonthSales(0);
      setPendingOrdersCount(0);
      setTotalOrders(0);
      setDailyLabels([]);
      setDailyData([]);
      setMonthlyLabels([]);
      setMonthlyData([]);
      return;
    }

    const filtered =
      selectedStatus === "todos"
        ? pedidos
        : pedidos.filter((p) => p.status === selectedStatus);

    // ---------- Estadísticas simples ----------
    const now = new Date();
    const today = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate()
    ).getTime();

    let sumToday = 0;
    let sumMonth = 0;
    let pendingCount = 0;
    const totalCount = filtered.length;

    filtered.forEach((pedido) => {
      // Fecha sin hora del pedido
      const pedidoDate = new Date(
        pedido.orderDate.getFullYear(),
        pedido.orderDate.getMonth(),
        pedido.orderDate.getDate()
      ).getTime();

      // Venta de hoy
      if (pedidoDate === today) {
        sumToday += pedido.total;
      }

      // Venta del mes actual
      const isThisMonth =
        pedido.orderDate.getMonth() === now.getMonth() &&
        pedido.orderDate.getFullYear() === now.getFullYear();
      if (isThisMonth) {
        sumMonth += pedido.total;
      }

      // Pedidos pendientes
      if (pedido.status === "pendiente") {
        pendingCount++;
      }
    });

    setTodaySales(sumToday);
    setMonthSales(sumMonth);
    setPendingOrdersCount(pendingCount);
    setTotalOrders(totalCount);

    // ---------- Gráfico: últimos 7 días ----------
    const last7Dates = Array.from({ length: 7 }).map((_, i) => {
      const d = new Date();
      // "hace (6 - i) días" para que se armen en orden cronológico
      d.setDate(d.getDate() - (6 - i));
      return d;
    });

    const daysLabels: string[] = [];
    const daysData: number[] = [];

    last7Dates.forEach((date) => {
      // Etiqueta: "dd/MM"
      const dayKey = date.toLocaleDateString("es-ES", {
        day: "2-digit",
        month: "2-digit",
      });
      daysLabels.push(dayKey);

      let dayTotal = 0;
      filtered.forEach((pedido) => {
        if (
          pedido.orderDate.getDate() === date.getDate() &&
          pedido.orderDate.getMonth() === date.getMonth() &&
          pedido.orderDate.getFullYear() === date.getFullYear()
        ) {
          dayTotal += pedido.total;
        }
      });
      daysData.push(dayTotal);
    });

    setDailyLabels(daysLabels);
    setDailyData(daysData);

    // ---------- Gráfico: últimos 6 meses ----------
    const last6Months = Array.from({ length: 6 }).map((_, i) => {
      const d = new Date();
      // retrocedemos (5 - i) meses
      d.setMonth(d.getMonth() - (5 - i));
      d.setDate(1);
      return d;
    });

    const monthLabels: string[] = [];
    const monthTotals: number[] = [];

    last6Months.forEach((date) => {
      // Etiqueta "MM/YY"
      const label = date.toLocaleDateString("es-ES", {
        month: "2-digit",
        year: "2-digit",
      });
      monthLabels.push(label);

      let monthTotal = 0;
      filtered.forEach((pedido) => {
        if (
          pedido.orderDate.getFullYear() === date.getFullYear() &&
          pedido.orderDate.getMonth() === date.getMonth()
        ) {
          monthTotal += pedido.total;
        }
      });
      monthTotals.push(monthTotal);
    });

    setMonthlyLabels(monthLabels);
    setMonthlyData(monthTotals);
  }, [pedidos, selectedStatus]);

  // Opciones genéricas para los gráficos
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false as const,
      },
      tooltip: {
        backgroundColor: "#1e293b", // gris oscuro
        titleColor: "#fff",
        bodyColor: "#fff",
      },
    },
  };

  // Dataset para gráfico diario
  const dailyChartData = {
    labels: dailyLabels,
    datasets: [
      {
        label: "Ventas diarias",
        data: dailyData,
        backgroundColor: "#4F46E5", // Indigo-600
        borderRadius: 4,
      },
    ],
  };

  // Dataset para gráfico mensual
  const monthlyChartData = {
    labels: monthlyLabels,
    datasets: [
      {
        label: "Ventas mensuales",
        data: monthlyData,
        backgroundColor: "#22C55E", // Green-500
        borderRadius: 4,
      },
    ],
  };

  // Para saber si debemos mostrar la parte de admin/encargado
  const showAdminStats = userRole === "admin" || userRole === "encargado";
  const showChecklist = userRole === "admin" || userRole === "encargado";

  const handleTaskCompletionChange = async (
    taskId: string,
    completed: boolean
  ) => {
    const todayDate = new Date().toISOString().split("T")[0]; // YYYY-MM-DD
    try {
      const taskDocRef = doc(db, "tasks", taskId);
      await updateDoc(taskDocRef, {
        [`dailyCompletions.${todayDate}`]: completed, // Update completion for today
        completionDate: completed ? new Date() : null, // Optionally update completionDate
      });

      setTasks((currentTasks) =>
        currentTasks.map((task) => {
          if (task.id === taskId) {
            return {
              ...task,
              dailyCompletions: {
                ...task.dailyCompletions,
                [todayDate]: completed,
              },
              completionDate: completed ? new Date() : null,
            };
          }
          return task;
        })
      );
    } catch (error) {
      console.error("Error updating task completion:", error);
    }
  };

  const last7Days = Array.from({ length: 7 }, (_, i) => {
    const day = new Date();
    day.setDate(day.getDate() - i);
    return day;
  }).reverse();

  const last7DaysFormatted = last7Days.map(
    (day) => day.toISOString().split("T")[0]
  );

  const taskCompletionData = tasks.map((task) => {
    return {
      taskName: task.taskName,
      completionStatus: last7DaysFormatted.map((date) => {
        return task.dailyCompletions[date] ? "✅" : "❌";
      }),
    };
  });

  if (loading || loadingTasks) {
    return (
      <div className="pt-20 p-4 text-center">
        <p className="text-xl animate-pulse">Cargando Dashboard...</p>
      </div>
    );
  }

  if (!showAdminStats && !showChecklist) {
    return (
      <div className="pt-20 p-4 md:p-6 bg-gray-100 min-h-screen">
        <h1 className="text-3xl font-bold text-gray-900 mb-4 transition-all duration-300 hover:scale-105">
          Dashboard <span className="text-sm ml-2">({user?.email})</span>
        </h1>
        <div className="mb-8">
          <div className="bg-white rounded shadow p-4 text-center">
            <p className="text-gray-600">Total de Pedidos</p>
            <p className="text-2xl font-bold text-indigo-600">{totalOrders}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="pt-20 p-4 md:p-6 bg-gray-100 min-h-screen">
      {/* Título */}
      <h1 className="text-3xl font-bold text-gray-900 mb-4 transition-all duration-300 hover:scale-105">
        Dashboard
        {user?.email && <span className="text-sm ml-2">({user.email})</span>}
      </h1>

      {/* Filtro por estado */}
      <div className="flex flex-wrap items-center mb-6 gap-2">
        <button
          onClick={() => setSelectedStatus("todos")}
          className={`px-4 py-2 rounded-md text-sm font-medium shadow-sm transition transform hover:scale-105
            ${
              selectedStatus === "todos"
                ? "bg-indigo-600 text-white"
                : "bg-white text-gray-800 hover:bg-gray-200"
            }`}
        >
          Todos
        </button>
        {ALL_STATUSES.map((status) => (
          <button
            key={status}
            onClick={() => setSelectedStatus(status)}
            className={`px-4 py-2 rounded-md text-sm font-medium shadow-sm transition transform hover:scale-105
              ${
                selectedStatus === status
                  ? "bg-indigo-600 text-white"
                  : "bg-white text-gray-800 hover:bg-gray-200"
              }`}
          >
            {status.charAt(0).toUpperCase() + status.slice(1)}
          </button>
        ))}
      </div>

      {/* Sección de Tarjetas de estadísticas */}
      {showAdminStats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Total de Pedidos</p>
            <p className="text-2xl font-bold text-indigo-600">{totalOrders}</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Ventas Hoy</p>
            <p className="text-2xl font-bold text-indigo-600">
              ${todaySales.toFixed(2)}
            </p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Ventas del Mes</p>
            <p className="text-2xl font-bold text-indigo-600">
              ${monthSales.toFixed(2)}
            </p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Pedidos Pendientes</p>
            <p className="text-2xl font-bold text-indigo-600">
              {pendingOrdersCount}
            </p>
          </div>
        </div>
      )}

      {/* Gráfico de Ventas Diarias (últimos 7 días) */}
      <div className="bg-white rounded shadow p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4 text-gray-800">
          Ventas diarias (últimos 7 días)
        </h2>
        <div className="h-64">
          <Bar data={dailyChartData} options={chartOptions} />
        </div>
      </div>

      {/* Gráfico de Ventas Mensuales (últimos 6 meses) */}
      <div className="bg-white rounded shadow p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4 text-gray-800">
          Ventas mensuales (últimos 6 meses)
        </h2>
        <div className="h-64">
          <Bar data={monthlyChartData} options={chartOptions} />
        </div>
      </div>

      {/* Daily Checklist Section */}
      {showChecklist && (
        <div className="bg-white rounded shadow p-4 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Checklist Diario de Tareas (Hoy)
          </h2>
          <ul>
            {tasks.map((task) => (
              <li
                key={task.id}
                className="py-2 border-b border-gray-200 last:border-b-0"
              >
                <div className="flex items-center justify-between">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-indigo-600 rounded focus:ring-indigo-500"
                      checked={
                        task.dailyCompletions[
                          new Date().toISOString().split("T")[0]
                        ] === true
                      } // Check against today's completion status
                      onChange={(e) =>
                        handleTaskCompletionChange(task.id, e.target.checked)
                      }
                    />
                    <span className="ml-2 text-gray-700">{task.taskName}</span>
                  </label>
                </div>
                {task.subtasks && task.subtasks.length > 0 && (
                  <ul className="ml-6 mt-1">
                    {task.subtasks.map((subtask, index) => (
                      <li
                        key={index}
                        className="text-sm text-gray-500 list-disc ml-4"
                      >
                        {subtask}
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}

      {showChecklist && (
        <div className="bg-white rounded shadow p-4 mb-6 overflow-x-auto">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Estado de Tareas Semanal
          </h2>
          <div className="overflow-x-auto">
            <table className="min-w-full table-fixed border-collapse border border-gray-200">
              <thead>
                <tr>
                  <th className="border border-gray-200 px-4 py-2 text-left">
                    Tarea
                  </th>
                  {last7Days.map((day) => (
                    <th
                      key={day.toISOString().split("T")[0]}
                      className="border border-gray-200 px-4 py-2 text-center"
                    >
                      {day.toLocaleDateString("es-ES", { weekday: "short" })}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {taskCompletionData.map((taskData) => (
                  <tr key={taskData.taskName}>
                    <td className="border border-gray-200 px-4 py-2">
                      {taskData.taskName}
                    </td>
                    {taskData.completionStatus.map((status, index) => (
                      <td
                        key={`${taskData.taskName}-${last7DaysFormatted[index]}`}
                        className="border border-gray-200 px-4 py-2 text-center"
                      >
                        {status}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Aquí podrías agregar más secciones o gráficos */}
    </div>
  );
};

export default Dashboard;

/* Fin src\pages\Dashboard.tsx */

/* Inicio src\pages\GestionMenu.tsx */
import { Alert, Button, Container, Snackbar } from "@mui/material";
import {
  addDoc,
  collection,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore";
import React, { useState } from "react";
import MenuList from "../components/menu/MenuList";
import MenuModal from "../components/menu/MenuModal";
import { MenuItem } from "../context/AppContext";
import { useMenu } from "../hooks/useMenu";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

const GestionMenu: React.FC = () => {
  const { menu, loading } = useMenu();
  const [openModal, setOpenModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState<MenuItem | null>(null);
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: "success" | "error";
  }>({ open: false, message: "", severity: "success" });

  if (loading) {
    return <div>Cargando...</div>;
  }

  const handleOpenModal = () => {
    setOpenModal(true);
    setSelectedItem(null);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
    setSelectedItem(null);
  };

  const handleEdit = (item: MenuItem) => {
    setSelectedItem(item);
    setOpenModal(true);
  };

  const handleDelete = async (item: MenuItem) => {
    if (!window.confirm(`¿Estás seguro de eliminar el item "${item.name}"?`))
      return;
    try {
      await deleteDoc(doc(db, COLLECTIONS.MENU, item.id));
      setSnackbar({
        open: true,
        message: "Item eliminado exitosamente.",
        severity: "success",
      });
    } catch (error) {
      console.error(error);
      setSnackbar({
        open: true,
        message: "Error al eliminar el item.",
        severity: "error",
      });
    }
  };

  const handleSubmit = async (values: Partial<MenuItem>) => {
    try {
      if (selectedItem) {
        await updateDoc(doc(db, COLLECTIONS.MENU, selectedItem.id), values);
        setSnackbar({
          open: true,
          message: "Item actualizado exitosamente.",
          severity: "success",
        });
      } else {
        await addDoc(collection(db, COLLECTIONS.MENU), values);
        setSnackbar({
          open: true,
          message: "Item agregado exitosamente.",
          severity: "success",
        });
      }
      handleCloseModal();
    } catch (error) {
      console.error(error);
      setSnackbar({
        open: true,
        message: "Error al guardar el item.",
        severity: "error",
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Button
        variant="contained"
        color="primary"
        onClick={handleOpenModal}
        sx={{ mb: 2 }}
      >
        Agregar Item
      </Button>
      <MenuList menu={menu} onEdit={handleEdit} onDelete={handleDelete} />
      <MenuModal
        open={openModal}
        onClose={handleCloseModal} // Pass handleCloseModal as onClose
        initialValues={selectedItem || undefined}
        onSubmit={handleSubmit}
      />
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default GestionMenu;

/* Fin src\pages\GestionMenu.tsx */

/* Inicio src\pages\GestionUsuarios.tsx */
// src/pages/GestionUsuarios.tsx
import {
    Button,
    Container,
    List,
    ListItem,
    ListItemText,
    Typography,
} from "@mui/material";
import { collection, doc, getDocs, updateDoc } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { db } from "../utils/firebase";

interface Usuario {
  uid: string;
  email: string;
  role: string;
  points: number;
}

const GestionUsuarios: React.FC = () => {
  const [usuarios, setUsuarios] = useState<Usuario[]>([]);

  useEffect(() => {
    const fetchUsuarios = async () => {
      const usuariosCol = collection(db, "users");
      const usuariosSnapshot = await getDocs(usuariosCol);
      const usuariosList = usuariosSnapshot.docs.map((doc) => ({
        uid: doc.id,
        email: doc.data().email || "No email",
        role: doc.data().role,
        points: doc.data().points || 0,
      }));
      setUsuarios(usuariosList);
    };

    fetchUsuarios();
  }, []);

  const cambiarRol = async (uid: string, nuevoRol: string) => {
    const usuarioRef = doc(db, "users", uid);
    await updateDoc(usuarioRef, { role: nuevoRol });
    setUsuarios((prevUsuarios) =>
      prevUsuarios.map((usuario) =>
        usuario.uid === uid ? { ...usuario, role: nuevoRol } : usuario
      )
    );
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Gestión de Usuarios
      </Typography>
      <List>
        {usuarios.map((usuario) => (
          <ListItem key={usuario.uid}>
            <ListItemText
              primary={`Correo: ${usuario.email}`}
              secondary={`Rol: ${usuario.role} | Puntos: ${usuario.points}`}
            />
            <Button
              variant="contained"
              color="secondary"
              onClick={() =>
                cambiarRol(
                  usuario.uid,
                  usuario.role === "admin" ? "client" : "admin"
                )
              }
            >
              Cambiar a {usuario.role === "admin" ? "Cliente" : "Administrador"}
            </Button>
          </ListItem>
        ))}
      </List>
    </Container>
  );
};

export default GestionUsuarios;

/* Fin src\pages\GestionUsuarios.tsx */

/* Inicio src\pages\Login.tsx */
// src/pages/Login.tsx
import React, { useState } from "react";
import LoginForm from "../components/auth/LoginForm";
import RegisterForm from "../components/auth/RegisterForm";
import PublicLayout from "../components/layout/PublicLayout";

const Login: React.FC = () => {
  const [tabValue, setTabValue] = useState(0);

  const handleChange = (newValue: number) => {
    // Simplificamos el handler
    setTabValue(newValue);
  };

  return (
    <PublicLayout>
      <div className="max-w-md w-full">
        {" "}
        {/* Contenedor principal con Tailwind */}
        <div className="bg-white shadow-md rounded-lg p-6">
          {" "}
          {/* Reemplaza Paper con div y clases */}
          <div className="flex justify-center border-b border-gray-200 mb-4">
            {" "}
            {/* Reemplaza Tabs con divs */}
            <button
              className={`py-2 px-4 -mb-px border-b-2 ${
                tabValue === 0
                  ? "border-blue-500 text-blue-500"
                  : "border-transparent hover:border-gray-300"
              } font-semibold`}
              onClick={() => handleChange(0)}
            >
              Iniciar Sesión
            </button>
            <button
              className={`py-2 px-4 -mb-px border-b-2 ${
                tabValue === 1
                  ? "border-blue-500 text-blue-500"
                  : "border-transparent hover:border-gray-300"
              } font-semibold`}
              onClick={() => handleChange(1)}
            >
              Registrarse
            </button>
          </div>
          {tabValue === 0 && <LoginForm />}
          {tabValue === 1 && <RegisterForm />}
        </div>
      </div>
    </PublicLayout>
  );
};

export default Login;

/* Fin src\pages\Login.tsx */

/* Inicio src\pages\MenuPage.tsx */
/* src/pages/MenuPage.tsx */
import { addDoc, collection } from "firebase/firestore";
import React, { useState } from "react";
import { v4 as uuidv4 } from "uuid";
import PedidoForm from "../components/pedidos/PedidoForm";
import { MenuItem } from "../context/AppContext";
import { useMenu } from "../hooks/useMenu";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

interface Person {
  id: string;
  name: string;
  items: { id: string; quantity: number }[];
}

const MenuPage: React.FC = () => {
  const { menu } = useMenu();
  const [numPeople, setNumPeople] = useState<number>(1);
  const [people, setPeople] = useState<Person[]>([]);
  const [showMenu, setShowMenu] = useState(false);
  const [, setOpenPedidoModal] = useState(false);
  const [loadingAddSampleData, setLoadingAddSampleData] = useState(false); // Estado para el botón de carga de ejemplo
  const [message, setMessage] = useState<string | null>(null); // Estado para mensajes de feedback

  const handleNumPeopleChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setNumPeople(Number(event.target.value));
  };

  const handleNameChange = (index: number, value: string) => {
    const updatedPeople = [...people];
    updatedPeople[index].name = value;
    setPeople(updatedPeople);
  };

  const handleStartOrder = () => {
    const initialPeople = Array.from({ length: numPeople }, (_, index) => ({
      id: uuidv4(),
      name: `Persona ${index + 1}`,
      items: [],
    }));
    setPeople(initialPeople);
    setShowMenu(true);
  };

  const handleAddItemToPerson = (personId: string, item: MenuItem) => {
    setPeople((prevPeople) =>
      prevPeople.map((person) =>
        person.id === personId
          ? {
              ...person,
              items: [...person.items, { id: item.id, quantity: 1 }],
            }
          : person
      )
    );
  };

  const handleQuantityChange = (
    personId: string,
    itemId: string,
    quantity: number
  ) => {
    setPeople((prevPeople) =>
      prevPeople.map((person) =>
        person.id === personId
          ? {
              ...person,
              items: person.items.map((item) =>
                item.id === itemId ? { ...item, quantity: quantity } : item
              ),
            }
          : person
      )
    );
  };

  const handleRemoveItemFromPerson = (personId: string, itemId: string) => {
    setPeople((prevPeople) =>
      prevPeople.map((person) =>
        person.id === personId
          ? {
              ...person,
              items: person.items.filter((item) => item.id !== itemId),
            }
          : person
      )
    );
  };

  const handleOpenPedidoModal = () => {
    setOpenPedidoModal(true);
  };

  const handleClosePedidoModal = () => {
    setOpenPedidoModal(false);
  };

  const generateSampleMenuItems = () => {
    return [
      {
        name: "Hamburguesa Clásica",
        description: "Carne de res, queso cheddar, lechuga, tomate y cebolla.",
        price: 8.99,
        imageUrl: "https://ejemplo.com/hamburguesa.jpg",
        available: true,
        recommendation: "Ideal con papas fritas.",
        observations: "Se puede pedir sin cebolla.",
      },
      {
        name: "Pizza Margarita",
        description: "Salsa de tomate, mozzarella fresca y albahaca.",
        price: 12.50,
        imageUrl: "https://ejemplo.com/pizza.jpg",
        available: true,
        recommendation: "Perfecta para compartir.",
        observations: "Opción vegana disponible con queso de almendras.",
      },
      {
        name: "Ensalada César",
        description: "Lechuga romana, crutones, parmesano y aderezo César.",
        price: 6.75,
        imageUrl: "https://ejemplo.com/ensalada.jpg",
        available: true,
        recommendation: "Ligera y refrescante.",
        observations: "Se puede añadir pollo a la parrilla.",
      },
      {
        name: "Pasta Carbonara",
        description: "Spaghetti, huevo, panceta, queso pecorino romano y pimienta negra.",
        price: 10.20,
        imageUrl: "https://ejemplo.com/pasta_carbonara.jpg",
        available: true,
        recommendation: "Un clásico italiano.",
        observations: "Sin gluten disponible con pasta de arroz.",
      },
      {
        name: "Tacos al Pastor",
        description: "Carne de cerdo adobada, piña, cebolla y cilantro.",
        price: 9.50,
        imageUrl: "https://ejemplo.com/tacos_pastor.jpg",
        available: true,
        recommendation: "Sabor auténtico mexicano.",
        observations: "Picante medio.",
      },
      {
        name: "Sushi Variado (12 piezas)",
        description: "Selección de nigiris y makis variados.",
        price: 15.99,
        imageUrl: "https://ejemplo.com/sushi.jpg",
        available: true,
        recommendation: "Para amantes del sushi.",
        observations: "Incluye salsa de soya, wasabi y jengibre.",
      },
      {
        name: "Pollo Frito",
        description: "Crujientes piezas de pollo frito, receta secreta.",
        price: 7.80,
        imageUrl: "https://ejemplo.com/pollo_frito.jpg",
        available: true,
        recommendation: "Ideal para niños y adultos.",
        observations: "Opción extra crujiente disponible.",
      },
      {
        name: "Sopa de Tomate",
        description: "Sopa cremosa de tomate, hecha en casa.",
        price: 5.50,
        imageUrl: "https://ejemplo.com/sopa_tomate.jpg",
        available: true,
        recommendation: "Caliente y reconfortante.",
        observations: "Servida con pan tostado.",
      },
      {
        name: "Brownie con Helado",
        description: "Brownie de chocolate caliente con helado de vainilla.",
        price: 6.25,
        imageUrl: "https://ejemplo.com/brownie_helado.jpg",
        available: true,
        recommendation: "Postre perfecto.",
        observations: "Se puede pedir sin nueces.",
      },
      {
        name: "Jugo de Naranja Natural",
        description: "Jugo de naranja recién exprimido.",
        price: 3.50,
        imageUrl: "https://ejemplo.com/jugo_naranja.jpg",
        available: true,
        recommendation: "Bebida refrescante.",
        observations: "Sin azúcar añadida.",
      },
    ];
  };


  const handleAddSampleData = async () => {
    setLoadingAddSampleData(true);
    setMessage("Agregando datos de ejemplo...");
    try {
      const sampleMenuItems = generateSampleMenuItems();
      const menuCollectionRef = collection(db, COLLECTIONS.MENU);
      for (const item of sampleMenuItems) {
        await addDoc(menuCollectionRef, item);
      }
      setMessage("Datos de ejemplo agregados exitosamente!");
    } catch (error) {
      console.error("Error al agregar datos de ejemplo:", error);
      setMessage("Error al agregar datos de ejemplo.");
    } finally {
      setLoadingAddSampleData(false);
      setTimeout(() => setMessage(null), 5000); // Limpiar mensaje después de 5 segundos
    }
  };


  return (
    <div className="container mx-auto my-8 p-4 md:p-8">
      {/* Container principal con Tailwind */}
      <h1 className="text-3xl font-bold text-gray-900 mb-4">Menú</h1>
      {/* Título principal */}
      {!showMenu ? (
        <div className="grid gap-4 mb-4 md:grid-cols-2">
          {/* Contenedor para selección de personas */}
          <div className="mb-4">
            <label
              htmlFor="numPeople"
              className="block text-gray-700 text-sm font-bold mb-2"
            >
              Número de personas:
            </label>
            <input
              type="number"
              id="numPeople"
              value={numPeople}
              onChange={handleNumPeopleChange}
              min="1"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            />
          </div>
          {people.map((person, index) => (
            <div key={person.id} className="mb-4">
              <label
                htmlFor={`personName-${index}`}
                className="block text-gray-700 text-sm font-bold mb-2"
              >
                Nombre de la persona {index + 1} (Opcional):
              </label>
              <input
                type="text"
                id={`personName-${index}`}
                value={person.name}
                onChange={(e) => handleNameChange(index, e.target.value)}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              />
            </div>
          ))}
          <div>
            <button
              className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              onClick={handleStartOrder}
            >
              Empezar Pedido
            </button>
          </div>
        </div>
      ) : (
        <>
          <div className="mb-4"> {/* Contenedor para el botón "Agregar Datos de Ejemplo" */}
            <button
              onClick={handleAddSampleData}
              disabled={loadingAddSampleData}
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50"
            >
              {loadingAddSampleData ? "Agregando..." : "Agregar Datos de Ejemplo al Menú"}
            </button>
            {message && <p className="mt-2 text-sm text-gray-700">{message}</p>} {/* Mensaje de feedback */}
          </div>
          <div className="grid gap-6 md:grid-cols-3">
            {/* Grid para personas y menú */}
            {people.map((person) => (
              <div key={person.id} className="p-4 border rounded-lg shadow-md">
                {/* Card persona */}
                <h2 className="text-xl font-semibold text-gray-900 mb-2">
                  {person.name || "Persona sin nombre"}
                </h2>
                {/* Título persona */}
                <p className="text-gray-700 mb-2">Items:</p>
                {person.items.length > 0 ? (
                  <ul className="list-none pl-0 mb-4">
                    {/* Lista de items */}
                    {person.items.map((item) => {
                      const menuItem = menu.find(
                        (menuItem) => menuItem.id === item.id
                      );
                      return menuItem ? (
                        <li key={item.id} className="mb-2">
                          <div className="flex items-center justify-between">
                            <p className="text-gray-700">{menuItem.name} x </p>
                            <div className="flex items-center space-x-2">
                              <input
                                type="number"
                                value={item.quantity}
                                onChange={(e) =>
                                  handleQuantityChange(
                                    person.id,
                                    item.id,
                                    parseInt(e.target.value)
                                  )
                                }
                                min="1"
                                className="shadow appearance-none border rounded w-16 py-1 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-center"
                              />
                              <button
                                className="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded focus:outline-none focus:shadow-outline text-sm"
                                onClick={() =>
                                  handleRemoveItemFromPerson(person.id, item.id)
                                }
                              >
                                Eliminar
                              </button>
                            </div>
                          </div>
                        </li>
                      ) : null;
                    })}
                  </ul>
                ) : (
                  <p className="text-gray-500 mb-4">
                    Esta persona aún no tiene items.
                  </p>
                )}
                <p className="text-gray-700 font-semibold mb-2">Menú:</p>
                <div className="grid gap-2 md:grid-cols-2">
                  {/* Grid menú por persona */}
                  {menu.map((item) => (
                    <button
                      key={item.id}
                      className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                      onClick={() => handleAddItemToPerson(person.id, item)}
                    >
                      {item.name}
                    </button>
                  ))}
                </div>
              </div>
            ))}
          </div>
          <div className="mt-6">
            <button
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              onClick={handleOpenPedidoModal}
            >
              Realizar Pedido
            </button>
          </div>
          <PedidoForm onClose={handleClosePedidoModal} people={people} />
        </>
      )}
    </div>
  );
};

export default MenuPage;
/* Fin src\pages\MenuPage.tsx */

/* Inicio src\pages\PedidosPage.tsx */

import { Container, Typography } from "@mui/material";
import React from "react";
import PedidoList from "../components/pedidos/PedidoList";

const PedidosPage: React.FC = () => {
  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Pedidos
      </Typography>
      <PedidoList />
    </Container>
  );
};

export default PedidosPage;

/* Fin src\pages\PedidosPage.tsx */

/* Inicio src\pages\Perfil.tsx */
// src/pages/Perfil.tsx
import {
  Alert,
  Avatar,
  Button,
  Container,
  Grid,
  Paper,
  Snackbar,
  Typography,
} from "@mui/material";
import React, { useState } from "react";
import { useAuth } from "../hooks/useAuth";

const Perfil: React.FC = () => {
  const { user, addPoints, points } = useAuth();
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: "success" | "error";
  }>({ open: false, message: "", severity: "success" });

  const handleAddPoints = async () => {
    try {
      await addPoints();
      setSnackbar({
        open: true,
        message: "Puntos agregados exitosamente.",
        severity: "success",
      });
    } catch {
      setSnackbar({
        open: true,
        message: "Error al agregar puntos.",
        severity: "error",
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Paper sx={{ padding: 4 }}>
        <Grid container spacing={4}>
          <Grid item xs={12} sm={4} sx={{ textAlign: "center" }}>
            <Avatar
              alt={user?.email}
              src="/static/images/avatar/1.jpg"
              sx={{ width: 120, height: 120, margin: "0 auto" }}
            />
            <Typography variant="h6" sx={{ mt: 2 }}>
              {user?.email}
            </Typography>
          </Grid>
          <Grid item xs={12} sm={8}>
            <Typography variant="h5" gutterBottom>
              Información del Perfil
            </Typography>
            <Typography variant="body1">
              <strong>UID:</strong> {user?.uid}
            </Typography>
            <Typography variant="body1">
              <strong>Puntos:</strong> {points}
            </Typography>
            <Button
              variant="contained"
              color="primary"
              onClick={handleAddPoints}
              sx={{ mt: 2 }}
            >
              Sumar 10 Puntos
            </Button>
          </Grid>
        </Grid>
      </Paper>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default Perfil;

/* Fin src\pages\Perfil.tsx */

/* Inicio src\pages\Success.tsx */
// src/pages/Success.tsx
import { Container, Typography } from "@mui/material";
import React, { useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { handlePaymentNotification } from "../payment/payment";
import "../styles/global.css";

const Success: React.FC = () => {
  const [searchParams] = useSearchParams();
  const sessionId = searchParams.get("session_id");
  const navigate = useNavigate();

  useEffect(() => {
    const handleSuccessPayment = async () => {
      if (sessionId) {
        try {
          await handlePaymentNotification(sessionId);
          navigate("/pedidos");
        } catch (error) {
          console.log(
            "Error al procesar el pago:",
            (error as { message: string }).message
          );
          navigate("/pedidos");
        }
      } else {
        navigate("/pedidos");
      }
    };
    handleSuccessPayment();
  }, [navigate, sessionId]);

  return (
    <Container>
      <Typography variant="h4">Pago exitoso, gracias por tu compra</Typography>
    </Container>
  );
};

export default Success;

/* Fin src\pages\Success.tsx */

/* Inicio src\payment\payment.ts */
// src/payment/payment.ts
import { doc, updateDoc } from "firebase/firestore";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export const updateOrderStatus = async (orderId: string, status: string) => {
    try {
        await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), { status: status });
        return true;
    } catch (error) {
        console.error("Error al actualizar el estado del pedido:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al actualizar el estado del pedido");
    }
};

export const handlePaymentNotification = async (session_id: string) => {
    console.log("Manejando notificacion de pago:", session_id);
    try {
        // Aquí debes implementar la lógica para verificar el pago con Stripe
        // Por ejemplo, puedes hacer una llamada a tu backend para verificar el estado del pago
        // Luego, actualizar el estado del pedido en Firestore
        // Este es un ejemplo simplificado:

        // Simulación de verificación de pago
        const paymentVerified = true; // Reemplaza con la lógica real

        if (paymentVerified) {
            // Supongamos que tienes el orderId en los metadatos de la sesión
            const orderId = "orderId_from_metadata"; // Reemplaza con el valor real
            await updateOrderStatus(orderId, "enviado");
            return true;
        } else {
            throw new Error("Pago no verificado");
        }
    } catch (error) {
        console.log("Error", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al manejar la notificacion");
    }
};

declare const window;

export const createCheckoutSession = async (amount: number, orderId: string) => {
    try {
        const response = await fetch('https://api.stripe.com/v1/checkout/sessions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer YOUR_STRIPE_SECRET_KEY`,
            },
            body: JSON.stringify({
                line_items: [
                    {
                        price_data: {
                            currency: 'usd',
                            unit_amount: amount * 100,
                            product_data: {
                                name: 'Pedido',
                            },
                        },
                        quantity: 1,
                    }
                ],
                mode: 'payment',
                success_url: `${window.location.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
                cancel_url: window.location.origin,
                metadata: {
                    orderId: orderId,
                },
            }),
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Error al crear sesion');
        }
        return data.id;
    } catch (error) {
        console.error("Error al crear la sesion de checkout:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || 'Error al crear sesion');
    }
};

export const processPayment = async (sessionId: string, publicKey: string) => {
    const stripe = window.Stripe(publicKey);
    stripe.redirectToCheckout({ sessionId });
};

/* Fin src\payment\payment.ts */

/* Inicio src\styles\global.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
}

.animate-fade-in {
    animation: fade-in 0.5s ease-out forwards;
}

@keyframes slide-in-bottom {
    from {
        transform: translateY(100%);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.animate-slide-in-bottom {
    animation: slide-in-bottom 0.5s ease-out forwards;
}

@keyframes slide-down {
  from {
    max-height: 0;
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    max-height: 1000px; /* Increased max-height to accommodate more name fields */
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-slide-down {
  animation: slide-down 0.5s ease-out forwards;
  overflow: hidden; /* Ensure content within animated area is clipped */
}


.transition-max-height {
    transition: max-height 0.5s ease-in-out;
    overflow: hidden; /* Clip content during transition */
}


body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
        "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
        sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
        monospace;
}
/* Fin src\styles\global.css */

/* Inicio src\types\css.d.ts */
declare module '*.css';
/* Fin src\types\css.d.ts */

/* Inicio src\types\global.d.ts */
// src/types/global.d.ts
interface MercadoPago {
    new (publicKey: string, options?): {
       checkout: (params) => void;
    }
  }
  
  interface Window {
    MercadoPago?: MercadoPago;
  }

  interface window {
    Stripe: (publicKey: string) => void;
  }
/* Fin src\types\global.d.ts */

/* Inicio src\utils\constants.ts */
export const COLLECTIONS = {
    MENU: 'menu',
    PEDIDOS: 'pedidos',
  };
/* Fin src\utils\constants.ts */

/* Inicio src\utils\firebase.ts */
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyCKnLLXRtyfyLwVDVs05-q1NLR2JidFzus",
  authDomain: "alacartes.firebaseapp.com",
  projectId: "alacartes",
  storageBucket: "alacartes.firebasestorage.app",
  messagingSenderId: "145893311915",
  appId: "1:145893311915:web:9cd7cb44eba542ffda3eee"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
/* Fin src\utils\firebase.ts */

/* Inicio src\utils\theme.ts */
// src/utils/theme.ts
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
    palette: {
        primary: {
            main: '#1976d2', // Color primario
        },
        secondary: {
            main: '#dc004e', // Color secundario
        },
        background: {
            default: '#f4f6f8', // Fondo general
            paper: '#ffffff', // Fondos de componentes
        },
    },
    typography: {
        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
        h5: {
            fontWeight: 600,
        },
    },
    components: {
        MuiButton: {
            styleOverrides: {
                root: {
                    textTransform: 'none', // Mantener el texto en su forma original
                },
            },
        },
        MuiTextField: {
            styleOverrides: {
                root: {
                    marginTop: '8px',
                    marginBottom: '8px',
                },
            },
        },
    },
});

export default theme;

/* Fin src\utils\theme.ts */

/* Inicio tailwind.config.js */
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
/* Fin tailwind.config.js */

/* Inicio tsconfig.app.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    "noImplicitAny": false,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "src"
  ]
}
/* Fin tsconfig.app.json */

/* Inicio tsconfig.json */
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "typeRoots": [
      "src/types"
    ],
    "strict": false,
    "noImplicitAny": false,
    "allowJs": true,
    "skipLibCheck": true
  }
}
/* Fin tsconfig.json */

/* Inicio tsconfig.node.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

/* Fin tsconfig.node.json */

/* Inicio vite.config.ts */
import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'
import { VitePWA } from 'vite-plugin-pwa'

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      manifest: {
        "name": "SrPol",
        "short_name": "SrPol",
        "description": "Aplicación para restaurantes",
        "theme_color": "#ffffff",
        "icons": [
          {
            "src": "/logo192.png",
            "sizes": "192x192",
            "type": "image/png"
          },
          {
            "src": "/logo512.png",
            "sizes": "512x512",
            "type": "image/png"
          }
        ],
        "start_url": ".",
        "display": "standalone",
        "background_color": "#ffffff"
      },
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],
      },
    })
  ],
})
/* Fin vite.config.ts */
