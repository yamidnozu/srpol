
/* Directorio:  */
├── .prettierrc.json [8]
├── eslint.config.js [16]
├── firebase.json [13]
├── index.html [17]
├── package.json [57]
├── postcss.config.js [7]
├── 📂 src
│   ├── App.tsx [183]
│   ├── 📂 components
│   │   ├── 📂 auth
│   │   │   ├── LoginForm.tsx [58]
│   │   │   └── RegisterForm.tsx [58]
│   │   ├── 📂 forms
│   │   │   ├── MenuForm.tsx [222]
│   │   │   └── PedidoForm.tsx [228]
│   │   ├── 📂 layout
│   │   │   ├── MainLayout.tsx [50]
│   │   │   ├── Navbar.tsx [57]
│   │   │   ├── PublicLayout.tsx [14]
│   │   │   └── Sidebar.tsx [123]
│   │   ├── 📂 menu
│   │   │   ├── GroupOrderPage.tsx [612]
│   │   │   ├── JoinOrderModal.tsx [57]
│   │   │   ├── MenuForm.tsx [223]
│   │   │   ├── MenuItem.tsx [95]
│   │   │   ├── MenuList.tsx [29]
│   │   │   ├── MenuModal.tsx [77]
│   │   │   ├── NameModal.tsx [63]
│   │   │   ├── 📂 partials
│   │   │   │   ├── OrderReview.tsx [197]
│   │   │   │   ├── PeopleSelection.tsx [63]
│   │   │   │   ├── PersonOrder.tsx [225]
│   │   │   │   └── SharedOrder.tsx [174]
│   │   │   └── PersonMenuModal.tsx [201]
│   │   ├── 📂 payment
│   │   │   └── PaymentForm.tsx [80]
│   │   ├── 📂 pedidos
│   │   │   ├── PedidoForm.tsx [228]
│   │   │   ├── PedidoItem.tsx [9]
│   │   │   └── PedidoList.tsx [395]
│   │   ├── 📂 splash
│   │   │   └── SplashScreen.tsx [64]
│   │   └── 📂 ui
│   │       ├── Button.tsx [79]
│   │       ├── Container.tsx [17]
│   │       ├── ErrorBoundry.tsx [46]
│   │       ├── ListItem.tsx [64]
│   │       └── TextField.tsx [34]
│   ├── 📂 context
│   │   ├── AppContext.tsx [81]
│   │   └── AuthContext.tsx [172]
│   ├── 📂 hooks
│   │   ├── useAuth.ts [10]
│   │   └── useMenu.ts [10]
│   ├── main.tsx [10]
│   ├── 📂 pages
│   │   ├── ContabilidadDetail.tsx [471]
│   │   ├── ContabilidadPage.tsx [184]
│   │   ├── Dashboard.tsx [999]
│   │   ├── GestionMenu.tsx [1153]
│   │   ├── GestionUsuarios.tsx [82]
│   │   ├── Login.tsx [52]
│   │   ├── MenuPage.tsx [406]
│   │   ├── PedidosPage.tsx [18]
│   │   ├── Perfil.tsx [97]
│   │   └── Success.tsx [41]
│   ├── 📂 payment
│   │   └── payment.ts [87]
│   ├── 📂 types
│   │   ├── css.d.ts [2]
│   │   └── global.d.ts [31]
│   └── 📂 utils
│       ├── constants.ts [6]
│       ├── firebase.ts [16]
│       ├── menu-scripts.ts [462]
│       └── theme.ts [43]
├── tailwind.config.js [9]
├── tsconfig.app.json [26]
├── tsconfig.json [29]
├── tsconfig.node.json [25]
└── vite.config.ts [41]


Total de líneas resumidas: 8706


/* Inicio .prettierrc.json */
{
  "semi": false,
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false
}
/* Fin .prettierrc.json */

/* Inicio eslint.config.js */
import js from "@eslint/js";
import tseslint from "typescript-eslint";

export default tseslint.config(
  {
    files: ["**/*.{ts,tsx}"], // Asegúrate de incluir esto para que se aplique a archivos TS/TSX
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.json'], //  <- Ruta a tu tsconfig.json
        tsconfigRootDir: import.meta.dirname, // <-  Directorio raíz para tsconfig.json
      },
    },
  },
  js.configs.recommended,
  ...tseslint.configs.recommendedTypeChecked,
);
/* Fin eslint.config.js */

/* Inicio firebase.json */
{
  "hosting": {
    "public": "dist",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

/* Fin firebase.json */

/* Inicio index.html */
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <link rel="apple-touch-icon" href="/logo192.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- <link rel="manifest" href="/manifest.json" /> -->
    <meta name="theme-color" content="#ffffff" />
    <title>SrPol</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

/* Fin index.html */

/* Inicio package.json */
{
  "name": "srpol",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "format": "npx eslint . --fix && npx prettier . --write"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mercadopago/sdk-js": "^0.0.3",
    "@mui/icons-material": "^6.4.1",
    "@mui/material": "^6.4.1",
    "@mui/x-data-grid": "^7.24.1",
    "@stripe/stripe-js": "^5.5.0",
    "axios": "^1.7.9",
    "chart.js": "^4.4.7",
    "firebase": "^11.2.0",
    "firebase-admin": "^13.0.2",
    "firebase-functions": "^6.3.0",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.4.0",
    "react-router-dom": "^7.1.3",
    "stripe": "^17.5.0",
    "uuid": "^11.0.5"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@typescript-eslint/eslint-plugin": "^8.22.0",
    "@typescript-eslint/parser": "^8.22.0",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.17",
    "eslint": "^9.19.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.35",
    "prettier": "^3.4.2",
    "tailwindcss": "^3.4.1",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5",
    "vite-plugin-pwa": "^0.21.1"
  }
}
/* Fin package.json */

/* Inicio postcss.config.js */
import autoprefixer from 'autoprefixer'
import tailwindcss from 'tailwindcss'

export default {
  plugins: [tailwindcss('./tailwind.config.js'), autoprefixer],
}

/* Fin postcss.config.js */

/* Inicio src\App.tsx */
// src/App.tsx
import React, { useEffect, useState } from 'react'
import { Navigate, Route, BrowserRouter as Router, Routes } from 'react-router-dom'
import MainLayout from './components/layout/MainLayout'
import PublicLayout from './components/layout/PublicLayout'
import GroupOrderPage from './components/menu/GroupOrderPage'
import SplashScreen from './components/splash/SplashScreen' // Importa el componente SplashScreen
import ErrorBoundary from './components/ui/ErrorBoundry'
import { AppProvider } from './context/AppContext'
import { AuthProvider } from './context/AuthContext'
import { useAuth } from './hooks/useAuth'
import ContabilidadDetail from './pages/ContabilidadDetail'
import ContabilidadPage from './pages/ContabilidadPage'
import Dashboard from './pages/Dashboard'
import GestionMenu from './pages/GestionMenu'
import GestionUsuarios from './pages/GestionUsuarios'
import Login from './pages/Login'
import MenuPage from './pages/MenuPage'
import PedidosPage from './pages/PedidosPage'
import Perfil from './pages/Perfil'
import Success from './pages/Success'
import './styles/global.css'

const PrivateRoute: React.FC<{
  children: React.ReactNode
  allowedRoles?: string[]
}> = ({ children, allowedRoles }) => {
  const { user, loading, userRole } = useAuth()

  if (loading) {
    return <div>Cargando...</div>
  }

  if (!user) {
    return <Navigate to="/login" />
  }

  if (allowedRoles && !allowedRoles.includes(userRole || 'client')) {
    return <Navigate to="/" />
  }

  return <MainLayout>{children}</MainLayout>
}

const PublicRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user, loading } = useAuth()

  if (loading) {
    return <div>Cargando...</div>
  }

  return !user ? <PublicLayout>{children}</PublicLayout> : <Navigate to="/" />
}

const App: React.FC = () => {
  const [splashFinished, setSplashFinished] = useState(false)

  useEffect(() => {
    // Simula la finalización del splash screen después de un tiempo (ajusta este tiempo)
    const timeout = setTimeout(() => {
      setSplashFinished(true)
    }, 3000) // Debe coincidir con la duración total del splash screen (2.5s + 0.5s fade out)

    return () => clearTimeout(timeout)
  }, [])

  return (
    <AuthProvider>
      <AppProvider>
        <Router>
          <ErrorBoundary>
            {!splashFinished ? (
              <SplashScreen /> // Renderiza el SplashScreen mientras no haya terminado
            ) : (
              <Routes>
                <Route
                  path="/login"
                  element={
                    <PublicRoute>
                      <Login />
                    </PublicRoute>
                  }
                />
                <Route
                  path="/success"
                  element={
                    <PrivateRoute>
                      <Success />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/"
                  element={
                    <PrivateRoute>
                      <Dashboard />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/menu/:groupOrderId"
                  element={
                    <PrivateRoute>
                      <GroupOrderPage name="" />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/menu"
                  element={
                    <PrivateRoute>
                      <MenuPage />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/pedidos"
                  element={
                    <PrivateRoute>
                      <PedidosPage />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/gestion-menu"
                  element={
                    <PrivateRoute allowedRoles={['admin', 'encargado']}>
                      <GestionMenu />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/perfil"
                  element={
                    <PrivateRoute>
                      <Perfil />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/gestion-usuarios"
                  element={
                    <PrivateRoute allowedRoles={['admin']}>
                      <GestionUsuarios />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/success"
                  element={
                    <PrivateRoute>
                      <Success />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/contabilidad"
                  element={
                    <PrivateRoute allowedRoles={['admin', 'encargado']}>
                      <ContabilidadPage />
                    </PrivateRoute>
                  }
                />
                <Route
                  path="/contabilidad/:id"
                  element={
                    <PrivateRoute allowedRoles={['admin', 'encargado']}>
                      <ContabilidadDetail />
                    </PrivateRoute>
                  }
                />
                <Route path="*" element={<Navigate to="/" />} />
              </Routes>
            )}
          </ErrorBoundary>
        </Router>
      </AppProvider>
    </AuthProvider>
  )
}

export default App

/* Fin src\App.tsx */

/* Inicio src\components\auth\LoginForm.tsx */
// src/components/auth/LoginForm.tsx
import React, { useState } from 'react'
import { useAuth } from '../../hooks/useAuth'
import '../../styles/authForm.css' // Importa el archivo CSS específico para los formularios de autenticación

const LoginForm: React.FC = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState<string | null>(null)
  const { login } = useAuth()

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    setError(null)
    try {
      await login(email, password)
    } catch (err) {
      setError((err as { message: string }).message)
      setTimeout(() => setError(null), 5000)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="auth-form">
      <div className="form-group">
        <label htmlFor="email">Correo electrónico</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
      </div>
      <div className="form-group">
        <label htmlFor="password">Contraseña</label>
        <input
          type="password"
          id="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>
      {error && (
        <div className="error-message">
          <p>Error: {error}</p>
        </div>
      )}
      <button type="submit" className="auth-button">
        Iniciar Sesión
      </button>
    </form>
  )
}

export default LoginForm

/* Fin src\components\auth\LoginForm.tsx */

/* Inicio src\components\auth\RegisterForm.tsx */
// src/components/auth/RegisterForm.tsx
import React, { useState } from 'react'
import { useAuth } from '../../hooks/useAuth'
import '../../styles/authForm.css' // Importa el archivo CSS específico para los formularios de autenticación

const RegisterForm: React.FC = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [error, setError] = useState<string | null>(null)
  const { register } = useAuth()

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    setError(null)
    try {
      await register(email, password)
    } catch (err) {
      setError((err as { message: string }).message)
      setTimeout(() => setError(null), 5000)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="auth-form">
      <div className="form-group">
        <label htmlFor="email">Correo electrónico</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
      </div>
      <div className="form-group">
        <label htmlFor="password">Contraseña</label>
        <input
          type="password"
          id="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>
      {error && (
        <div className="error-message">
          <p>Error: {error}</p>
        </div>
      )}
      <button type="submit" className="auth-button">
        Registrarse
      </button>
    </form>
  )
}

export default RegisterForm

/* Fin src\components\auth\RegisterForm.tsx */

/* Inicio src\components\forms\MenuForm.tsx */
/* Inicio src\components\forms\MenuForm.tsx */
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
  onClose: () => void; // Add onClose prop
}

const MenuForm: React.FC<MenuFormProps> = ({
  initialValues,
  onSubmit,
  onClose,
}) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );
  // Nuevo estado para el estado de disponibilidad
  const [availabilityStatus, setAvailabilityStatus] = useState<
    "disponible" | "noDisponibleMomento" | "noDisponibleLargoPlazo"
  >(initialValues?.availabilityStatus || "disponible");

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
      availabilityStatus, // Incluir el nuevo estado en los valores enviados
    });
    onClose(); // Close modal on submit
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Formulario con espaciado vertical */}
      <div className="grid grid-cols-1 gap-4">
        {" "}
        {/* Grid para los campos */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Nombre del Item
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Descripción
          </label>
          <textarea /* Usamos textarea para la descripción */
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="price"
            className="block text-sm font-medium text-gray-700"
          >
            Precio
          </label>
          <input
            type="number"
            id="price"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="imageUrl"
            className="block text-sm font-medium text-gray-700"
          >
            URL de Imagen
          </label>
          <input
            type="url"
            id="imageUrl"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="recommendation"
            className="block text-sm font-medium text-gray-700"
          >
            Recomendaciones (Opcional)
          </label>
          <input
            type="text"
            id="recommendation"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="observations"
            className="block text-sm font-medium text-gray-700"
          >
            Observaciones (Opcional)
          </label>
          <input
            type="text"
            id="observations"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        {/* Nuevo campo para el estado de disponibilidad */}
        <div>
          <label
            htmlFor="availabilityStatus"
            className="block text-sm font-medium text-gray-700"
          >
            Estado de Disponibilidad
          </label>
          <select
            id="availabilityStatus"
            value={availabilityStatus}
            onChange={(e) =>
              setAvailabilityStatus(
                e.target.value as
                  | "disponible"
                  | "noDisponibleMomento"
                  | "noDisponibleLargoPlazo"
              )
            }
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          >
            <option value="disponible">Disponible</option>
            <option value="noDisponibleMomento">
              No disponible en el momento
            </option>
            <option value="noDisponibleLargoPlazo">Ya no disponible</option>
          </select>
        </div>
      </div>
      <div className="flex items-center justify-between mt-4">
        {" "}
        {/* Contenedor para checkbox y botones */}
        <div className="flex items-center">
          <input
            type="checkbox"
            id="available"
            className="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
            checked={available}
            onChange={(e) => setAvailable(e.target.checked)}
          />
          <label htmlFor="available" className="ml-2 text-sm text-gray-700">
            Disponible (Visible en Menu)
          </label>
        </div>
        <div className="space-x-2">
          <button
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            onClick={onClose}
            type="button" /* Importante: type="button" para evitar submit del form al cancelar */
          >
            Cancelar
          </button>
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            {initialValues?.id ? "Guardar" : "Agregar"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\forms\MenuForm.tsx */

/* Inicio src\components\forms\PedidoForm.tsx */
// src/components/pedidos/PedidoForm.tsx
import { Timestamp, addDoc, collection } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { db } from '../../utils/firebase'

/** Mismo tipo que uses en GroupOrderPage */
interface Person {
  personIndex: number
  userId: string | null
  name: string
  items: { id: string; quantity: number }[]
  locked?: boolean
  finished?: boolean
}

interface SharedOrderItem {
  itemId: string
  quantity: number
  personIds: string[]
}

interface PedidoFormProps {
  onClose: () => void
  people?: Person[] // Aquí usamos la interface Person
  sharedOrderItems?: SharedOrderItem[]
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people, sharedOrderItems }) => {
  const { menu } = useMenu()
  const { user, addPoints } = useAuth()
  const [items, setItems] = useState<
    {
      id: string
      quantity: number
      assignedTo: string
    }[]
  >([])

  const [peopleOrder, setPeopleOrder] = useState<{ userId: string | null; name: string }[]>([])
  const [sede, setSede] = useState('')
  const [deliveryFee, setDeliveryFee] = useState(0)
  const [deliveryIncluded, setDeliveryIncluded] = useState(true)
  const [paymentMethod, setPaymentMethod] = useState('contraentrega')

  useEffect(() => {
    // Convertimos people en un estado con 'peopleOrder'
    if (people) {
      const mapped = people.map((p) => ({
        userId: p.userId,
        name: p.name,
      }))
      setPeopleOrder(mapped)

      // Flatten person items
      const personItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        })),
      )
      setItems(personItems)
    }
  }, [people])

  useEffect(() => {
    if (sharedOrderItems) {
      // Flatten shared items -> assignedTo: 'Compartido'
      const sharedItemsForDisplay = sharedOrderItems.flatMap((sharedItem) =>
        Array(sharedItem.quantity)
          .fill(null)
          .map(() => ({
            id: sharedItem.itemId,
            quantity: 1,
            assignedTo: 'Compartido',
          })),
      )
      setItems((prev) => [...prev, ...sharedItemsForDisplay])
    }
  }, [sharedOrderItems])

  // Simulación sedes
  const sedesDisponibles = ['Sede Norte', 'Sede Sur', 'Sede Centro']
  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0])
    }
  }, [sedesDisponibles])

  const calculateTotal = () => {
    let total = 0
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    return total + deliveryFee
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    if (!user) return

    try {
      const total = calculateTotal()
      const orderId = uuidv4()
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede,
        status: 'pendiente',
        total,
        deliveryFee,
        deliveryIncluded,
        paymentMethod,
        orderDate: Timestamp.now(),
        orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              itemId: si.itemId,
              quantity: si.quantity,
              personIds: si.personIds,
            }))
          : [],
      }

      await addDoc(collection(db, 'pedidos'), orderData)
      handlePaymentSuccess()
    } catch (error) {
      console.error('Error al agregar el pedido:', error)
    }
  }

  const handlePaymentSuccess = async () => {
    await addPoints()
    alert('Pedido realizado con éxito y puntos sumados.')
    onClose()
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label htmlFor="sede" className="block text-sm font-medium text-gray-700">
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="deliveryFee" className="block text-sm font-medium text-gray-700">
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label htmlFor="deliveryIncluded" className="font-medium text-gray-700">
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Realizar Pedido1
        </button>
      </div>
    </form>
  )
}

export default PedidoForm

/* Fin src\components\forms\PedidoForm.tsx */

/* Inicio src\components\layout\MainLayout.tsx */
// src/components/layout/MainLayout.tsx
import React, { useEffect, useState } from 'react'
import Navbar from './Navbar'
import Sidebar from './Sidebar'

interface MainLayoutProps {
  children: React.ReactNode
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
  const [drawerOpen, setDrawerOpen] = useState(false)
  const [isMobile, setIsMobile] = useState(false)

  const handleDrawerToggle = () => {
    setDrawerOpen(!drawerOpen)
  }

  const handleDrawerClose = () => {
    setDrawerOpen(false)
  }

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768) // Ajusta el breakpoint según tus necesidades
    }

    handleResize() // Set initial value
    window.addEventListener('resize', handleResize)
    return () => window.removeEventListener('resize', handleResize)
  }, [])

  return (
    <div className="flex h-screen bg-gray-100 overflow-hidden">
      <Navbar toggleDrawer={handleDrawerToggle} />
      <Sidebar drawerOpen={drawerOpen} handleDrawerClose={handleDrawerClose} />
      <main
        className={`flex-1 overflow-x-hidden overflow-y-auto p-4 ${
          isMobile ? 'pt-16' : 'md:pl-64'
        }`}
      >
        <div className="container mx-auto">
          <div className="w-full">{children}</div>
        </div>
      </main>
    </div>
  )
}

export default MainLayout

/* Fin src\components\layout\MainLayout.tsx */

/* Inicio src\components\layout\Navbar.tsx */
// src/components/layout/Navbar.tsx
import MenuIcon from '@mui/icons-material/Menu'
import React from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'

interface NavbarProps {
  toggleDrawer: () => void
}

const Navbar: React.FC<NavbarProps> = ({ toggleDrawer }) => {
  const { logout, user } = useAuth()
  const navigate = useNavigate()

  const handleLogout = async () => {
    await logout()
    navigate('/login')
  }

  return (
    <header className="bg-white shadow-md fixed w-full top-0 z-50">
      <div className="container mx-auto px-4 sm:px-6 py-3 flex justify-between items-center">
        <div className="flex items-center">
          <button
            className="text-gray-500 hover:text-gray-700 focus:outline-none focus:text-gray-700 md:hidden transition-colors duration-200" // Transición en el icono
            aria-label="Abrir menú"
            onClick={toggleDrawer}
          >
            <MenuIcon className="transition-transform duration-300 hover:scale-110" />{' '}
            {/* Transición y escala en hover del icono */}
          </button>

          <img
            src="SrPolTitulo.png"
            alt="SrPol Logo"
            className="h-10 mr-2 transition-transform duration-300 hover:scale-105" // Transición en el logo
          />
          {/* Transición en el título */}
        </div>
        {user && (
          <div className="hidden md:flex items-center">
            <span className="text-gray-700 mr-4">{user.email}</span>
            <button
              className="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline transition-colors duration-200 hover:scale-105" // Transición en el botón
              onClick={handleLogout}
            >
              Cerrar Sesión
            </button>
          </div>
        )}
      </div>
    </header>
  )
}

export default Navbar

/* Fin src\components\layout\Navbar.tsx */

/* Inicio src\components\layout\PublicLayout.tsx */
// src/components/layout/PublicLayout.tsx
import React, { ReactNode } from 'react'
import '../../styles/public-layout.css' // Importa el archivo CSS para el diseño público

interface PublicLayoutProps {
  children: ReactNode
}

const PublicLayout: React.FC<PublicLayoutProps> = ({ children }) => {
  return <div>{children}</div>
}

export default PublicLayout

/* Fin src\components\layout\PublicLayout.tsx */

/* Inicio src\components\layout\Sidebar.tsx */
// src/components/layout/Sidebar.tsx
import {
  AddBusiness as AddBusinessIcon,
  Dashboard as DashboardIcon,
  People as PeopleIcon,
  Person as PersonIcon,
  RestaurantMenu as RestaurantMenuIcon,
  Settings as SettingsIcon,
  ShoppingCart as ShoppingCartIcon,
} from '@mui/icons-material'
import React from 'react'
import { NavLink, useLocation } from 'react-router-dom' // Importa NavLink y useLocation
import { useAuth } from '../../hooks/useAuth'

interface SidebarProps {
  drawerOpen: boolean
  handleDrawerClose: () => void
}

const Sidebar: React.FC<SidebarProps> = ({ drawerOpen, handleDrawerClose }) => {
  const { userRole } = useAuth()
  const location = useLocation() // Hook para obtener la ruta actual

  const menuItems = [
    {
      text: 'Dashboard',
      icon: <DashboardIcon />,
      path: '/',
      roles: ['admin', 'encargado', 'client'],
    },
    {
      text: 'Menú',
      icon: <RestaurantMenuIcon />,
      path: '/menu',
      roles: ['admin', 'encargado', 'client'],
    },
    {
      text: 'Pedidos',
      icon: <ShoppingCartIcon />,
      path: '/pedidos',
      roles: ['admin', 'encargado', 'client'],
    },
    {
      text: 'Gestionar Menú',
      icon: <SettingsIcon />,
      path: '/gestion-menu',
      roles: ['admin', 'encargado'],
    },
    {
      text: 'Perfil',
      icon: <PersonIcon />,
      path: '/perfil',
      roles: ['admin', 'encargado', 'client'],
    },
    {
      text: 'Gestión de Usuarios',
      icon: <PeopleIcon />,
      path: '/gestion-usuarios',
      roles: ['admin'],
    },
    {
      text: 'Contabilidad',
      icon: <AddBusinessIcon />, // Algún ícono que quieras (o un emoji de dinero 💸)
      path: '/contabilidad',
      roles: ['admin', 'encargado'],
    },
  ]

  return (
    <aside
      className={`bg-gray-50 w-64 flex-shrink-0 overflow-y-auto fixed top-16 md:top-0 left-0 h-full z-40 transition-transform duration-300 ease-in-out md:translate-x-0 ${
        drawerOpen ? 'translate-x-0' : '-translate-x-full'
      } md:shadow-md`} // Shadow en desktop
    >
      <div className="py-6 px-4 md:px-6">
        {' '}
        {/* Más padding en desktop */}
        <span className="text-xl font-semibold text-gray-900 block mb-2 md:hidden text-center">
          Navegación
        </span>{' '}
        {/* Título en mobile */}
        <nav className="space-y-2">
          {menuItems
            .filter(
              (item) => item.roles.includes(userRole || 'public') || item.roles.includes('public'),
            )
            .map((item) => {
              const isActive = location.pathname === item.path // Verifica si la ruta coincide
              return (
                <NavLink
                  key={item.text}
                  to={item.path}
                  className={({
                    isActive,
                  }) => `group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors duration-200
                                      ${
                                        isActive
                                          ? 'bg-indigo-100 text-indigo-700'
                                          : 'text-gray-700 hover:bg-gray-100 hover:text-gray-900'
                                      }`}
                  onClick={handleDrawerClose} // Cierra el drawer en mobile al hacer clic
                >
                  <span
                    className={`mr-3 h-6 w-6 flex items-center justify-center ${
                      isActive ? 'text-indigo-500' : 'text-gray-500 group-hover:text-gray-600'
                    }`}
                  >
                    {' '}
                    {/* Icon color changes on hover and active */}
                    {item.icon}
                  </span>
                  {item.text}
                </NavLink>
              )
            })}
        </nav>
      </div>
    </aside>
  )
}

export default Sidebar

/* Fin src\components\layout\Sidebar.tsx */

/* Inicio src\components\menu\GroupOrderPage.tsx */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-misused-promises */
import { doc, onSnapshot, updateDoc } from 'firebase/firestore'
import React, { useEffect, useRef, useState } from 'react'
import { useNavigate, useParams, useSearchParams } from 'react-router-dom'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { COLLECTIONS } from '../../utils/constants'
import { db } from '../../utils/firebase'
import NameModal from './NameModal'
import OrderReview from './partials/OrderReview'
import PeopleSelection from './partials/PeopleSelection'
import PersonOrder from './partials/PersonOrder'
import SharedOrder from './partials/SharedOrder'

export interface Person {
  personIndex: number
  userId: string | null
  name: string
  items: { id: string; quantity: number }[]
  locked?: boolean
  finished?: boolean
  photoUrl?: string
}

export interface SharedOrderItem {
  itemId: string
  quantity: number
  personIds: string[]
}

interface GroupOrderData {
  code: string
  ownerId: string
  status: string
  participants: Person[]
  sharedItems: SharedOrderItem[]
  orderPlaced?: boolean
  allFinished?: boolean
  showPricesToAll?: boolean
}

export interface GroupOrderPageProps {
  name: string
}

const bubbleColors = [
  'bg-pink-100',
  'bg-blue-100',
  'bg-yellow-100',
  'bg-green-100',
  'bg-purple-100',
  'bg-teal-100',
]

const GroupOrderPage: React.FC<GroupOrderPageProps> = () => {
  const { menu } = useMenu()
  const { user } = useAuth()
  const [numPeople, setNumPeople] = useState<number>(1)
  const [people, setPeople] = useState<Person[]>([])
  const [showPeopleNames, setShowPeopleNames] = useState(false)
  const [showPedidoForm, setShowPedidoForm] = useState(false)
  const [sharedOrderItems, setSharedOrderItems] = useState<SharedOrderItem[]>([])
  const [selectedView, setSelectedView] = useState<string>('shared')
  const [groupOrderCode, setGroupOrderCode] = useState<string | null>(null)
  const [groupOrderId, setGroupOrderId] = useState<string | null>(null)
  const [isOwner, setIsOwner] = useState(false)
  const [allFinished, setAllFinished] = useState(false)
  const [orderPlaced, setOrderPlaced] = useState(false)
  const [showPricesToAll, setShowPricesToAll] = useState(false)
  const [showNameModal, setShowNameModal] = useState(false)
  const [currentPersonIndex, setCurrentPersonIndex] = useState<number | null>(null)
  const [tempPersonName, setTempPersonName] = useState<string>('')

  const navigate = useNavigate()
  const [searchParams] = useSearchParams()
  const codeFromURL = searchParams.get('code')
  const joiningWithCode = !!codeFromURL
  const { groupOrderId: routeGroupId } = useParams()

  // ─── CREAR LOS REFS DE FORMA INCONDICIONAL ─────────────────────────────
  // Para el SharedOrder (único)
  const sharedOrderSummaryRef = useRef<HTMLDivElement>(null)
  // Para cada PersonOrder, creamos un arreglo de refs:
  const personRefs = useRef<React.RefObject<HTMLDivElement>[]>([])
  if (personRefs.current.length !== people.length) {
    personRefs.current = Array(people.length)
      .fill(null)
      .map(() => React.createRef<HTMLDivElement>())
  }

  // ─── SUSCRIPCIÓN AL PEDIDO GRUPAL ─────────────────────────────────────
  useEffect(() => {
    if (routeGroupId) {
      setGroupOrderId(routeGroupId)
      setGroupOrderCode(codeFromURL)
      subscribeToGroupOrder(routeGroupId)
    } else {
      console.log('No se encontró groupOrderId en la ruta')
    }
  }, [routeGroupId, codeFromURL])

  const subscribeToGroupOrder = (groupId: string) => {
    const ref = doc(db, COLLECTIONS.GROUP_ORDERS, groupId)
    return onSnapshot(
      ref,
      (docSnap) => {
        if (!docSnap.exists()) {
          navigate('/menu')
          return
        }
        const data = docSnap.data() as GroupOrderData
        setGroupOrderCode(data.code)
        setPeople(data.participants)
        setSharedOrderItems(data.sharedItems)
        setIsOwner(user?.uid === data.ownerId)
        setAllFinished(data.participants.every((p) => p.finished))
        setOrderPlaced(!!data.orderPlaced)
        setShowPricesToAll(!!data.showPricesToAll)
        if (data.participants.length !== numPeople) {
          setNumPeople(data.participants.length)
        }
        if (data.orderPlaced) {
          setShowPedidoForm(true)
        }
      },
      () => {
        navigate('/menu')
      },
    )
  }

  // ─── MANEJO DE CAMBIOS ───────────────────────────────────────────────
  const handleNumPeopleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const num = Number(e.target.value)
    setNumPeople(num)
    setPeople((prev) => {
      const currentCount = prev.length
      if (num > currentCount) {
        const newPeople = Array.from({ length: num - currentCount }, (_, i) => ({
          personIndex: currentCount + i,
          userId: null,
          name: `Persona ${currentCount + i + 1}`,
          items: [],
          locked: false,
          finished: false,
        }))
        return [...prev, ...newPeople]
      } else if (num < currentCount) {
        return prev.slice(0, num)
      }
      return prev
    })
  }

  const handlePersonNameChange = (index: number, name: string) => {
    const updated = [...people]
    if (updated[index]) {
      updated[index].name = name
      setPeople(updated)
    }
  }

  const handleStartOrder = () => {
    if (people.every((p) => p.name.trim() !== '')) {
      setShowPeopleNames(true)
      setSelectedView('shared')
    } else {
      alert('Por favor ingresa el nombre de cada persona')
    }
  }

  const handleAddToSharedOrder = async (item) => {
    if (!groupOrderId || orderPlaced) return
    if (item.availabilityStatus !== 'disponible') return

    const existingIndex = sharedOrderItems.findIndex((si) => si.itemId === item.id)
    let updated: SharedOrderItem[]
    if (existingIndex >= 0) {
      updated = sharedOrderItems.map((si, idx) =>
        idx === existingIndex ? { ...si, quantity: si.quantity + 1 } : si,
      )
    } else {
      updated = [...sharedOrderItems, { itemId: item.id, quantity: 1, personIds: [] }]
    }
    setSharedOrderItems(updated)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        sharedItems: updated,
      })
    } catch (error) {
      console.error('Error al actualizar sharedItems:', error)
    }
  }

  const handleSharedOrderItemQuantityChange = async (itemId: string, quantity: number) => {
    if (!groupOrderId || orderPlaced) return
    if (quantity < 0) return

    const updated = sharedOrderItems.map((si) => (si.itemId === itemId ? { ...si, quantity } : si))
    setSharedOrderItems(updated)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        sharedItems: updated,
      })
    } catch (error) {
      console.error('Error al cambiar cantidad en sharedItems:', error)
    }
  }

  const handleRemoveSharedOrderItem = async (itemId: string) => {
    if (!groupOrderId || orderPlaced) return

    const updated = sharedOrderItems.filter((si) => si.itemId !== itemId)
    setSharedOrderItems(updated)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        sharedItems: updated,
      })
    } catch (error) {
      console.error('Error al remover item compartido:', error)
    }
  }

  const handleAddItemToPerson = async (personIndex: number, menuItem) => {
    if (!groupOrderId || orderPlaced || !user) return
    if (menuItem.availabilityStatus !== 'disponible') return

    const personData = people[personIndex]
    const lockedByOther = personData.locked && personData.userId !== user.uid
    if (lockedByOther) return

    let updatedPeople = [...people]
    if (!personData.locked) {
      if (personData.name.startsWith('Persona')) {
        setCurrentPersonIndex(personIndex)
        setTempPersonName(personData.name)
        setShowNameModal(true)
      }
      updatedPeople = updatedPeople.map((p, idx) =>
        idx === personIndex ? { ...p, userId: user.uid, locked: true } : p,
      )
    }
    updatedPeople = updatedPeople.map((p, idx) => {
      if (idx === personIndex) {
        const foundItem = p.items.find((it) => it.id === menuItem.id)
        if (foundItem) {
          return {
            ...p,
            items: p.items.map((it) =>
              it.id === menuItem.id ? { ...it, quantity: it.quantity + 1 } : it,
            ),
          }
        } else {
          return { ...p, items: [...p.items, { id: menuItem.id, quantity: 1 }] }
        }
      }
      return p
    })
    setPeople(updatedPeople)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        participants: updatedPeople,
      })
    } catch (error) {
      console.error('Error al agregar item a persona:', error)
    }
  }

  const handlePersonOrderItemQuantityChange = async (
    personIndex: number,
    itemId: string,
    quantity: number,
  ) => {
    if (!groupOrderId || orderPlaced) return
    if (quantity < 0) return

    const updated = people.map((p, idx) =>
      idx === personIndex
        ? { ...p, items: p.items.map((it) => (it.id === itemId ? { ...it, quantity } : it)) }
        : p,
    )
    setPeople(updated)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        participants: updated,
      })
    } catch (error) {
      console.error('Error al cambiar cantidad de item en persona:', error)
    }
  }

  const handleRemoveItemFromPerson = async (personIndex: number, itemId: string) => {
    if (!groupOrderId || orderPlaced) return

    const updated = people.map((p, idx) =>
      idx === personIndex ? { ...p, items: p.items.filter((it) => it.id !== itemId) } : p,
    )
    setPeople(updated)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        participants: updated,
      })
    } catch (error) {
      console.error('Error al remover item de persona:', error)
    }
  }

  // ─── Finalizar pedido de persona ─────────────────────────────────
  const handlePersonFinishedOrder = async (personIndex: number) => {
    if (!groupOrderId || orderPlaced || !user) return
    if (!isOwner) {
      const myIndex = people.findIndex((p) => p.userId === user.uid)
      if (myIndex !== personIndex) return
    }
    const updated = people.map((p, idx) => (idx === personIndex ? { ...p, finished: true } : p))
    setPeople(updated)
    const everyoneDone = updated.every((p) => p.finished)
    setAllFinished(everyoneDone)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        participants: updated,
        allFinished: everyoneDone,
      })
    } catch (error) {
      console.error('Error al finalizar pedido de persona:', error)
    }
  }

  const handleNameModalClose = () => {
    setShowNameModal(false)
    setCurrentPersonIndex(null)
  }

  const handleNameSubmit = async (name: string) => {
    if (!groupOrderId || currentPersonIndex === null || !user) return
    const updated = people.map((p, idx) =>
      idx === currentPersonIndex
        ? { ...p, name: name.trim() !== '' ? name : p.name, userId: user.uid, locked: true }
        : p,
    )
    setPeople(updated)
    setShowNameModal(false)
    setCurrentPersonIndex(null)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        participants: updated,
      })
    } catch (error) {
      console.error('Error al actualizar nombre:', error)
    }
  }

  const handleReviewOrder = () => {
    setShowPedidoForm(true)
  }

  const handleOrderPlacement = async () => {
    if (!groupOrderId) return
    await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), { orderPlaced: true })
    setOrderPlaced(true)
    setShowPedidoForm(true)
  }

  const handleToggleShowPrices = async () => {
    if (!groupOrderId) return
    const newVal = !showPricesToAll
    setShowPricesToAll(newVal)
    try {
      await updateDoc(doc(db, COLLECTIONS.GROUP_ORDERS, groupOrderId), {
        showPricesToAll: newVal,
      })
    } catch (error) {
      console.error('Error al alternar visualización de precios:', error)
    }
  }

  const getSharedItemCount = () => sharedOrderItems.reduce((acc, si) => acc + si.quantity, 0)
  const getPersonItemCount = (person: Person) =>
    person.items.reduce((acc, it) => acc + it.quantity, 0)
  const getInitialLetter = (name: string) =>
    !name || name.trim() === '' ? '?' : name.trim()[0].toUpperCase()

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      {/* Encabezado */}
      <header className="mb-6 text-center">
        {groupOrderCode && (
          <div>
            <h2 className="text-2xl font-bold text-indigo-600">
              Código de Pedido: <span className="text-3xl">{groupOrderCode}</span>
            </h2>
            <p className="text-sm text-gray-500">Comparte este código con tus amigos</p>
          </div>
        )}
      </header>

      {/* Selección de número de personas y nombres */}
      {!showPeopleNames && !joiningWithCode ? (
        <PeopleSelection
          numPeople={numPeople}
          people={people}
          onNumPeopleChange={handleNumPeopleChange}
          onPersonNameChange={handlePersonNameChange}
          onStartOrder={handleStartOrder}
        />
      ) : !showPedidoForm ? (
        <>
          {/* Burbujas para cambiar de vista */}
          <div className="flex flex-wrap gap-4 justify-center mb-8">
            <div
              onClick={() => setSelectedView('shared')}
              className="cursor-pointer flex flex-col items-center"
            >
              <div
                className={`relative w-16 h-16 rounded-full ring-4 transition-transform duration-300 flex items-center justify-center ${
                  selectedView === 'shared' ? 'ring-indigo-500 scale-110' : 'ring-gray-300'
                } bg-indigo-100`}
              >
                <span className="text-2xl">🤝</span>
                {getSharedItemCount() > 0 && (
                  <span className="absolute top-0 right-0 bg-red-500 text-white text-xs font-bold rounded-full px-2 py-0.5">
                    {getSharedItemCount()}
                  </span>
                )}
              </div>
              <span className="mt-2 text-sm font-medium text-gray-700">Compartido</span>
            </div>
            {people.map((person, i) => {
              const lockedByOther = person.locked && person.userId !== user?.uid
              const active = selectedView === `person-${i}`
              const color = bubbleColors[i % bubbleColors.length]
              return (
                <div
                  key={person.personIndex}
                  onClick={() => setSelectedView(`person-${i}`)}
                  className="cursor-pointer flex flex-col items-center"
                >
                  <div
                    className={`relative w-16 h-16 rounded-full transition-transform duration-300 flex items-center justify-center ${
                      active ? 'ring-indigo-500 scale-110' : 'ring-gray-300'
                    } ${color}`}
                  >
                    {person.photoUrl ? (
                      <img
                        src={person.photoUrl}
                        alt={person.name}
                        className="w-full h-full object-cover rounded-full"
                      />
                    ) : (
                      <span className="text-xl font-bold text-gray-700">
                        {getInitialLetter(person.name)}
                      </span>
                    )}
                    {lockedByOther && (
                      <span className="absolute top-0 left-0 text-red-500 text-lg">🔒</span>
                    )}
                    {person.finished && (
                      <span className="absolute bottom-0 right-0 text-green-500 text-lg font-bold">
                        ✅
                      </span>
                    )}
                  </div>
                  <span className="mt-2 text-sm font-medium text-gray-700 max-w-[4rem] truncate">
                    {person.name}
                  </span>
                </div>
              )
            })}
          </div>

          {/* Sección de vista según selección */}
          {selectedView === 'shared' ? (
            <SharedOrder
              menuCategories={menu
                .filter((i) => i.availabilityStatus !== 'noDisponibleLargoPlazo')
                .reduce(
                  (acc, item) => {
                    const cat = item.recommendation || 'General'
                    acc[cat] = acc[cat] || []
                    acc[cat].push(item)
                    return acc
                  },
                  {} as Record<string, any[]>,
                )}
              sharedOrderItems={sharedOrderItems}
              onAddToSharedOrder={handleAddToSharedOrder}
              onSharedOrderItemQuantityChange={handleSharedOrderItemQuantityChange}
              onRemoveSharedOrderItem={handleRemoveSharedOrderItem}
              calculateSharedSubtotal={() =>
                sharedOrderItems.reduce((sum, si) => {
                  const menuItem = menu.find((m) => m.id === si.itemId)
                  return menuItem ? sum + menuItem.price * si.quantity : sum
                }, 0)
              }
              sharedOrderSummaryRef={sharedOrderSummaryRef}
              activeTab={selectedView}
              menu={menu}
              disabled={orderPlaced}
            />
          ) : (
            people.map((person, i) => {
              if (selectedView === `person-${i}`) {
                const lockedByOther = person.locked && person.userId !== user?.uid
                return (
                  <PersonOrder
                    key={person.personIndex}
                    person={person}
                    index={i}
                    menuCategories={menu
                      .filter((m) => m.availabilityStatus !== 'noDisponibleLargoPlazo')
                      .reduce(
                        (acc, item) => {
                          const cat = item.recommendation || 'General'
                          acc[cat] = acc[cat] || []
                          acc[cat].push(item)
                          return acc
                        },
                        {} as Record<string, any[]>,
                      )}
                    menu={menu}
                    onAddItemToPerson={handleAddItemToPerson}
                    onPersonOrderItemQuantityChange={handlePersonOrderItemQuantityChange}
                    onRemoveItemFromPerson={handleRemoveItemFromPerson}
                    calculateSubtotal={(personItems) =>
                      personItems.reduce((total, it) => {
                        const menuItem = menu.find((m) => m.id === it.id)
                        return menuItem ? total + menuItem.price * it.quantity : total
                      }, 0)
                    }
                    personOrderSummaryRef={personRefs.current[i]}
                    activeTab={selectedView}
                    onPersonFinishedOrder={handlePersonFinishedOrder}
                    isFinished={person.finished || false}
                    personLocked={person.locked || false}
                    isCurrentUserTab={person.userId === user?.uid}
                    personIndex={i}
                    disabled={lockedByOther || orderPlaced}
                  />
                )
              }
              return null
            })
          )}

          {/* Botón para revisar el pedido grupal (solo visible para el creador) */}
          <div className="flex justify-center mt-8">
            {isOwner && allFinished && !orderPlaced ? (
              <button
                onClick={handleReviewOrder}
                disabled={orderPlaced}
                className="bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-xl transition-colors duration-300"
              >
                ¡Revisar Pedido Grupal! ✅
              </button>
            ) : isOwner && orderPlaced ? (
              <p className="text-center text-green-600 font-semibold">
                Pedido realizado. Revisando resumen...
              </p>
            ) : !isOwner ? (
              <p className="text-center text-gray-600">
                Solo el creador del pedido puede finalizar pedidos de otros.
              </p>
            ) : !allFinished ? (
              <p className="text-center text-gray-600">
                Aún faltan personas por confirmar su pedido.
              </p>
            ) : null}
          </div>
        </>
      ) : (
        <OrderReview
          people={people}
          sharedOrderItems={sharedOrderItems}
          menu={menu}
          onClosePedidoForm={() => setShowPedidoForm(false)}
          calculateSharedSubtotal={() =>
            sharedOrderItems.reduce((sum, si) => {
              const menuItem = menu.find((m) => m.id === si.itemId)
              return menuItem ? sum + menuItem.price * si.quantity : sum
            }, 0)
          }
          calculateSubtotal={(personItems) =>
            personItems.reduce((total, it) => {
              const menuItem = menu.find((m) => m.id === it.id)
              return menuItem ? total + menuItem.price * it.quantity : total
            }, 0)
          }
          isOrderOwner={isOwner}
          onOrderPlaced={handleOrderPlacement}
          orderPlaced={orderPlaced}
          showPricesToAll={showPricesToAll}
          onToggleShowPrices={handleToggleShowPrices}
        />
      )}

      <NameModal
        open={showNameModal}
        onClose={handleNameModalClose}
        currentName={tempPersonName}
        onSubmit={handleNameSubmit}
      />
    </div>
  )
}

export default GroupOrderPage

/* Fin src\components\menu\GroupOrderPage.tsx */

/* Inicio src\components\menu\JoinOrderModal.tsx */
import {
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  TextField,
} from "@mui/material";
import React, { useState } from "react";

interface JoinOrderModalProps {
  open: boolean;
  onClose: () => void;
  onJoinOrder: (code: string) => void;
}

const JoinOrderModal: React.FC<JoinOrderModalProps> = ({
  open,
  onClose,
  onJoinOrder,
}) => {
  const [code, setCode] = useState("");

  const handleJoin = () => {
    onJoinOrder(code);
    onClose();
  };

  return (
    <Dialog open={open} onClose={onClose}>
      <DialogTitle>Unirse a Pedido Compartido</DialogTitle>
      <DialogContent>
        <TextField
          autoFocus
          margin="dense"
          id="code"
          label="Código del pedido"
          type="text"
          fullWidth
          value={code}
          onChange={(e) => setCode(e.target.value)}
        />
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} color="primary">
          Cancelar
        </Button>
        <Button onClick={handleJoin} color="primary">
          Unirme
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default JoinOrderModal;

/* Fin src\components\menu\JoinOrderModal.tsx */

/* Inicio src\components\menu\MenuForm.tsx */
/* Inicio src\components\forms\MenuForm.tsx */
/* src\components\forms\MenuForm.tsx */
import React, { useState } from "react";
import { MenuItem } from "../../context/AppContext";
import { useMenu } from "../../hooks/useMenu";

interface MenuFormProps {
  initialValues?: Partial<MenuItem>;
  onSubmit: (values: Partial<MenuItem>) => void;
  onClose: () => void; // Add onClose prop
}

const MenuForm: React.FC<MenuFormProps> = ({
  initialValues,
  onSubmit,
  onClose,
}) => {
  const { loading } = useMenu();
  const [name, setName] = useState(initialValues?.name || "");
  const [description, setDescription] = useState(
    initialValues?.description || ""
  );
  const [price, setPrice] = useState(initialValues?.price || 0);
  const [imageUrl, setImageUrl] = useState(initialValues?.imageUrl || "");
  const [recommendation, setRecommendation] = useState(
    initialValues?.recommendation || ""
  );
  const [observations, setObservations] = useState(
    initialValues?.observations || ""
  );
  const [available, setAvailable] = useState(
    initialValues?.available !== undefined ? initialValues.available : true
  );
  // Nueva estado para el estado de disponibilidad
  const [availabilityStatus, setAvailabilityStatus] = useState<
    "disponible" | "noDisponibleMomento" | "noDisponibleLargoPlazo"
  >(initialValues?.availabilityStatus || "disponible");

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit({
      name,
      description,
      price,
      imageUrl,
      available,
      recommendation,
      observations,
      availabilityStatus, // Incluir el nuevo estado en los valores enviados
    });
    onClose(); // Close modal on submit
  };

  if (loading) {
    return <div>Cargando...</div>;
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {" "}
      {/* Formulario con espaciado vertical */}
      <div className="grid grid-cols-1 gap-4">
        {" "}
        {/* Grid para los campos */}
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Nombre del Item
          </label>
          <input
            type="text"
            id="name"
            value={name}
            onChange={(e) => setName(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Descripción
          </label>
          <textarea /* Usamos textarea para la descripción */
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="price"
            className="block text-sm font-medium text-gray-700"
          >
            Precio
          </label>
          <input
            type="number"
            id="price"
            value={price}
            onChange={(e) => setPrice(Number(e.target.value))}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="imageUrl"
            className="block text-sm font-medium text-gray-700"
          >
            URL de Imagen
          </label>
          <input
            type="url"
            id="imageUrl"
            value={imageUrl}
            onChange={(e) => setImageUrl(e.target.value)}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="recommendation"
            className="block text-sm font-medium text-gray-700"
          >
            Recomendaciones (Opcional)
          </label>
          <input
            type="text"
            id="recommendation"
            value={recommendation}
            onChange={(e) => setRecommendation(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="observations"
            className="block text-sm font-medium text-gray-700"
          >
            Observaciones (Opcional)
          </label>
          <input
            type="text"
            id="observations"
            value={observations}
            onChange={(e) => setObservations(e.target.value)}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          />
        </div>
        {/* Nuevo campo para el estado de disponibilidad */}
        <div>
          <label
            htmlFor="availabilityStatus"
            className="block text-sm font-medium text-gray-700"
          >
            Estado de Disponibilidad
          </label>
          <select
            id="availabilityStatus"
            value={availabilityStatus}
            onChange={(e) =>
              setAvailabilityStatus(
                e.target.value as
                  | "disponible"
                  | "noDisponibleMomento"
                  | "noDisponibleLargoPlazo"
              )
            }
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
          >
            <option value="disponible">Disponible</option>
            <option value="noDisponibleMomento">
              No disponible en el momento
            </option>
            <option value="noDisponibleLargoPlazo">Ya no disponible</option>
          </select>
        </div>
      </div>
      <div className="flex items-center justify-between mt-4">
        {" "}
        {/* Contenedor para checkbox y botones */}
        <div className="flex items-center">
          <input
            type="checkbox"
            id="available"
            className="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500"
            checked={available}
            onChange={(e) => setAvailable(e.target.checked)}
          />
          <label htmlFor="available" className="ml-2 text-sm text-gray-700">
            Disponible (Visible en Menu)
          </label>
        </div>
        <div className="space-x-2">
          <button
            className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            onClick={onClose}
            type="button" /* Importante: type="button" para evitar submit del form al cancelar */
          >
            Cancelar
          </button>
          <button
            type="submit"
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            {initialValues?.id ? "Guardar" : "Agregar"}
          </button>
        </div>
      </div>
    </form>
  );
};

export default MenuForm;

/* Fin src\components\menu\MenuForm.tsx */

/* Inicio src\components\menu\MenuItem.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../context/AppContext";

interface MenuItemProps {
  item: MenuItemType;
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => void;
}

const MenuItem: React.FC<MenuItemProps> = ({ item, onEdit, onDelete }) => {
  // Función para determinar el color del badge según el estado de disponibilidad
  const getStatusBadgeClass = () => {
    switch (item.availabilityStatus) {
      case "noDisponibleMomento":
        return "bg-yellow-500 text-yellow-900"; // Amarillo para "No disponible por el momento"
      case "noDisponibleLargoPlazo":
        return "bg-red-500 text-red-900"; // Rojo para "No disponible a largo plazo"
      default:
        return "bg-green-500 text-green-900"; // Verde para "Disponible"
    }
  };

  const statusBadgeClass = `inline-block ${getStatusBadgeClass()} rounded-full px-3 py-1 text-sm font-semibold mr-2 mb-2`;

  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  return (
    <div className="max-w-sm rounded overflow-hidden shadow-lg">
      {" "}
      {/* Card principal con Tailwind */}
      <img className="w-full" src={item.imageUrl} alt={item.name} />{" "}
      {/* Imagen responsive */}
      <div className="px-6 py-4">
        {" "}
        {/* Contenido principal card */}
        <div className="font-bold text-xl mb-2 flex justify-between items-center">
          {item.name}
          <span className={statusBadgeClass}>
            {item.availabilityStatus === "disponible"
              ? "Disponible"
              : item.availabilityStatus === "noDisponibleMomento"
              ? "No Disponible Ahora"
              : "No Disponible"}
          </span>
        </div>{" "}
        {/* Nombre del item */}
        <p className="text-gray-700 text-base">{item.description}</p>{" "}
        {/* Descripción */}
        <p className="text-gray-700 text-lg mt-2">
          Precio: {formatPriceCOP(item.price)}
        </p>{" "}
        {/* Precio */}
        <div>
          {item.recommendation && (
            <p className="text-gray-600 text-sm mt-1">
              Recomendaciones: {item.recommendation}
            </p>
          )}
          {item.observations && (
            <p className="text-gray-600 text-sm mt-1">
              Observaciones: {item.observations}
            </p>
          )}
        </div>
      </div>
      <div className="px-6 py-4 flex justify-end space-x-2">
        {" "}
        {/* Contenedor acciones */}
        <button
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => onEdit(item)}
        >
          Editar
        </button>
        <button
          className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          onClick={() => onDelete(item)}
        >
          Eliminar
        </button>
      </div>
    </div>
  );
};

export default MenuItem;

/* Fin src\components\menu\MenuItem.tsx */

/* Inicio src\components\menu\MenuList.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../context/AppContext";
import MenuItemComponent from "./MenuItem";

interface MenuListProps {
  menu: MenuItemType[];
  onEdit: (item: MenuItemType) => void;
  onDelete: (item: MenuItemType) => Promise<void>;
}

const MenuList: React.FC<MenuListProps> = ({ menu, onEdit, onDelete }) => {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {" "}
      {/* Grid responsive para la lista */}
      {menu.map((item) => (
        <MenuItemComponent
          key={item.id}
          item={item}
          onEdit={onEdit}
          onDelete={onDelete}
        />
      ))}
    </div>
  );
};

export default MenuList;

/* Fin src\components\menu\MenuList.tsx */

/* Inicio src\components\menu\MenuModal.tsx */
// src/components/menu/MenuModal.tsx
import React, { useState } from 'react'
import { MenuItem } from '../../context/AppContext'

interface MenuModalProps {
  open: boolean
  onClose: () => void
  initialValues?: Partial<MenuItem>
  onSubmit: (values: Partial<MenuItem>) => void | Promise<void>
}

const MenuModal: React.FC<MenuModalProps> = ({ open, onClose, initialValues, onSubmit }) => {
  const [localValues, setLocalValues] = useState<Partial<MenuItem>>(initialValues ?? {})

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setLocalValues((prev) => ({ ...prev, [name]: value }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await onSubmit(localValues)
    onClose()
  }

  if (!open) return null

  return (
    <div
      style={{
        position: 'fixed',
        inset: 0,
        backgroundColor: 'rgba(0,0,0,0.5)',
      }}
      onClick={onClose}
    >
      <div
        style={{
          backgroundColor: '#fff',
          maxWidth: 500,
          margin: '50px auto',
          padding: 20,
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <h3>Editar / Agregar ítem al Menú</h3>
        <form onSubmit={void handleSubmit}>
          <div style={{ marginBottom: '1rem' }}>
            <label>Nombre:</label>
            <input name="name" type="text" value={localValues.name ?? ''} onChange={handleChange} />
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label>Descripción:</label>
            <textarea
              name="description"
              value={localValues.description ?? ''}
              onChange={handleChange}
            />
          </div>
          {/* ... otros campos price, imageUrl, etc. */}

          <div style={{ marginTop: '1rem' }}>
            <button type="button" onClick={onClose}>
              Cancelar
            </button>
            <button type="submit" style={{ marginLeft: 8 }}>
              Guardar
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default MenuModal

/* Fin src\components\menu\MenuModal.tsx */

/* Inicio src\components\menu\NameModal.tsx */
/** src/components/menu/NameModal.tsx **/
import React, { FormEvent, useState } from 'react'

interface NameModalProps {
  open: boolean
  onClose: () => void
  currentName?: string
  onSubmit: (name: string) => void
}

const NameModal: React.FC<NameModalProps> = ({ open, onClose, currentName = '', onSubmit }) => {
  const [tempName, setTempName] = useState<string>(currentName)

  if (!open) return null

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault()
    // Llamamos al onSubmit con el contenido (si está vacío, que sea el currentName anterior)
    onSubmit(tempName.trim() || currentName)
    onClose()
  }

  return (
    <div
      className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
      onClick={onClose}
    >
      <div
        className="bg-white rounded p-6 max-w-sm w-full relative"
        onClick={(e) => e.stopPropagation()}
      >
        <h2 className="text-xl font-bold mb-4 text-center">¿Cuál es tu nombre?</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="text"
            placeholder="Déjalo vacío si prefieres 'Persona X'"
            className="border border-gray-300 rounded w-full p-2"
            value={tempName}
            onChange={(e) => setTempName(e.target.value)}
          />
          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300"
            >
              Cancelar
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Aceptar
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default NameModal

/* Fin src\components\menu\NameModal.tsx */

/* Inicio src\components\menu\partials\OrderReview.tsx */
/* src/components/menu/partials/OrderReview.tsx */
import { Typography } from '@mui/material'
import React from 'react'
import { MenuItem as MenuItemType } from '../../../context/AppContext'
import PedidoForm from '../../forms/PedidoForm'
import { Person, SharedOrderItem } from '../GroupOrderPage'

interface OrderReviewProps {
  people: Person[]
  sharedOrderItems: SharedOrderItem[]
  menu: MenuItemType[]
  onClosePedidoForm: () => void
  calculateSharedSubtotal: () => number
  calculateSubtotal: (personItems: { id: string; quantity: number }[]) => number
  isOrderOwner: boolean
  onOrderPlaced: () => void
  orderPlaced: boolean
  showPricesToAll?: boolean
  onToggleShowPrices: () => void
}

const OrderReview: React.FC<OrderReviewProps> = ({
  people,
  sharedOrderItems,
  menu,
  onClosePedidoForm,
  calculateSharedSubtotal,
  calculateSubtotal,
  isOrderOwner,
  onOrderPlaced,
  orderPlaced,
  showPricesToAll = false,
  onToggleShowPrices,
}) => {
  // Formatear a moneda
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    })
  }

  // Calculamos totales usando las funciones pasadas por props
  const totalShared = calculateSharedSubtotal()
  const totalIndividuals = people.reduce((sum, person) => {
    return sum + calculateSubtotal(person.items)
  }, 0)
  const totalOrderAmount = totalShared + totalIndividuals

  // Quién ve los precios
  const canViewPrices = isOrderOwner || showPricesToAll

  const handlePedidoFormClose = () => {
    onClosePedidoForm()
    onOrderPlaced() // Indica que se confirmó el pedido
  }

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-xl shadow-md animate-fade-in">
      <h2 className="text-2xl font-bold text-gray-900 mb-6 text-center text-indigo-700">
        Revisión Detallada del Pedido Grupal 🧐
      </h2>

      {/* Toggle para mostrar/ocultar precios al resto, solo si orderPlaced y soy owner */}
      {isOrderOwner && orderPlaced && (
        <div className="flex justify-center mb-6">
          <label className="flex items-center cursor-pointer">
            <input
              type="checkbox"
              className="form-checkbox h-5 w-5 text-indigo-600"
              checked={showPricesToAll}
              onChange={onToggleShowPrices}
            />
            <span className="ml-2 text-gray-800">Mostrar Precios a Todos</span>
          </label>
        </div>
      )}

      {/* Items Compartidos */}
      {sharedOrderItems && sharedOrderItems.length > 0 && (
        <div className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-50">
          <h3 className="text-lg font-semibold text-gray-900 mb-3 text-indigo-600">
            Detalle del Pedido Compartido 🤝
          </h3>
          <ul>
            {sharedOrderItems.map((sharedItem) => {
              const menuItem = menu.find((m) => m.id === sharedItem.itemId)
              if (!menuItem) return null
              const itemTotal = menuItem.price * sharedItem.quantity
              return (
                <li key={sharedItem.itemId} className="py-2 flex items-center justify-between">
                  <div className="flex items-center">
                    <span className="mr-2">{menuItem.name}</span>
                    <span className="text-sm text-gray-500">x {sharedItem.quantity}</span>
                  </div>
                  {canViewPrices && (
                    <span className="w-12 text-right">{formatPriceCOP(itemTotal)}</span>
                  )}
                </li>
              )
            })}
          </ul>
          {canViewPrices && (
            <div className="font-semibold text-right mt-2">
              Subtotal Compartido:
              <span className="text-indigo-700 ml-1">{formatPriceCOP(totalShared)}</span>
            </div>
          )}
        </div>
      )}

      {/* Items de cada persona */}
      {people.map((person) => {
        const personSubtotal = calculateSubtotal(person.items)
        return (
          <div key={person.personIndex} className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-50">
            <h3 className="text-lg font-semibold text-gray-900 mb-3 text-indigo-600">
              Detalle del Pedido Individual - {person.name} 👤
            </h3>
            <ul>
              {person.items.map((it) => {
                const menuItem = menu.find((m) => m.id === it.id)
                if (!menuItem) return null
                const itemTotal = menuItem.price * it.quantity
                return (
                  <li key={it.id} className="py-2 flex items-center justify-between">
                    <div className="flex items-center">
                      <span className="mr-2">{menuItem.name}</span>
                      <span className="text-sm text-gray-500">x {it.quantity}</span>
                    </div>
                    {canViewPrices && (
                      <span className="w-12 text-right">{formatPriceCOP(itemTotal)}</span>
                    )}
                  </li>
                )
              })}
            </ul>
            {canViewPrices && (
              <div className="font-semibold text-right mt-2">
                Subtotal Individual:
                <span className="text-indigo-700 ml-1">{formatPriceCOP(personSubtotal)}</span>
              </div>
            )}
          </div>
        )
      })}

      {/* Totales finales */}
      {canViewPrices && (
        <div className="mb-6 p-4 border rounded-lg shadow-sm bg-gray-100">
          <h3 className="text-xl font-semibold text-gray-900 mb-3 text-indigo-600 text-center">
            Resumen del Pedido Grupal Completo 💰
          </h3>
          <div className="flex justify-between items-center">
            <div className="font-semibold text-gray-700">
              <Typography>Subtotal Compartido:</Typography>
              {people.map((person) => (
                <Typography key={person.personIndex}>Subtotal {person.name}:</Typography>
              ))}
              <Typography className="font-bold mt-2">Total del Pedido:</Typography>
            </div>
            <div className="text-right font-semibold text-xl text-indigo-700">
              <Typography>{formatPriceCOP(totalShared)}</Typography>
              {people.map((person) => (
                <Typography key={person.personIndex}>
                  {formatPriceCOP(calculateSubtotal(person.items))}
                </Typography>
              ))}
              <Typography className="font-bold mt-2">{formatPriceCOP(totalOrderAmount)}</Typography>
            </div>
          </div>
        </div>
      )}

      {/* Si no se ha colocado el pedido, renderizar el form */}
      {!orderPlaced && (
        <PedidoForm
          onClose={handlePedidoFormClose}
          people={people}
          sharedOrderItems={sharedOrderItems}
        />
      )}
      {orderPlaced && (
        <div className="text-center mt-6">
          <Typography variant="h6" className="text-green-600">
            ¡Pedido realizado con éxito!
          </Typography>
        </div>
      )}
    </div>
  )
}

export default OrderReview

/* Fin src\components\menu\partials\OrderReview.tsx */

/* Inicio src\components\menu\partials\PeopleSelection.tsx */
import React from "react";
import { Person } from "../GroupOrderPage";

interface PeopleSelectionProps {
  numPeople: number;
  people: Person[];
  onNumPeopleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  onPersonNameChange: (index: number, name: string) => void;
  onStartOrder: () => void;
}

const PeopleSelection: React.FC<PeopleSelectionProps> = ({
  numPeople,
  people,
  onNumPeopleChange,
  onPersonNameChange,
  onStartOrder,
}) => {
  return (
    <div className="mb-8 text-center">
      <h2 className="text-xl font-semibold text-gray-800 mb-4">
        ¿Cuántos son hoy?
      </h2>
      <div className="flex flex-col items-center space-y-4">
        <div className="flex items-center space-x-4">
          <label
            htmlFor="numPeople"
            className="block text-gray-700 text-sm font-bold"
          >
            Somos:
          </label>
          <input
            type="number"
            id="numPeople"
            value={numPeople}
            onChange={onNumPeopleChange}
            min="1"
            className="shadow appearance-none border rounded w-20 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-center"
          />
          <span className="text-gray-700 text-sm font-bold">Personas</span>
        </div>
        {Array.from({ length: numPeople }).map((_, index) => (
          <input
            key={index}
            type="text"
            placeholder={`Nombre Persona ${index + 1}`}
            className="shadow appearance-none border rounded w-full max-w-sm py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            value={people[index]?.name || ""}
            onChange={(e) => onPersonNameChange(index, e.target.value)}
          />
        ))}
      </div>

      <button
        className="mt-6 bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-3 px-6 rounded-xl focus:outline-none focus:shadow-outline transition-colors duration-300"
        onClick={onStartOrder}
      >
        ¡A Pedir! 🚀
      </button>
    </div>
  );
};
export default PeopleSelection;
/* Fin src\components\menu\partials\PeopleSelection.tsx */

/* Inicio src\components\menu\partials\PersonOrder.tsx */
/* Inicio src\components\menu\partials\PersonOrder.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../../context/AppContext";
import { Person } from "../GroupOrderPage"; // Import the Person interface from GroupOrderPage

interface PersonOrderProps {
  person: Person; // Use the imported Person interface here
  index: number;
  menuCategories: { [category: string]: MenuItemType[] };
  menu: MenuItemType[];
  onAddItemToPerson: (personIndex: number, item: MenuItemType) => void;
  onPersonOrderItemQuantityChange: (
    personIndex: number,
    itemId: string,
    quantity: number
  ) => void;
  onRemoveItemFromPerson: (personIndex: number, itemId: string) => void;
  calculateSubtotal: (
    personItems: { id: string; quantity: number }[]
  ) => number;
  personOrderSummaryRef: React.RefObject<HTMLDivElement>;
  activeTab: string;
  onPersonFinishedOrder: (personIndex: number) => void;
  isFinished: boolean;
  personLocked: boolean; // Prop to indicate if the tab is locked
  isCurrentUserTab: boolean; // Prop to check if it's the current user's tab
  personIndex: number;
  disabled?: boolean; // Prop to disable interactions
}

const PersonOrder: React.FC<PersonOrderProps> = ({
  person,
  index,
  menuCategories,
  menu,
  onAddItemToPerson,
  onPersonOrderItemQuantityChange,
  onRemoveItemFromPerson,
  calculateSubtotal,
  personOrderSummaryRef,
  onPersonFinishedOrder,
  isFinished,
  personLocked,
  isCurrentUserTab,
  personIndex,
  disabled = false, // Default to false
}) => {
  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  const isControlEnabled = (!personLocked || isCurrentUserTab) && !disabled; // Add disabled prop check

  return (
    <div key={person.personIndex} className="mb-8" ref={personOrderSummaryRef}>
      <div
        className={`sticky top-16 bg-white p-4 shadow-md z-20 rounded-md transition-transform duration-200 ease-out transform translate-y-0 hover:translate-y-[-2px] ring-2 ring-indigo-500 ring-opacity-50 hover:ring-opacity-100`}
      >
        <h2 className="text-xl font-semibold text-gray-900 mb-4 text-center">
          Pedido de {person.name || `Persona ${index + 1}`} 😋
          {personLocked && !isCurrentUserTab && (
            <span className="ml-2 text-red-500">🔒 (Viendo)</span>
          )}
        </h2>
        <ul className="mb-4">
          {person.items.map((it) => {
            const menuItem = menu.find((m) => m.id === it.id);
            return menuItem ? (
              <li
                key={it.id} // Added key prop here
                className="flex justify-between items-center py-2 border-b border-gray-200"
              >
                <span className="flex-1 min-w-0">{menuItem.name}</span>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() =>
                      onPersonOrderItemQuantityChange(
                        personIndex,
                        it.id,
                        it.quantity - 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={!isControlEnabled}
                  >
                    -
                  </button>
                  <span className="w-6 text-center">{it.quantity}</span>
                  <button
                    onClick={() =>
                      onPersonOrderItemQuantityChange(
                        personIndex,
                        it.id,
                        it.quantity + 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={!isControlEnabled}
                  >
                    +
                  </button>
                  <button
                    onClick={() => onRemoveItemFromPerson(personIndex, it.id)}
                    className="text-red-500 hover:text-red-700 transition-colors duration-200"
                    disabled={!isControlEnabled}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth="1.5"
                      stroke="currentColor"
                      className="w-5 h-5"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z"
                      />
                    </svg>
                  </button>
                </div>
                <span className="w-12 text-right">
                  {formatPriceCOP(menuItem.price * it.quantity)}
                </span>
              </li>
            ) : null;
          })}
          {person.items.length > 0 && (
            <li className="font-semibold text-right mt-2">
              Subtotal:{" "}
              <span className="text-indigo-700">
                {formatPriceCOP(calculateSubtotal(person.items))}
              </span>
            </li>
          )}
        </ul>
        <div className="flex justify-end">
          {" "}
          {/* Container for button at the bottom */}
          {!isFinished && (
            <button
              onClick={() => onPersonFinishedOrder(personIndex)}
              className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
              disabled={!isControlEnabled || isFinished} // Disable if PedidoForm is open or already finished
            >
              He Terminado!
            </button>
          )}
          {isFinished && (
            <span className="text-green-600 font-semibold">
              ¡Pedido Terminado! ✅
            </span>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {Object.entries(menuCategories).map(([categoryName, items]) => (
          <div
            key={categoryName}
            className="transition-all duration-300 transform hover:scale-105"
          >
            <h3 className="font-bold text-lg text-gray-900 mb-2 text-indigo-500">
              {categoryName}
            </h3>
            <div className="flex flex-col space-y-2">
              {items.map(
                (
                  menuItem // Changed parameter name to menuItem here
                ) => (
                  <button
                    key={menuItem.id}
                    disabled={
                      menuItem.availabilityStatus !== "disponible" ||
                      !isControlEnabled
                    }
                    className={`bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-left transition-colors duration-300 ${
                      menuItem.availabilityStatus !== "disponible"
                        ? "opacity-50 cursor-not-allowed line-through pointer-events-none"
                        : ""
                    }`}
                    onClick={() => {
                      console.log(
                        "PersonOrder - onAddItemToPerson CALL",
                        personIndex,
                        menuItem
                      ); // ADD THIS LOG - Log in PersonOrder.tsx
                      onAddItemToPerson(personIndex, menuItem);
                    }}
                  >
                    {menuItem.name} - {formatPriceCOP(menuItem.price)}{" "}
                    {/* Use menuItem here */}
                    {menuItem.availabilityStatus === "noDisponibleMomento" && (
                      <span className="ml-2 text-yellow-500 font-normal italic">
                        (No disponible ahora)
                      </span>
                    )}
                    {menuItem.availabilityStatus ===
                      "noDisponibleLargoPlazo" && (
                      <span className="ml-2 text-red-500 font-normal italic">
                        (Ya no disponible)
                      </span>
                    )}
                  </button>
                )
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PersonOrder;

/* Fin src\components\menu\partials\PersonOrder.tsx */

/* Fin src\components\menu\partials\PersonOrder.tsx */

/* Inicio src\components\menu\partials\SharedOrder.tsx */
/* Inicio src\components\menu\partials\SharedOrder.tsx */
import React from "react";
import { MenuItem as MenuItemType } from "../../../context/AppContext";

interface SharedOrderProps {
  menuCategories: { [category: string]: MenuItemType[] };
  sharedOrderItems: { itemId: string; quantity: number; personIds: string[] }[];
  onAddToSharedOrder: (item: MenuItemType) => void;
  onSharedOrderItemQuantityChange: (itemId: string, quantity: number) => void;
  onRemoveSharedOrderItem: (itemId: string) => void;
  calculateSharedSubtotal: () => number;
  sharedOrderSummaryRef: React.RefObject<HTMLDivElement>;
  activeTab: string;
  menu: MenuItemType[];
  disabled?: boolean; // Prop to disable interactions
}

const SharedOrder: React.FC<SharedOrderProps> = ({
  menuCategories,
  sharedOrderItems,
  onAddToSharedOrder,
  onSharedOrderItemQuantityChange,
  onRemoveSharedOrderItem,
  calculateSharedSubtotal,
  sharedOrderSummaryRef,
  menu,
  disabled = false, // Default to false
}) => {
  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0, // Remove cents if whole number
      maximumFractionDigits: 0,
    });
  };

  return (
    <div className="mb-8">
      <div
        className="sticky top-16 bg-white p-4 shadow-md z-20 rounded-md transition-transform duration-200 ease-out transform translate-y-0 hover:translate-y-[-2px] ring-2 ring-indigo-500 ring-opacity-50 hover:ring-opacity-100"
        ref={sharedOrderSummaryRef}
      >
        <h2 className="text-2xl font-bold text-gray-900 mb-4 text-center">
          Pedido para Compartir 🤝
        </h2>
        <ul className="mb-4">
          {sharedOrderItems.map((sharedItem) => {
            const menuItem = menu.find((m) => m.id === sharedItem.itemId);
            return menuItem ? (
              <li
                key={sharedItem.itemId}
                className="flex justify-between items-center py-2 border-b border-gray-200"
              >
                <span className="flex-1 min-w-0">{menuItem.name}</span>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() =>
                      onSharedOrderItemQuantityChange(
                        sharedItem.itemId,
                        sharedItem.quantity - 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={disabled} // Disable button if prop disabled is true
                  >
                    -
                  </button>
                  <span className="w-6 text-center">{sharedItem.quantity}</span>
                  <button
                    onClick={() =>
                      onSharedOrderItemQuantityChange(
                        sharedItem.itemId,
                        sharedItem.quantity + 1
                      )
                    }
                    className="p-1 rounded-full hover:bg-gray-200 transition-colors duration-200"
                    disabled={disabled} // Disable button if prop disabled is true
                  >
                    +
                  </button>
                  <button
                    onClick={() => onRemoveSharedOrderItem(sharedItem.itemId)}
                    className="text-red-500 hover:text-red-700 transition-colors duration-200"
                    disabled={disabled} // Disable button if prop disabled is true
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      strokeWidth="1.5"
                      stroke="currentColor"
                      className="w-5 h-5"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z"
                      />
                    </svg>
                  </button>
                </div>
                <span className="w-12 text-right">
                  {formatPriceCOP(menuItem.price * sharedItem.quantity)}
                </span>
              </li>
            ) : null;
          })}
          {sharedOrderItems.length > 0 && (
            <li className="font-semibold text-right mt-2">
              Subtotal:{" "}
              <span className="text-indigo-700">
                {formatPriceCOP(calculateSharedSubtotal())}
              </span>
            </li>
          )}
        </ul>
      </div>
      <p className="text-gray-600 mb-4 text-center mt-4">
        ¿Algo más para compartir? ¡Elige del menú!
      </p>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
        {Object.entries(menuCategories).map(([categoryName, items]) => (
          <div
            key={categoryName}
            className="transition-all duration-300 transform hover:scale-105"
          >
            <h3 className="font-bold text-lg text-gray-900 mb-2 text-indigo-500">
              {categoryName}
            </h3>
            <div className="flex flex-col space-y-2">
              {items.map((item) => (
                <button
                  key={item.id}
                  disabled={
                    item.availabilityStatus !== "disponible" || disabled
                  } // Disable button if prop disabled is true or item not available
                  className={`bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-left transition-colors duration-300 ${
                    item.availabilityStatus !== "disponible"
                      ? "opacity-50 cursor-not-allowed line-through pointer-events-none"
                      : ""
                  }`}
                  onClick={
                    item.availabilityStatus === "disponible" && !disabled // Only allow click if available and not disabled
                      ? () => onAddToSharedOrder(item)
                      : undefined
                  }
                >
                  {item.name} - {formatPriceCOP(item.price)}
                  {item.availabilityStatus === "noDisponibleMomento" && (
                    <span className="ml-2 text-yellow-500 font-normal italic">
                      (No disponible ahora)
                    </span>
                  )}
                  {item.availabilityStatus === "noDisponibleLargoPlazo" && (
                    <span className="ml-2 text-red-500 font-normal italic">
                      (Ya no disponible)
                    </span>
                  )}
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SharedOrder;

/* Fin src\components\menu\partials\SharedOrder.tsx */

/* Fin src\components\menu\partials\SharedOrder.tsx */

/* Inicio src\components\menu\PersonMenuModal.tsx */
// src/components/forms/PedidoForm.tsx
import { Timestamp, addDoc, collection } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { db } from '../../utils/firebase'

interface PedidoFormProps {
  onClose: () => void
  people?: {
    id: string
    name: string
    items: { id: string; quantity: number }[]
  }[]
  sharedOrderItems?: {
    itemId: string
    quantity: number
    personIds: string[]
  }[] // Prop para items compartidos
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people, sharedOrderItems }) => {
  const { menu } = useMenu()
  const { user, addPoints } = useAuth()

  const [items, setItems] = useState<{ id: string; quantity: number; assignedTo: string }[]>([])
  const [peopleOrder, setPeopleOrder] = useState<{ id: string; name: string }[]>([])
  const [sede, setSede] = useState('')
  const [deliveryFee, setDeliveryFee] = useState(0)
  const [deliveryIncluded, setDeliveryIncluded] = useState(true)
  const [paymentMethod, setPaymentMethod] = useState('contraentrega')

  useEffect(() => {
    if (people) {
      setPeopleOrder(people.map((person) => ({ id: person.id, name: person.name })))
      const newItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        })),
      )
      setItems(newItems)
    }
  }, [people])

  // Simulación de sedes disponibles (puedes obtenerlas de Firestore)
  const sedesDisponibles = ['Sede Norte', 'Sede Sur', 'Sede Centro']

  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0])
    }
  }, [sedesDisponibles])

  const calculateTotal = () => {
    let total = 0
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    if (sharedOrderItems) {
      // Sumar el costo de items compartidos
      sharedOrderItems.forEach((sharedItem) => {
        const menuItem = menu.find((m) => m.id === sharedItem.itemId)
        if (menuItem) {
          total += menuItem.price * sharedItem.personIds.length // Precio por cada persona que lo pide
        }
      })
    }
    return total + deliveryFee
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    if (!user) return

    try {
      const total = calculateTotal()
      const orderId = uuidv4()
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede: sede,
        status: 'pendiente',
        total: total,
        deliveryFee: deliveryFee,
        deliveryIncluded: deliveryIncluded,
        paymentMethod: paymentMethod,
        orderDate: Timestamp.now(),
        orderId: orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              // Incluir sharedOrderItems en los datos del pedido
              itemId: si.itemId,
              personIds: si.personIds,
            }))
          : [],
      }

      await addDoc(collection(db, 'pedidos'), orderData)
      handlePaymentSuccess()
    } catch (error) {
      console.error('Error al agregar el pedido:', error)
    }
  }

  const handlePaymentSuccess = async () => {
    await addPoints()
    alert('Pedido realizado con éxito y puntos sumados.')
    onClose()
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label htmlFor="sede" className="block text-sm font-medium text-gray-700">
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="deliveryFee" className="block text-sm font-medium text-gray-700">
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label htmlFor="deliveryIncluded" className="font-medium text-gray-700">
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Realizar Pedido2
        </button>
      </div>
    </form>
  )
}

export default PedidoForm

/* Fin src\components\menu\PersonMenuModal.tsx */

/* Inicio src\components\payment\PaymentForm.tsx */
import { Alert, Button } from "@mui/material";
import React, { useEffect, useState } from "react";
import {
  createCheckoutSession,
  handlePaymentNotification,
  processPayment,
} from "../../payment/payment";

interface PaymentFormProps {
  amount: number;
  orderId: string;
  onSuccess: () => void;
}
const PaymentForm: React.FC<PaymentFormProps> = ({
  amount,
  onSuccess,
  orderId,
}) => {
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [publicKey, setPublicKey] = useState<string | null>(null);
  const [paymentResult] = useState<string | null>(null);
  useEffect(() => {
    const loadPublicKey = async () => {
      setPublicKey("YOUR_STRIPE_PUBLIC_KEY");
    };
    loadPublicKey();
  }, []);

  const handlePayment = async () => {
    setLoading(true);
    setError(null);
    try {
      if (!publicKey) {
        setError("Clave publica no encontrada");
        setLoading(false);
        setTimeout(() => setError(null), 5000);
        return;
      }
      const sessionId = await createCheckoutSession(amount, orderId);
      await processPayment(sessionId, publicKey);
      const response = await handlePaymentNotification(sessionId);
      if (response) {
        setLoading(false);
        onSuccess();
      } else {
        throw new Error("Error al procesar el pago");
      }
    } catch (error) {
      setError(error.message);
      setLoading(false);
      setTimeout(() => setError(null), 5000);
    }
  };

  return (
    <>
      {error && <Alert severity="error">{error}</Alert>}
      {paymentResult === "success" && (
        <Alert severity="success">Pago Exitoso</Alert>
      )}
      {paymentResult === "failure" && (
        <Alert severity="error">Pago Fallido</Alert>
      )}
      {paymentResult === "pending" && (
        <Alert severity="info">Pago Pendiente</Alert>
      )}
      <Button
        variant="contained"
        color="primary"
        onClick={handlePayment}
        disabled={loading}
      >
        {loading ? "Procesando" : "Pagar"}
      </Button>
    </>
  );
};
export default PaymentForm;

/* Fin src\components\payment\PaymentForm.tsx */

/* Inicio src\components\pedidos\PedidoForm.tsx */
// src/components/pedidos/PedidoForm.tsx
import { Timestamp, addDoc, collection } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useAuth } from '../../hooks/useAuth'
import { useMenu } from '../../hooks/useMenu'
import { db } from '../../utils/firebase'

/** Mismo tipo que uses en GroupOrderPage */
interface Person {
  personIndex: number
  userId: string | null
  name: string
  items: { id: string; quantity: number }[]
  locked?: boolean
  finished?: boolean
}

interface SharedOrderItem {
  itemId: string
  quantity: number
  personIds: string[]
}

interface PedidoFormProps {
  onClose: () => void
  people?: Person[] // Aquí usamos la interface Person
  sharedOrderItems?: SharedOrderItem[]
}

const PedidoForm: React.FC<PedidoFormProps> = ({ onClose, people, sharedOrderItems }) => {
  const { menu } = useMenu()
  const { user, addPoints } = useAuth()
  const [items, setItems] = useState<
    {
      id: string
      quantity: number
      assignedTo: string
    }[]
  >([])

  const [peopleOrder, setPeopleOrder] = useState<{ userId: string | null; name: string }[]>([])
  const [sede, setSede] = useState('')
  const [deliveryFee, setDeliveryFee] = useState(0)
  const [deliveryIncluded, setDeliveryIncluded] = useState(true)
  const [paymentMethod, setPaymentMethod] = useState('contraentrega')

  useEffect(() => {
    // Convertimos people en un estado con 'peopleOrder'
    if (people) {
      const mapped = people.map((p) => ({
        userId: p.userId,
        name: p.name,
      }))
      setPeopleOrder(mapped)

      // Flatten person items
      const personItems = people.flatMap((person) =>
        person.items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: person.name,
        })),
      )
      setItems(personItems)
    }
  }, [people])

  useEffect(() => {
    if (sharedOrderItems) {
      // Flatten shared items -> assignedTo: 'Compartido'
      const sharedItemsForDisplay = sharedOrderItems.flatMap((sharedItem) =>
        Array(sharedItem.quantity)
          .fill(null)
          .map(() => ({
            id: sharedItem.itemId,
            quantity: 1,
            assignedTo: 'Compartido',
          })),
      )
      setItems((prev) => [...prev, ...sharedItemsForDisplay])
    }
  }, [sharedOrderItems])

  // Simulación sedes
  const sedesDisponibles = ['Sede Norte', 'Sede Sur', 'Sede Centro']
  useEffect(() => {
    if (sedesDisponibles.length === 1) {
      setSede(sedesDisponibles[0])
    }
  }, [sedesDisponibles])

  const calculateTotal = () => {
    let total = 0
    items.forEach((item) => {
      const menuItem = menu.find((m) => m.id === item.id)
      if (menuItem) {
        total += menuItem.price * item.quantity
      }
    })
    return total + deliveryFee
  }

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault()
    if (!user) return

    try {
      const total = calculateTotal()
      const orderId = uuidv4()
      const orderData = {
        userId: user.uid,
        items: items.map((item) => ({
          id: item.id,
          quantity: item.quantity,
          assignedTo: item.assignedTo,
        })),
        people: peopleOrder,
        sede,
        status: 'pendiente',
        total,
        deliveryFee,
        deliveryIncluded,
        paymentMethod,
        orderDate: Timestamp.now(),
        orderId,
        sharedItems: sharedOrderItems
          ? sharedOrderItems.map((si) => ({
              itemId: si.itemId,
              quantity: si.quantity,
              personIds: si.personIds,
            }))
          : [],
      }

      await addDoc(collection(db, 'pedidos'), orderData)
      void handlePaymentSuccess()
    } catch (error) {
      console.error('Error al agregar el pedido:', error)
    }
  }

  const handlePaymentSuccess = async () => {
    await addPoints()
    alert('Pedido realizado con éxito y puntos sumados.')
    onClose()
  }

  return (
    <form onSubmit={void handleSubmit} className="space-y-6">
      <h2 className="text-xl font-bold text-gray-900">Realizar Pedido</h2>
      <div>
        <label htmlFor="sede" className="block text-sm font-medium text-gray-700">
          Sede
        </label>
        <select
          id="sede"
          value={sede}
          onChange={(e) => setSede(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          {sedesDisponibles.map((sedeItem) => (
            <option key={sedeItem} value={sedeItem}>
              {sedeItem}
            </option>
          ))}
        </select>
      </div>
      <div>
        <label htmlFor="deliveryFee" className="block text-sm font-medium text-gray-700">
          Costo de Envío
        </label>
        <input
          type="number"
          id="deliveryFee"
          value={deliveryFee}
          onChange={(e) => setDeliveryFee(parseFloat(e.target.value))}
          required
          min="0"
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        />
      </div>
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="deliveryIncluded"
            name="deliveryIncluded"
            type="checkbox"
            checked={deliveryIncluded}
            onChange={(e) => setDeliveryIncluded(e.target.checked)}
            className="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 rounded"
          />
        </div>
        <div className="ml-2 text-sm">
          <label htmlFor="deliveryIncluded" className="font-medium text-gray-700">
            ¿El domicilio está incluido?
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="paymentMethod" className="block text-sm font-medium text-gray-700">
          Método de Pago
        </label>
        <select
          id="paymentMethod"
          value={paymentMethod}
          onChange={(e) => setPaymentMethod(e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
        >
          <option value="contraentrega">Contraentrega</option>
        </select>
      </div>
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
        >
          Realizar Pedido3
        </button>
      </div>
    </form>
  )
}

export default PedidoForm

/* Fin src\components\pedidos\PedidoForm.tsx */

/* Inicio src\components\pedidos\PedidoItem.tsx */
import React from "react";

const PedidoItem: React.FC = () => {
    return (
        <div>Pedido Item</div>
    )
}

export default PedidoItem;
/* Fin src\components\pedidos\PedidoItem.tsx */

/* Inicio src\components\pedidos\PedidoList.tsx */
/* Directorio: src\components\pedidos */
/* Inicio src\components\pedidos\PedidoList.tsx */
// src/components/pedidos/PedidoList.tsx
import {
  collection,
  doc,
  onSnapshot,
  query,
  updateDoc,
  where,
} from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { useAuth } from "../../hooks/useAuth";
import { useMenu } from "../../hooks/useMenu"; // Import useMenu hook
import { COLLECTIONS } from "../../utils/constants";
import { db } from "../../utils/firebase";

interface Pedido {
  id: string;
  userId: string;
  items: { id: string; quantity: number; assignedTo: string }[];
  people: { id: string; name: string }[];
  sede: string;
  status: string;
  total: number;
  deliveryFee: number;
  deliveryIncluded: boolean;
  paymentMethod: string;
  orderDate: Date;
  orderId: string;
  sharedItems?: {
    itemId: string;
    quantity: number;
    personIds: string[];
  }[];
}

const PedidoList: React.FC = () => {
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const { user, userRole } = useAuth();
  const { menu } = useMenu(); // Use useMenu hook to get menu data
  const [selectedStatus, setSelectedStatus] = useState("pendiente");
  const [openDetails, setOpenDetails] = useState(false);
  const [selectedPedidoDetails, setSelectedPedidoDetails] =
    useState<Pedido | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (!user) return;

    setLoading(true);
    let pedidosQuery = query(collection(db, COLLECTIONS.PEDIDOS));

    if (userRole === "client") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("userId", "==", user.uid)
      );
    } else if (userRole === "admin" || userRole === "encargado") {
      pedidosQuery = query(
        collection(db, COLLECTIONS.PEDIDOS),
        where("status", "==", selectedStatus)
      );
    }

    const unsubscribe = onSnapshot(pedidosQuery, (snapshot) => {
      const pedidosData = snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          userId: data.userId,
          items: data.items || [],
          people: data.people || [],
          sede: data.sede,
          status: data.status,
          total: data.total,
          deliveryFee: data.deliveryFee,
          deliveryIncluded: data.deliveryIncluded,
          paymentMethod: data.paymentMethod,
          orderDate: data.orderDate ? data.orderDate.toDate() : new Date(),
          orderId: data.orderId,
          sharedItems: data.sharedItems || [],
        } as Pedido;
      });
      setPedidos(pedidosData);
      setLoading(false);
    });

    return () => unsubscribe();
  }, [user, userRole, selectedStatus]);

  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedStatus(event.target.value);
  };

  const handleStatusUpdate = async (orderId: string, newStatus: string) => {
    try {
      await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), {
        status: newStatus,
      });
    } catch (error) {
      console.error(
        "Error updating order status:",
        (error as { message: string }).message
      );
    }
  };

  const handleOpenDetails = (order: Pedido) => {
    setSelectedPedidoDetails(order);
    setOpenDetails(true);
  };

  const handleCloseDetails = () => {
    setSelectedPedidoDetails(null);
    setOpenDetails(false);
  };

  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    if (typeof price === "number") {
      return price.toLocaleString("es-CO", {
        style: "currency",
        currency: "COP",
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
      });
    } else {
      return "N/A";
    }
  };

  const getStatusBadgeClass = (status: string) => {
    switch (status) {
      case "pendiente":
        return "bg-yellow-200 text-yellow-800";
      case "atendiendo":
        return "bg-blue-200 text-blue-800";
      case "preparando":
        return "bg-orange-200 text-orange-800";
      case "enviado":
        return "bg-green-200 text-green-800";
      default:
        return "bg-gray-200 text-gray-800";
    }
  };

  return (
    <div className="container mx-auto my-8 p-4">
      <h2 className="text-2xl font-bold text-gray-900 mb-4">
        Lista de Pedidos
      </h2>

      {userRole !== "client" && (
        <div className="mb-6">
          <label
            htmlFor="status-filter"
            className="block text-gray-700 text-sm font-bold mb-2"
          >
            Filtrar por estado:
          </label>
          <select
            id="status-filter"
            value={selectedStatus}
            onChange={handleStatusChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          >
            <option value="pendiente">Pendiente</option>
            <option value="atendiendo">Atendiendo</option>
            <option value="preparando">Preparando</option>
            <option value="enviado">Enviado</option>
          </select>
        </div>
      )}

      {loading ? (
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
          {pedidos.map((order) => (
            <div key={order.id} className="bg-white rounded-lg shadow-md p-4">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                Orden No. {order.orderId.substring(0, 8)}
              </h3>
              <div className="flex items-center mb-2">
                <span className="text-gray-700 mr-2">Estado:</span>
                <span
                  className={`inline-block px-2 py-1 font-semibold text-sm rounded-full ${getStatusBadgeClass(
                    order.status
                  )}`}
                >
                  {order.status}
                </span>
              </div>
              <p className="text-gray-700 mb-2">Sede: {order.sede}</p>
              <p className="text-gray-700 mb-2">
                Fecha: {order.orderDate.toLocaleDateString()}{" "}
                {order.orderDate.toLocaleTimeString()}
              </p>
              <p className="text-gray-700 mb-3 font-semibold">
                Total: {formatPriceCOP(order.total)}
              </p>

              <div className="flex justify-between">
                <button
                  onClick={() => handleOpenDetails(order)}
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline text-sm"
                >
                  Ver Detalles
                </button>
                {(userRole === "admin" || userRole === "encargado") && (
                  <div className="space-x-2">
                    <button
                      onClick={() => handleStatusUpdate(order.id, "atendiendo")}
                      disabled={order.status === "atendiendo"}
                      className="bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline text-xs"
                    >
                      Atender
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(order.id, "preparando")}
                      disabled={order.status === "preparando"}
                      className="bg-yellow-500 hover:bg-yellow-700 text-gray-800 font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline text-xs"
                    >
                      Preparar
                    </button>
                    <button
                      onClick={() => handleStatusUpdate(order.id, "enviado")}
                      disabled={order.status === "enviado"}
                      className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline text-xs"
                    >
                      Enviar
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      )}

      {openDetails && selectedPedidoDetails && (
        <div
          className="fixed z-50 inset-0 overflow-y-auto"
          aria-labelledby="modal-title"
          role="dialog"
          aria-modal="true"
        >
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div
              className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
              aria-hidden="true"
              onClick={handleCloseDetails}
            ></div>
            <span
              className="hidden sm:inline-block sm:align-middle sm:h-screen"
              aria-hidden="true"
            ></span>
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3
                  className="text-lg leading-6 font-medium text-gray-900"
                  id="modal-title"
                >
                  Detalle Completo de la Orden No.{" "}
                  {selectedPedidoDetails.orderId.substring(0, 8)}
                </h3>
                <div className="mt-4">
                  <div className="grid grid-cols-1 gap-4">
                    <div>
                      <p>
                        <strong>Order ID:</strong> {selectedPedidoDetails.id}
                      </p>
                      <p>
                        <strong>Estado:</strong>{" "}
                        <span
                          className={`inline-block px-2 py-1 font-semibold text-sm rounded-full ${getStatusBadgeClass(
                            selectedPedidoDetails.status
                          )}`}
                        >
                          {selectedPedidoDetails.status}
                        </span>
                      </p>
                      <p>
                        <strong>Total:</strong>{" "}
                        {formatPriceCOP(selectedPedidoDetails.total)}
                      </p>
                      <p>
                        <strong>Costo de Envío:</strong>{" "}
                        {formatPriceCOP(selectedPedidoDetails.deliveryFee)}
                      </p>
                      <p>
                        <strong>Método de Pago:</strong>{" "}
                        {selectedPedidoDetails.paymentMethod}
                      </p>
                      <p>
                        <strong>Domicilio Incluido:</strong>{" "}
                        {selectedPedidoDetails.deliveryIncluded ? "Sí" : "No"}
                      </p>
                      <p>
                        <strong>Sede:</strong> {selectedPedidoDetails.sede}
                      </p>
                      <p>
                        <strong>Fecha del Pedido:</strong>{" "}
                        {selectedPedidoDetails.orderDate.toLocaleString()}
                      </p>
                      <p>
                        <strong>Personas:</strong>{" "}
                        {selectedPedidoDetails.people
                          .map((p) => p.name)
                          .join(", ")}
                      </p>
                    </div>
                    <div>
                      <h4 className="font-semibold mb-2">
                        Pedidos por Persona:
                      </h4>
                      {selectedPedidoDetails.people.map((person) => (
                        <div
                          key={person.id}
                          className="mb-3 p-2 rounded border border-gray-200"
                        >
                          <h5 className="font-semibold">{person.name}</h5>
                          <ul className="list-disc pl-5">
                            {selectedPedidoDetails.items
                              .filter((item) => item.assignedTo === person.name)
                              .map((item, index) => {
                                const menuItem = menu.find(
                                  (menuItem) => menuItem.id === item.id
                                ); // Find menu item by id
                                return (
                                  <li key={index}>
                                    {menuItem
                                      ? menuItem.name
                                      : "Producto no encontrado"}{" "}
                                    (Cantidad: {item.quantity})
                                    {/* Display item name */}
                                  </li>
                                );
                              })}
                          </ul>
                        </div>
                      ))}
                      {selectedPedidoDetails.sharedItems &&
                        selectedPedidoDetails.sharedItems.length > 0 && (
                          <div className="mb-3 p-2 rounded border border-gray-200">
                            <h5 className="font-semibold">Pedido Compartido</h5>
                            <ul className="list-disc pl-5">
                              {selectedPedidoDetails.sharedItems.map(
                                (sharedItem, index) => {
                                  const menuItem = menu.find(
                                    (menuItem) =>
                                      menuItem.id === sharedItem.itemId
                                  ); // Find shared menu item by id
                                  return (
                                    <li key={index}>
                                      {menuItem
                                        ? menuItem.name
                                        : "Producto no encontrado"}{" "}
                                      (Cantidad Compartida:{" "}
                                      {sharedItem.quantity})
                                      {/* Display shared item name */}
                                    </li>
                                  );
                                }
                              )}
                            </ul>
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-gray-100 text-base font-medium text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                  onClick={handleCloseDetails}
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PedidoList;
/* Fin src\components\pedidos\PedidoList.tsx */

/* Fin src\components\pedidos\PedidoList.tsx */

/* Inicio src\components\splash\SplashScreen.tsx */
// src/components/splash/SplashScreen.tsx
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
// Importa el logo como una URL

import { useAuth } from '../../hooks/useAuth'
import './../../styles/SplashScreen.css' // Importa el archivo CSS de estilos

const SplashScreen: React.FC = () => {
  const [logoAnimation, setLogoAnimation] = useState(false)
  const [textAnimation, setTextAnimation] = useState(false)
  const [fadeOut, setFadeOut] = useState(false)
  const { user, loading } = useAuth()
  const navigate = useNavigate()

  useEffect(() => {
    // Inicia la animación del logo
    setLogoAnimation(true)

    // Después de que la animación del logo termine (0.8 segundo), inicia la del texto
    const logoTimeout = setTimeout(() => {
      setTextAnimation(true)
    }, 800)

    // Después de 2.2 segundos, inicia el fade out
    const fadeTimeout = setTimeout(() => {
      setFadeOut(true)
    }, 2200)

    // Después de que el fade out termine (0.8 segundos), redirige
    const redirectTimeout = setTimeout(() => {
      if (!loading) {
        navigate(user ? '/' : '/login')
      }
    }, 3000)

    // Limpia los timeouts para evitar problemas si el componente se desmonta
    return () => {
      clearTimeout(logoTimeout)
      clearTimeout(fadeTimeout)
      clearTimeout(redirectTimeout)
    }
  }, [user, loading, navigate])

  // Renderiza el splash screen
  return (
    <div className={`splash-screen ${fadeOut ? 'fade-out' : ''}`}>
      <div className="splash-content">
        <img
          src="/SrPol.png"
          alt="SrPol Logo"
          className={`splash-logo ${logoAnimation ? 'scale-up' : ''}`}
        />
        <div className={`splash-text ${textAnimation ? 'fade-in' : ''}`}>
          <h1 className="splash-title">SrPol</h1>
          <p className="splash-subtitle">Delicias a tu mesa</p>
        </div>
      </div>
    </div>
  )
}

export default SplashScreen

/* Fin src\components\splash\SplashScreen.tsx */

/* Inicio src\components\ui\Button.tsx */
/* src\components\ui\Button.tsx */
import React, { ButtonHTMLAttributes, ReactNode } from "react";

type ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {
  children: ReactNode;
  variant?: "primary" | "secondary" | "text" | "outlined" | "contained"; // Define variants if needed
  color?:
    | "primary"
    | "secondary"
    | "error"
    | "warning"
    | "info"
    | "success"
    | "inherit"; // Define colors if needed
};

const Button: React.FC<ButtonProps> = ({
  children,
  variant = "contained", // Default variant
  color = "primary", // Default color
  className,
  ...props
}) => {
  let buttonClasses =
    "font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50";

  // Color and variant styles (customize as needed)
  if (variant === "contained") {
    if (color === "primary") {
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    } else if (color === "secondary") {
      buttonClasses += " bg-red-500 hover:bg-red-700 text-white";
    } else if (color === "error") {
      buttonClasses += " bg-red-600 hover:bg-red-800 text-white";
    } else if (color === "warning") {
      buttonClasses += " bg-yellow-500 hover:bg-yellow-700 text-gray-800";
    } else if (color === "success") {
      buttonClasses += " bg-green-500 hover:bg-green-700 text-white";
    } else {
      // Default primary
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    }
  } else if (variant === "outlined") {
    if (color === "primary") {
      buttonClasses +=
        " border border-blue-500 hover:bg-blue-100 text-blue-700";
    } else if (color === "secondary") {
      buttonClasses += " border border-red-500 hover:bg-red-100 text-red-700";
    } else if (color === "error") {
      buttonClasses += " border border-red-600 hover:bg-red-100 text-red-800";
    } else if (color === "warning") {
      buttonClasses +=
        " border border-yellow-500 hover:bg-yellow-100 text-yellow-700";
    } else if (color === "success") {
      buttonClasses +=
        " border border-green-500 hover:bg-green-100 text-green-700";
    } else {
      // Default primary
      buttonClasses +=
        " border border-blue-500 hover:bg-blue-100 text-blue-700";
    }
  } else {
    // Default contained
    if (color === "primary") {
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    } else {
      // Default primary
      buttonClasses += " bg-blue-500 hover:bg-blue-700 text-white";
    }
  }

  return (
    <button {...props} className={`${buttonClasses} ${className || ""}`}>
      {children}
    </button>
  );
};

export default Button;
/* Fin src\components\ui\Button.tsx */

/* Inicio src\components\ui\Container.tsx */
// src/components/ui/Container.tsx
import React, { ReactNode } from 'react';

interface ContainerProps {
  children: ReactNode;
  className?: string; // Para clases adicionales de Tailwind si las necesitas
}

const Container: React.FC<ContainerProps> = ({ children, className }) => {
  return (
    <div className={`container mx-auto px-4 ${className || ''}`}> {/* Clases container, margen horizontal automático y padding x por defecto, y clases adicionales */}
      {children}
    </div>
  );
};

export default Container;
/* Fin src\components\ui\Container.tsx */

/* Inicio src\components\ui\ErrorBoundry.tsx */
// src/components/ui/ErrorBoundry.tsx
import { Alert } from "@mui/material";
import React, { Component, ErrorInfo, ReactNode } from "react";

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
  error: Error | null;
  errorInfo: ErrorInfo | null;
}

class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Error caught by error boundary", error, errorInfo);
    this.setState({ errorInfo });
  }

  render() {
    if (this.state.hasError) {
      return (
        <Alert severity="error" className="mt-4 rounded-md shadow-sm">
          {" "}
          {/* Added Tailwind classes to Alert */}
          Algo salió mal
        </Alert>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;

/* Fin src\components\ui\ErrorBoundry.tsx */

/* Inicio src\components\ui\ListItem.tsx */
/* src\components\ui\ListItem.tsx */
import React, { forwardRef, ReactNode } from "react";
import { Link } from "react-router-dom";

interface ListItemProps extends React.LiHTMLAttributes<HTMLLIElement> {
  children: ReactNode;
  onClick?: () => void;
  to?: string;
  href?: string;
  button?: boolean;
}

const ListItem = forwardRef<HTMLLIElement, ListItemProps>(
  ({ children, onClick, to, href, button, className, ...props }, ref) => {
    const handleClick = () => {
      if (onClick) {
        onClick();
      }
    };

    const commonClasses = `block py-2 px-4 text-sm hover:bg-gray-100 text-gray-700`;
    const buttonClasses = button
      ? `${commonClasses} cursor-pointer`
      : commonClasses;

    const listItemContent = (
      <li
        ref={ref}
        onClick={handleClick}
        className={`${buttonClasses} ${className || ""}`}
        {...props}
      >
        {children}
      </li>
    );

    if (to) {
      return (
        <li ref={ref} className={className} {...props}>
          <Link to={to} className={`${commonClasses} block`}>
            {children}
          </Link>
        </li>
      );
    }

    if (href) {
      return (
        <li ref={ref} className={className} {...props}>
          <a href={href} className={`${commonClasses} block`}>
            {children}
          </a>
        </li>
      );
    }

    return listItemContent;
  }
);

ListItem.displayName = "ListItem";

export default ListItem;

/* Fin src\components\ui\ListItem.tsx */

/* Inicio src\components\ui\TextField.tsx */
/* src\components\ui\TextField.tsx */
import React, { InputHTMLAttributes } from "react";

type TextFieldProps = InputHTMLAttributes<HTMLInputElement> & {
  label?: string;
};

const TextField: React.FC<TextFieldProps> = ({
  label,
  className,
  ...props
}) => {
  return (
    <div>
      {label && (
        <label
          htmlFor={props.id}
          className="block text-sm font-medium text-gray-700"
        >
          {label}
        </label>
      )}
      <input
        {...props}
        className={`mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm ${
          className || ""
        }`}
      />
    </div>
  );
};

export default TextField;

/* Fin src\components\ui\TextField.tsx */

/* Inicio src\context\AppContext.tsx */
/* src\context\AppContext.tsx */
/* src\context\AppContext.tsx */
import { CircularProgress } from "@mui/material";
import { collection, onSnapshot } from "firebase/firestore";
import React, { createContext, ReactNode, useEffect, useState } from "react";
import ErrorBoundary from "../components/ui/ErrorBoundry";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export interface MenuItem {
  // Exporta la interfaz MenuItem
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  available: boolean;
  recommendation: string;
  observations: string;
  availabilityStatus:
    | "disponible"
    | "noDisponibleMomento"
    | "noDisponibleLargoPlazo";
  cost: number;
  points: number;
  imageUrls: string[];
  isCombo: boolean;
  components: string[];
  minimumPrice: number;
  comboSellingPrice: number;
  comboPoints: number;
  additionalCosts: AdditionalCost[];
}
export interface AdditionalCost {
  nombre: string;
  valor: number;
}
export type MenuItemType = MenuItem; // Define y exporta MenuItemType como alias de MenuItem

export interface AppContextProps {
  menu: MenuItemType[]; // Usa MenuItemType aquí
  loading: boolean;
}

export const AppContext = createContext<AppContextProps>({
  menu: [],
  loading: true,
});

interface AppProviderProps {
  children: ReactNode;
}

export const AppProvider: React.FC<AppProviderProps> = ({ children }) => {
  const [menu, setMenu] = useState<MenuItemType[]>([]); // Usa MenuItemType aquí
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let unsubscribe: () => void;
    try {
      const menuCollection = collection(db, COLLECTIONS.MENU);
      unsubscribe = onSnapshot(menuCollection, (snapshot) => {
        const menuData = snapshot.docs.map(
          (doc) => ({ id: doc.id, ...doc.data() } as MenuItemType) // Cassting a MenuItemType
        );
        setMenu(menuData);
        setLoading(false);
      });
    } catch (error) {
      console.error(error);
      setLoading(false);
    }
    return () => unsubscribe && unsubscribe();
  }, []);

  return (
    <AppContext.Provider value={{ menu, loading }}>
      <ErrorBoundary>{loading ? <CircularProgress /> : children}</ErrorBoundary>
    </AppContext.Provider>
  );
};

/* Fin src\context\AppContext.tsx */

/* Inicio src\context\AuthContext.tsx */
/* src\context\AuthContext.tsx */
// src/context/AuthContext.tsx

import {
  User,
  createUserWithEmailAndPassword,
  onAuthStateChanged,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth";
import { doc, getDoc, setDoc, updateDoc } from "firebase/firestore";
import React, { ReactNode, createContext, useEffect, useState } from "react";
import { auth, db } from "../utils/firebase";

export interface AuthContextProps {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  userRole: string | null;
  points: number;
  addPoints: () => Promise<void>;
}

export const AuthContext = createContext<AuthContextProps>({
  user: null,
  loading: false,
  login: async () => {},
  register: async () => {},
  logout: async () => {},
  userRole: null,
  points: 0,
  addPoints: async () => {},
});

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [points, setPoints] = useState<number>(0);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (currentUser) {
        const userDocRef = doc(db, "users", currentUser.uid);
        try {
          const userDoc = await getDoc(userDocRef);
          if (userDoc.exists()) {
            setUserRole(userDoc.data().role);
            setPoints(userDoc.data().points || 0);
          } else {
            // Crear documento de usuario si no existe
            await setDoc(userDocRef, {
              role: "client",
              points: 0,
              email: currentUser.email,
            });
            setUserRole("client");
            setPoints(0);
          }
          setUser(currentUser);
        } catch (error) {
          console.error("Error fetching user document:", error);
          setUser(currentUser); // Even with error, set user to prevent login loop
        } finally {
          setLoading(false);
        }
      } else {
        setUser(null);
        setUserRole(null);
        setPoints(0);
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;

      const userDoc = await getDoc(doc(db, "users", user.uid));
      if (userDoc.exists()) {
        setUserRole(userDoc.data().role);
        setPoints(userDoc.data().points || 0);
      } else {
        setUserRole("client");
        setPoints(0);
      }
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  const register = async (email: string, password: string) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        email,
        password
      );
      const user = userCredential.user;

      await setDoc(doc(db, "users", user.uid), {
        role: "client",
        points: 0,
        email: email,
      });

      setUserRole("client");
      setPoints(0);
    } catch (error) {
      console.error(
        "Error en el registro:",
        (error as { message: string }).message
      );
      throw new Error((error as { message: string }).message);
    }
  };

  const addPoints = async () => {
    if (!user) return;

    try {
      await updateDoc(doc(db, "users", user.uid), {
        points: points + 10,
      });
      setPoints((prevPoints) => prevPoints + 10);
    } catch (error) {
      console.error("Error al sumar puntos", error);
    }
  };

  const logout = async () => {
    try {
      await signOut(auth);
      setUserRole(null);
      setPoints(0);
    } catch (error) {
      throw new Error((error as { message: string }).message);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        login,
        register,
        logout,
        userRole,
        points,
        addPoints,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

/* Fin src\context\AuthContext.tsx */

/* Inicio src\hooks\useAuth.ts */
import { useContext } from 'react';
import { AuthContext, AuthContextProps } from '../context/AuthContext';

export const useAuth = (): AuthContextProps => {
    const context = useContext<AuthContextProps>(AuthContext);
    if (!context) {
        throw new Error("useAuth must be used within a AuthProvider")
    }
    return context;
};
/* Fin src\hooks\useAuth.ts */

/* Inicio src\hooks\useMenu.ts */
import { useContext } from 'react';
import { AppContext, AppContextProps } from '../context/AppContext';

export const useMenu = (): AppContextProps => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error("useMenu must be used within a AppProvider")
  }
  return context;
};
/* Fin src\hooks\useMenu.ts */

/* Inicio src\main.tsx */
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

/* Fin src\main.tsx */

/* Inicio src\pages\ContabilidadDetail.tsx */
/* eslint-disable @typescript-eslint/no-floating-promises */

/* eslint-disable @typescript-eslint/no-misused-promises */
// src/pages/ContabilidadDetail.tsx
import { arrayRemove, arrayUnion, doc, onSnapshot, updateDoc } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import MainLayout from '../components/layout/MainLayout'
import { useAuth } from '../hooks/useAuth'
import { db } from '../utils/firebase'

interface Movement {
  movementId: string
  type: 'entry' | 'exit'
  amount: number
  concept: string
  description?: string
  category: string
  method: string
  createdAt: string | number | Date
  createdBy: string
}

interface DailyCashRegister {
  id: string
  date: string
  openingAmount: number
  closingAmount?: number
  realClosingAmount?: number
  discrepancy?: number
  status: 'open' | 'closed'
  createdBy: string
  closedBy?: string
  movements: Movement[]
}

const ContabilidadDetail: React.FC = () => {
  const { user, userRole } = useAuth()
  const params = useParams<{ id: string }>()
  const navigate = useNavigate()

  const [registerData, setRegisterData] = useState<DailyCashRegister | null>(null)
  const [loading, setLoading] = useState(true)

  // Nuevos estados para registrar un movimiento
  const [movementType, setMovementType] = useState<'entry' | 'exit'>('entry')
  const [movementAmount, setMovementAmount] = useState<number>(0)
  const [movementConcept, setMovementConcept] = useState('')
  const [movementDescription, setMovementDescription] = useState('')
  const [movementCategory, setMovementCategory] = useState('venta') // Default to 'ventas'
  const [movementMethod, setMovementMethod] = useState('efectivo') // Default to 'efectivo'

  // Campos para cerrar el día
  const [closingAmount, setClosingAmount] = useState<number>(0)
  const [realClosingAmount, setRealClosingAmount] = useState<number>(0)

  useEffect(() => {
    if (!params.id) {
      setLoading(false)
      return
    }

    const docRef = doc(db, 'caja', params.id)
    const unsubscribe = onSnapshot(docRef, (snapshot) => {
      if (!snapshot.exists()) {
        setLoading(false)
        return
      }
      const data = snapshot.data() as Omit<DailyCashRegister, 'id'>
      setRegisterData({
        id: snapshot.id,
        ...data,
      })
      setLoading(false)
    })

    return () => unsubscribe()
  }, [params.id])

  if (loading) {
    return (
      <MainLayout>
        <div className="p-4">Cargando detalle...</div>
      </MainLayout>
    )
  }

  if (!registerData) {
    return (
      <MainLayout>
        <div className="p-4">No se encontró el registro de caja.</div>
      </MainLayout>
    )
  }

  // Calcular totales al vuelo:
  const totalEntries = registerData.movements
    .filter((m) => m.type === 'entry')
    .reduce((acc, cur) => acc + cur.amount, 0)

  const totalExits = registerData.movements
    .filter((m) => m.type === 'exit')
    .reduce((acc, cur) => acc + cur.amount, 0)

  const expectedClose = registerData.openingAmount + totalEntries - totalExits

  const handleAddMovement = async () => {
    if (!user) return
    if (registerData.status === 'closed') {
      alert('Día cerrado, no se pueden agregar movimientos.')
      return
    }

    // Crear un Movement
    const movement: Movement = {
      movementId: crypto.randomUUID(),
      type: movementType,
      amount: movementAmount,
      concept: movementConcept.trim() || 'Sin concepto',
      description: movementDescription.trim(),
      category: movementCategory,
      method: movementMethod,
      createdAt: new Date(),
      createdBy: user.uid,
    }
    try {
      const docRef = doc(db, 'caja', registerData.id)
      await updateDoc(docRef, {
        movements: arrayUnion(movement),
      })
      // Limpiar formulario
      setMovementAmount(0)
      setMovementConcept('')
      setMovementDescription('')
      setMovementMethod('efectivo')
      setMovementCategory('venta')
    } catch (error) {
      console.error('Error al guardar movimiento:', error)
      alert('Error al guardar movimiento')
    }
  }

  const handleRemoveMovement = async (mov: Movement) => {
    if (!user) return
    if (registerData.status === 'closed') {
      alert('Día cerrado, no se pueden eliminar movimientos.')
      return
    }
    const confirmDelete = confirm(`¿Eliminar movimiento: "${mov.concept}" por ${mov.amount} COP?`)
    if (!confirmDelete) return

    try {
      const docRef = doc(db, 'caja', registerData.id)
      await updateDoc(docRef, {
        movements: arrayRemove(mov),
      })
    } catch (error) {
      console.error('Error al eliminar movimiento:', error)
      alert('Error al eliminar movimiento')
    }
  }

  const handleCloseDay = async () => {
    if (!user) return
    if (registerData.status === 'closed') {
      alert('Este día ya está cerrado.')
      return
    }
    // Cálculo
    const discrepancy = expectedClose - realClosingAmount
    try {
      const docRef = doc(db, 'caja', registerData.id)
      await updateDoc(docRef, {
        closingAmount,
        realClosingAmount,
        discrepancy,
        status: 'closed',
        closedBy: user.uid,
      })
      alert('Día cerrado con éxito.')
      navigate('/contabilidad')
    } catch (error) {
      console.error('Error al cerrar el día:', error)
      alert('Error al cerrar el día')
    }
  }

  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    })
  }

  const categories = ['venta', 'compra_insumos', 'pago_servicios', 'nomina', 'otros']

  const paymentMethods = ['efectivo', 'transferencia', 'tarjeta']

  const groupedMovements = registerData.movements.reduce(
    (acc, mov) => {
      acc[mov.category] = acc[mov.category] || []
      acc[mov.category].push(mov)
      return acc
    },
    {} as Record<string, Movement[]>,
  )

  const calculateCategoryTotal = (category: string, type: 'entry' | 'exit') => {
    return (groupedMovements[category] || [])
      .filter((m) => m.type === type)
      .reduce((sum, m) => sum + m.amount, 0)
  }

  return (
    <MainLayout>
      <div className="p-4">
        <h1 className="text-2xl font-bold mb-4 text-center text-indigo-700">
          Detalle de Caja - {registerData.date}
        </h1>
        <div className="mb-6 bg-gray-100 p-4 rounded shadow">
          <p>
            <strong>Estado:</strong>{' '}
            <span className={registerData.status === 'open' ? 'text-green-600' : 'text-gray-600'}>
              {registerData.status.toUpperCase()}
            </span>
          </p>
          <p>
            <strong>Apertura:</strong> {formatPriceCOP(registerData.openingAmount)}
          </p>
          <p>
            <strong>Entradas:</strong> {formatPriceCOP(totalEntries)}
          </p>
          <p>
            <strong>Salidas:</strong> {formatPriceCOP(totalExits)}
          </p>
          <p>
            <strong className="text-indigo-700">Cierre Esperado:</strong>{' '}
            {formatPriceCOP(expectedClose)}
          </p>
          {registerData.status === 'closed' && (
            <>
              <p>
                <strong>Declarado al Cerrar:</strong>{' '}
                {formatPriceCOP(registerData.closingAmount || 0)}
              </p>
              <p>
                <strong>Efectivo Real Contado:</strong>{' '}
                {formatPriceCOP(registerData.realClosingAmount || 0)}
              </p>
              <p>
                <strong>Discrepancia:</strong>{' '}
                <span
                  className={
                    registerData.discrepancy === 0
                      ? 'text-green-600 font-medium'
                      : 'text-red-600 font-medium'
                  }
                >
                  {registerData.discrepancy === 0
                    ? 'Todo cuadra'
                    : `${formatPriceCOP(registerData.discrepancy || 0)} (Sobrante/Pérdida)`}
                </span>
              </p>
            </>
          )}
        </div>
        {/* Resumen por categoría */}
        {Object.keys(groupedMovements).length > 0 && (
          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2 text-indigo-600">Resumen por Categoría</h2>
            {Object.keys(groupedMovements).map((category) => (
              <div key={category} className="p-3 bg-white border rounded shadow-sm mb-2">
                <h3 className="text-lg font-medium text-gray-800 capitalize">{category}</h3>
                <div className="ml-4">
                  <p className="text-sm text-gray-700">
                    <strong>Ingresos:</strong>{' '}
                    {formatPriceCOP(calculateCategoryTotal(category, 'entry'))}
                  </p>
                  <p className="text-sm text-gray-700">
                    <strong>Egresos:</strong>{' '}
                    {formatPriceCOP(calculateCategoryTotal(category, 'exit'))}
                  </p>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Movimientos */}
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-2 text-indigo-600">Movimientos</h2>
          {registerData.movements.length === 0 && (
            <p className="text-gray-400 text-center">No hay movimientos aún.</p>
          )}
          <ul className="space-y-3">
            {registerData.movements.map((mov) => (
              <li
                key={mov.movementId}
                className="bg-white border p-3 rounded flex items-center justify-between shadow-sm hover:shadow-md transition-shadow duration-200"
              >
                <div>
                  <p>
                    {mov.type === 'entry' ? (
                      <span className="text-green-600 font-medium">
                        +{formatPriceCOP(mov.amount)}
                      </span>
                    ) : (
                      <span className="text-red-600 font-medium">
                        -{formatPriceCOP(mov.amount)}
                      </span>
                    )}{' '}
                    - {mov.concept}
                  </p>
                  <p className="text-gray-600 text-xs">
                    <strong>Categoria:</strong> {mov.category} <strong>Metodo:</strong> {mov.method}
                  </p>
                  {mov.description && (
                    <p className="text-gray-500 text-sm mt-1">{mov.description}</p>
                  )}
                  <p className="text-xs text-gray-500">
                    {new Date(mov.createdAt).toLocaleString()} | Creado por: {mov.createdBy}
                  </p>
                </div>
                {registerData.status === 'open' &&
                  (userRole === 'admin' || userRole === 'encargado') && (
                    <button
                      onClick={() => handleRemoveMovement(mov)}
                      className="text-red-500 hover:text-red-700 ml-2 text-sm"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke-width="1.5"
                        stroke="currentColor"
                        className="w-5 h-5"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          d="M14.74 9l-.346 9m-.478 0l-.345-9m7.021-2.01C18.692 6.905 17.127 5.536 15.313 5.536H8.687C6.873 5.536 5.308 6.905 5.308 8.72v.81c0 1.18.914 2.12 2.094 2.201l1.652.072m7.324 0l1.652-.072a2.094 2.094 0 002.094-2.201v-.81c0-1.814-1.365-3.183-3.187-3.183zm-2.961 8.903L15.7 11.855m-2.606 5.15l-2.796-5.15m5.136 0l-2.794 5.15z"
                        />
                      </svg>
                    </button>
                  )}
              </li>
            ))}
          </ul>
        </div>

        {/* Formulario para añadir movimiento (solo si día abierto) */}
        {registerData.status === 'open' && (userRole === 'admin' || userRole === 'encargado') && (
          <div className="mb-8 p-4 border rounded bg-gray-50 shadow-sm">
            <h3 className="font-semibold mb-2 text-indigo-600">Registrar Movimiento</h3>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Tipo</label>
              <select
                className="border p-2 w-full rounded"
                value={movementType}
                onChange={(e) => setMovementType(e.target.value as 'entry' | 'exit')}
              >
                <option value="entry">Entrada</option>
                <option value="exit">Salida</option>
              </select>
            </div>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Monto</label>
              <input
                type="number"
                className="border p-2 w-full rounded"
                value={movementAmount}
                onChange={(e) => setMovementAmount(Number(e.target.value))}
              />
            </div>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Concepto</label>
              <input
                type="text"
                className="border p-2 w-full rounded"
                value={movementConcept}
                onChange={(e) => setMovementConcept(e.target.value)}
              />
            </div>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Descripción (opcional)</label>
              <input
                type="text"
                className="border p-2 w-full rounded"
                value={movementDescription}
                onChange={(e) => setMovementDescription(e.target.value)}
              />
            </div>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Categoria</label>
              <select
                className="border p-2 w-full rounded"
                value={movementCategory}
                onChange={(e) => setMovementCategory(e.target.value)}
              >
                {categories.map((cat) => (
                  <option key={cat} value={cat}>
                    {cat}
                  </option>
                ))}
              </select>
            </div>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Metodo de Pago</label>
              <select
                className="border p-2 w-full rounded"
                value={movementMethod}
                onChange={(e) => setMovementMethod(e.target.value)}
              >
                {paymentMethods.map((method) => (
                  <option key={method} value={method}>
                    {method}
                  </option>
                ))}
              </select>
            </div>
            <button
              onClick={handleAddMovement}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
              Agregar Movimiento
            </button>
          </div>
        )}

        {/* Cerrar día (si está abierto) */}
        {registerData.status === 'open' && (userRole === 'admin' || userRole === 'encargado') && (
          <div className="p-4 border rounded bg-gray-50 shadow-sm">
            <h3 className="font-semibold mb-2 text-indigo-600">Cerrar Día</h3>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">
                Cierre declarado (opcional)
              </label>
              <input
                type="number"
                className="border p-2 w-full rounded"
                value={closingAmount}
                onChange={(e) => setClosingAmount(Number(e.target.value))}
              />
            </div>
            <div className="mb-3">
              <label className="block text-sm text-gray-700 mb-1">Efectivo Real Contado</label>
              <input
                type="number"
                className="border p-2 w-full rounded"
                value={realClosingAmount}
                onChange={(e) => setRealClosingAmount(Number(e.target.value))}
              />
            </div>
            <button
              onClick={handleCloseDay}
              className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
            >
              Cerrar Día
            </button>
          </div>
        )}
      </div>
    </MainLayout>
  )
}

export default ContabilidadDetail

/* Fin src\pages\ContabilidadDetail.tsx */

/* Inicio src\pages\ContabilidadPage.tsx */
// src/pages/ContabilidadPage.tsx
import { addDoc, collection, onSnapshot, query } from 'firebase/firestore'
import React, { useEffect, useState } from 'react'
import MainLayout from '../components/layout/MainLayout'
import { useAuth } from '../hooks/useAuth'
import { db } from '../utils/firebase'

interface Movement {
  movementId: string
  type: 'entry' | 'exit'
  amount: number
  concept: string
  createdAt: any
  createdBy: string
}

interface DailyCashRegister {
  id: string
  date: string
  openingAmount: number
  closingAmount?: number
  realClosingAmount?: number
  discrepancy?: number
  status: 'open' | 'closed'
  createdBy: string
  closedBy?: string
  movements: Movement[]
}

const ContabilidadPage: React.FC = () => {
  const { user, userRole } = useAuth()
  const [cashRegisters, setCashRegisters] = useState<DailyCashRegister[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const qRef = query(collection(db, 'caja'))
    const unsubscribe = onSnapshot(qRef, (snapshot) => {
      const data: DailyCashRegister[] = snapshot.docs.map((docSnap) => {
        const docData = docSnap.data()
        return {
          id: docSnap.id,
          ...docData,
        } as DailyCashRegister
      })
      setCashRegisters(data)
      setLoading(false)
    })

    return () => unsubscribe()
  }, [])

  const handleOpenDay = async () => {
    if (!user) return
    // Ver si ya hay un registro "open"
    const alreadyOpen = cashRegisters.find((reg) => reg.status === 'open')
    if (alreadyOpen) {
      alert('Ya hay un día abierto, ciérralo primero antes de abrir otro.')
      return
    }
    // Pedir monto de apertura
    const opening = Number(prompt('Monto de apertura en efectivo:') || 0)
    const today = new Date()
    const dateStr = today.toISOString().split('T')[0] // "YYYY-MM-DD"

    try {
      await addDoc(collection(db, 'caja'), {
        date: dateStr,
        openingAmount: opening,
        status: 'open',
        createdBy: user.uid,
        movements: [],
      })
      alert('Día abierto exitosamente.')
    } catch (error) {
      console.error('Error abriendo el día:', error)
      alert('Ocurrió un error al abrir el día')
    }
  }

  const goToDetail = (id: string) => {
    window.location.href = `/contabilidad/${id}`
  }

  if (loading) {
    return (
      <MainLayout>
        <div className="p-4">Cargando datos de contabilidad...</div>
      </MainLayout>
    )
  }

  // Function to format price to Colombian Pesos
  const formatPriceCOP = (price: number) => {
    return price.toLocaleString('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    })
  }

  return (
    <MainLayout>
      <div className="p-4">
        <h1 className="text-2xl font-bold mb-2 text-center text-indigo-700">Contabilidad / Caja</h1>
        <p className="mb-4 text-gray-600 text-center">
          Aquí podrás abrir un nuevo día, registrar movimientos y cerrar la caja diaria.
        </p>

        {(userRole === 'admin' || userRole === 'encargado') && (
          <div className="text-center mb-4">
            <button
              onClick={handleOpenDay}
              className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition-colors duration-200"
            >
              Abrir Nuevo Día
            </button>
          </div>
        )}

        <div className="mt-8 space-y-4">
          {cashRegisters.map((reg) => (
            <div
              key={reg.id}
              className="border p-4 rounded flex justify-between items-center shadow-sm hover:shadow-md transition-shadow duration-200 bg-gray-100"
            >
              <div>
                <p>
                  <strong>Fecha:</strong> {reg.date}
                </p>
                <p>
                  <strong>Estado:</strong>{' '}
                  <span className={reg.status === 'open' ? 'text-green-600' : 'text-gray-600'}>
                    {reg.status.toUpperCase()}
                  </span>
                </p>
                <p>
                  <strong>Apertura:</strong> {formatPriceCOP(reg.openingAmount)}
                </p>
                {reg.status === 'closed' && (
                  <>
                    <p>
                      <strong>Declarado al Cerrar:</strong> {formatPriceCOP(reg.closingAmount || 0)}
                    </p>
                    <p>
                      <strong>Efectivo Contado:</strong>{' '}
                      {reg.realClosingAmount !== undefined
                        ? formatPriceCOP(reg.realClosingAmount)
                        : '—'}
                    </p>
                    {reg.discrepancy !== undefined && (
                      <p
                        className={
                          reg.discrepancy === 0
                            ? 'text-green-700 font-semibold'
                            : 'text-red-600 font-semibold'
                        }
                      >
                        Discrepancia: {formatPriceCOP(reg.discrepancy || 0)}
                      </p>
                    )}
                  </>
                )}
              </div>
              <button
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors duration-200"
                onClick={() => goToDetail(reg.id)}
              >
                Ver Detalle
              </button>
            </div>
          ))}
        </div>

        {cashRegisters.length === 0 && (
          <p className="mt-6 text-gray-500 text-center">No hay registros de caja todavía.</p>
        )}
      </div>
    </MainLayout>
  )
}

export default ContabilidadPage

/* Fin src\pages\ContabilidadPage.tsx */

/* Inicio src\pages\Dashboard.tsx */
/* eslint-disable @typescript-eslint/no-redundant-type-constituents */
import {
  ArcElement,
  BarElement,
  BubbleDataPoint,
  CategoryScale,
  Chart,
  Chart as ChartJS,
  ChartOptions,
  Legend,
  LinearScale,
  LineController,
  LineElement,
  Point,
  PointElement,
  Title,
  Tooltip,
} from 'chart.js'
import { collection, doc, onSnapshot, query, updateDoc, where } from 'firebase/firestore'
import React, { useEffect, useRef, useState } from 'react'
import { Bar, Line, Pie } from 'react-chartjs-2'
import { useAuth } from '../hooks/useAuth'
import { db } from '../utils/firebase'

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  Title,
  Tooltip,
  Legend,
  LineController,
  ArcElement,
)

interface Pedido {
  id: string
  status: string
  total: number
  orderDate: Date
  userId: string
}

interface Task {
  id: string
  taskId: string
  taskName: string
  taskType: 'daily' | 'periodic'
  dueDate?: Date | null
  dailyCompletions: { [date: string]: boolean }
  completionDate?: Date | null
  dayOfWeek?: number
  subtasks?: string[]
}

const ALL_STATUSES = ['pendiente', 'atendiendo', 'preparando', 'enviado', 'entregado']

// const defaultDailyTasks = [
//   {
//     taskName: 'Hacer el aseo del restaurante',
//     subtasks: [
//       'Barrer y trapear pisos',
//       'Limpiar mesas y sillas',
//       'Vaciar papeleras',
//       'Limpiar baños',
//     ],
//   },
//   { taskName: 'Lavar la freidora', subtasks: [] },
//   {
//     taskName: 'Revisar inventario y hacer pedidos si es necesario',
//     subtasks: [
//       'Verificar niveles de stock',
//       'Listar productos a pedir',
//       'Enviar pedido a proveedores',
//       'Recibir y organizar pedido',
//     ],
//   },
// ]

// const periodicTasksConfig = [
//   { dayOfMonth: 25, taskName: 'Pagar arriendo', taskType: 'periodic' },
//   { dayOfMonth: 25, taskName: 'Pagar factura de luz', taskType: 'periodic' },
//   { dayOfMonth: 25, taskName: 'Pagar factura de agua', taskType: 'periodic' },
// ]

interface Movement {
  movementId: string
  type: 'entry' | 'exit'
  amount: number
  concept: string
  description?: string
  category: string
  method: string
  createdAt: string
  createdBy: string
}

interface DailyCashRegister {
  id: string
  date: string
  openingAmount: number
  closingAmount?: number
  realClosingAmount?: number
  discrepancy?: number
  status: 'open' | 'closed'
  createdBy: string
  closedBy?: string
  movements: Movement[]
}

const Dashboard: React.FC = () => {
  const { user, userRole, points } = useAuth()
  const [pedidos, setPedidos] = useState<Pedido[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [tasks, setTasks] = useState<Task[]>([])
  const [loadingTasks, setLoadingTasks] = useState<boolean>(true)

  // Filtro de estado de pedidos
  const [selectedStatus, setSelectedStatus] = useState<string | 'todos'>('todos')

  // Métricas generales
  const [todaySales, setTodaySales] = useState<number>(0)
  const [monthSales, setMonthSales] = useState<number>(0)
  const [pendingOrdersCount, setPendingOrdersCount] = useState<number>(0)
  const [totalOrders, setTotalOrders] = useState<number>(0)
  const [, setClientTotalOrders] = useState<number>(0)

  // Datos de contabilidad
  const [cashRegisters, setCashRegisters] = useState<DailyCashRegister[]>([])
  const [monthlyIncome, setMonthlyIncome] = useState(0)
  const [monthlyExpenses, setMonthlyExpenses] = useState(0)
  const [monthlyBalance, setMonthlyBalance] = useState(0)
  const [categoryData, setCategoryData] = useState<{
    labels: string[]
    income: number[]
    expenses: number[]
  } | null>(null)
  const [monthlyLabelsContabilidad, setMonthlyLabelsContabilidad] = useState<string[]>([])
  const [monthlyIncomeContabilidad, setMonthlyIncomeContabilidad] = useState<number[]>([])
  const [monthlyExpensesContabilidad, setMonthlyExpensesContabilidad] = useState<number[]>([])
  const [contabilityError, setContabilityError] = useState<boolean>(false)

  // Gráficos de ventas
  const [dailyLabels, setDailyLabels] = useState<string[]>([])
  const [dailyData, setDailyData] = useState<number[]>([])
  const [monthlyLabels, setMonthlyLabels] = useState<string[]>([])
  const [monthlyData, setMonthlyData] = useState<number[]>([])
  // const [selectedDateRange, setSelectedDateRange] = useState<{
  //   from: Date | null
  //   to: Date | null
  // }>({ from: null, to: null })

  const chartRef = useRef<Chart<
    'line',
    (number | [number, number] | Point | BubbleDataPoint)[],
    unknown
  > | null>(null)

  const categories = ['venta', 'compra_insumos', 'pago_servicios', 'nomina', 'otros']

  // Escucha la colección de caja para contabilidad
  useEffect(() => {
    setContabilityError(false)
    const qRef = query(collection(db, 'caja'))
    const unsubscribe = onSnapshot(
      qRef,
      (snapshot) => {
        const data: DailyCashRegister[] = snapshot.docs.map((docSnap) => {
          const docData = docSnap.data()
          return {
            id: docSnap.id,
            ...docData,
          } as DailyCashRegister
        })
        setCashRegisters(data)
      },
      (error) => {
        console.error('Error fetching contability data:', error)
        setContabilityError(true)
        setLoading(false)
      },
    )
    return () => unsubscribe()
  }, [])

  // UseEffect para calcular métricas de contabilidad
  useEffect(() => {
    if (!cashRegisters || cashRegisters.length === 0) {
      setMonthlyIncome(0)
      setMonthlyExpenses(0)
      setMonthlyBalance(0)
      setCategoryData(null)
      setMonthlyLabelsContabilidad([])
      setMonthlyExpensesContabilidad([])
      setMonthlyIncomeContabilidad([])
      return
    }

    const now = new Date()
    const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1)
    const filteredRegisters = cashRegisters.filter((reg) => {
      const date = new Date(reg.date)
      return date >= firstDayOfMonth && date <= now
    })

    let totalIncome = 0
    let totalExpenses = 0
    // Inicializa categoryTotals con las categorías predefinidas
    const categoryTotals = categories.reduce(
      (acc, category) => {
        acc[category] = { income: 0, expenses: 0 }
        return acc
      },
      {} as Record<string, { income: number; expenses: number }>,
    )

    console.log('cashRegisters data inside categoryData useEffect:', cashRegisters)

    filteredRegisters.forEach((register) => {
      register.movements.forEach((mov) => {
        if (mov.type === 'entry') {
          totalIncome += mov.amount
          // Si la categoría no existe en categoryTotals, la inicializamos
          if (!categoryTotals[mov.category]) {
            categoryTotals[mov.category] = { income: 0, expenses: 0 }
          }
          categoryTotals[mov.category].income += mov.amount
        } else {
          totalExpenses += mov.amount
          if (!categoryTotals[mov.category]) {
            categoryTotals[mov.category] = { income: 0, expenses: 0 }
          }
          categoryTotals[mov.category].expenses += mov.amount
        }
      })
    })

    console.log('categoryTotals after processing movements:', categoryTotals)

    setMonthlyIncome(totalIncome)
    setMonthlyExpenses(totalExpenses)
    setMonthlyBalance(totalIncome - totalExpenses)

    // En lugar de iterar sobre las categorías predefinidas, usamos las claves de categoryTotals
    const labels: string[] = []
    const income: number[] = []
    const expenses: number[] = []

    Object.keys(categoryTotals).forEach((category) => {
      if (categoryTotals[category].income > 0 || categoryTotals[category].expenses > 0) {
        labels.push(category)
        income.push(categoryTotals[category].income)
        expenses.push(categoryTotals[category].expenses)
      }
    })

    const finalCategoryData = { labels, income, expenses }
    console.log('Final categoryData before setState:', finalCategoryData)
    setCategoryData(finalCategoryData)
  }, [cashRegisters])

  useEffect(() => {
    let pedidosQuery = collection(db, 'pedidos')
    if (userRole === 'client' && user) {
      pedidosQuery = query(pedidosQuery, where('userId', '==', user.uid)) as never
    }

    const unsubscribe = onSnapshot(
      pedidosQuery,
      (snapshot) => {
        const pedidosData: Pedido[] = snapshot.docs.map((doc) => {
          const data = doc.data() as {
            status: string
            total: number
            orderDate: { toDate: () => Date; toMillis: () => number }
            userId: string
          }
          return {
            id: doc.id,
            status: data.status,
            total: data.total,
            orderDate: data.orderDate?.toDate ? data.orderDate.toDate() : new Date(),
            userId: data.userId,
          } as Pedido
        })
        setPedidos(pedidosData)
        setLoading(false)
      },
      (error) => {
        console.error('Error en el listener de pedidos:', error)
        setLoading(false)
      },
    )
    return () => unsubscribe()
  }, [user, userRole])

  useEffect(() => {
    if (userRole === 'admin' || userRole === 'encargado') {
      const today = new Date()
      const todayDateString = today.toISOString().split('T')[0]

      const tasksCollection = collection(db, 'tasks')
      const unsubscribeTasks = onSnapshot(
        tasksCollection,
        (snapshot) => {
          let fetchedTasks: Task[] = snapshot.docs.map((doc) => {
            const data = doc.data() as {
              taskId: string
              taskName: string
              taskType: 'daily' | 'periodic'
              dueDate: { toDate: () => Date } | null
              dailyCompletions: { [date: string]: boolean }
              completionDate: { toDate: () => Date } | null
              subtasks: string[]
            }
            return {
              id: doc.id,
              taskId: data.taskId,
              taskName: data.taskName,
              taskType: data.taskType,
              dueDate: data.dueDate ? data.dueDate.toDate() : null,
              dailyCompletions: data.dailyCompletions || {},
              completionDate: data.completionDate ? data.completionDate.toDate() : null,
              subtasks: data.subtasks || [],
            } as Task
          })

          fetchedTasks = fetchedTasks.filter((task) => {
            if (task.taskType === 'daily') {
              return true
            } else if (task.taskType === 'periodic' && task.dueDate) {
              const taskDueDate = task.dueDate
              return taskDueDate.toISOString().split('T')[0] === todayDateString
            }
            return false
          })
          setTasks(fetchedTasks)
          setLoadingTasks(false)
        },
        (error) => {
          console.error('Error en el listener de tareas:', error)
          setLoadingTasks(false)
        },
      )
      return () => unsubscribeTasks()
    } else {
      setLoadingTasks(false)
    }
  }, [userRole])

  // const addDefaultTask = async (
  //   taskName: string,
  //   taskType: 'daily' | 'periodic',
  //   subtasks: string[] = [],
  //   dueDate: Date | null = null,
  // ) => {
  //   try {
  //     await setDoc(doc(collection(db, 'tasks'), uuidv4()), {
  //       taskId: uuidv4(),
  //       taskName: taskName,
  //       taskType: taskType,
  //       completed: false,
  //       dailyCompletions: {},
  //       subtasks: subtasks,
  //       dueDate: dueDate || null,
  //     })
  //   } catch (error) {
  //     console.error('Error adding default task:', error)
  //   }
  // }

  useEffect(() => {
    if (!pedidos.length) {
      setTodaySales(0)
      setMonthSales(0)
      setPendingOrdersCount(0)
      setTotalOrders(0)
      setDailyLabels([])
      setDailyData([])
      setMonthlyLabels([])
      setMonthlyData([])
      setClientTotalOrders(0)
      return
    }

    const filtered =
      selectedStatus === 'todos' ? pedidos : pedidos.filter((p) => p.status === selectedStatus)

    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).getTime()

    let sumToday = 0
    let sumMonth = 0
    let pendingCount = 0
    const totalCount = filtered.length
    let clientOrderCount = 0

    filtered.forEach((pedido) => {
      const pedidoDate = new Date(
        pedido.orderDate.getFullYear(),
        pedido.orderDate.getMonth(),
        pedido.orderDate.getDate(),
      ).getTime()

      if (pedidoDate === today) {
        sumToday += pedido.total
      }

      const isThisMonth =
        pedido.orderDate.getMonth() === now.getMonth() &&
        pedido.orderDate.getFullYear() === now.getFullYear()
      if (isThisMonth) {
        sumMonth += pedido.total
      }

      if (pedido.status === 'pendiente') {
        pendingCount++
      }

      if (userRole === 'client' && user && pedido.userId === user.uid) {
        clientOrderCount++
      }
    })

    setTodaySales(sumToday)
    setMonthSales(sumMonth)
    setPendingOrdersCount(pendingCount)
    setTotalOrders(totalCount)
    setClientTotalOrders(clientOrderCount)

    const last7Dates = Array.from({ length: 7 }).map((_, i) => {
      const d = new Date()
      d.setDate(d.getDate() - (6 - i))
      return d
    })

    const daysLabels: string[] = []
    const daysData: number[] = []

    last7Dates.forEach((date) => {
      const dayKey = date.toLocaleDateString('es-ES', {
        day: '2-digit',
        month: '2-digit',
      })
      daysLabels.push(dayKey)

      let dayTotal = 0
      filtered.forEach((pedido) => {
        if (
          pedido.orderDate.getDate() === date.getDate() &&
          pedido.orderDate.getMonth() === date.getMonth() &&
          pedido.orderDate.getFullYear() === date.getFullYear()
        ) {
          dayTotal += pedido.total
        }
      })
      daysData.push(dayTotal)
    })

    setDailyLabels(daysLabels)
    setDailyData(daysData)

    const last6Months = Array.from({ length: 6 }).map((_, i) => {
      const d = new Date()
      d.setMonth(d.getMonth() - (5 - i))
      d.setDate(1)
      return d
    })

    const monthLabels: string[] = []
    const monthTotals: number[] = []

    last6Months.forEach((date) => {
      const label = date.toLocaleDateString('es-ES', { month: '2-digit', year: '2-digit' })
      monthLabels.push(label)

      let monthTotal = 0
      filtered.forEach((pedido) => {
        if (
          pedido.orderDate.getFullYear() === date.getFullYear() &&
          pedido.orderDate.getMonth() === date.getMonth()
        ) {
          monthTotal += pedido.total
        }
      })
      monthTotals.push(monthTotal)
    })

    setMonthlyLabels(monthLabels)
    setMonthlyData(monthTotals)
  }, [pedidos, selectedStatus, userRole, user])

  const categoryChartOptions: ChartOptions<'pie'> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        backgroundColor: '#1e293b',
        titleColor: '#fff',
        bodyColor: '#fff',
        callbacks: {
          label: (tooltipItem: import('chart.js').TooltipItem<'pie'>) => {
            let label = tooltipItem.label || ''
            if (label) {
              label += ': '
            }
            if (tooltipItem.parsed !== null) {
              label += new Intl.NumberFormat('es-CO', {
                style: 'currency',
                currency: 'COP',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
              }).format(tooltipItem.parsed)
            }
            return label
          },
        },
      },
    },
  }

  const monthlyContabilidadChartOptions: ChartOptions<'line'> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        backgroundColor: '#1e293b',
        titleColor: '#fff',
        bodyColor: '#fff',
        callbacks: {
          label: (context) => {
            let label = context.dataset.label || ''
            if (label) {
              label += ': '
            }
            if (context.parsed.y !== null) {
              label += new Intl.NumberFormat('es-CO', {
                style: 'currency',
                currency: 'COP',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
              }).format(context.parsed.y)
            }
            return label
          },
        },
      },
    },
  }

  const chartOptions: ChartOptions<'bar'> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        backgroundColor: '#1e293b',
        titleColor: '#fff',
        bodyColor: '#fff',
        callbacks: {
          label: (context) => {
            let label = context.dataset.label || ''
            if (label) {
              label += ': '
            }
            if (context.parsed.y !== null) {
              label += new Intl.NumberFormat('es-CO', {
                style: 'currency',
                currency: 'COP',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0,
              }).format(context.parsed.y)
            }
            return label
          },
        },
      },
    },
  }

  const dailyChartData = {
    labels: dailyLabels,
    datasets: [
      {
        label: 'Ventas diarias',
        data: dailyData,
        backgroundColor: '#4F46E5',
        borderRadius: 4,
      },
    ],
  }

  const monthlyChartData = {
    labels: monthlyLabels,
    datasets: [
      {
        label: 'Ventas mensuales',
        data: monthlyData,
        backgroundColor: '#22C55E',
        borderRadius: 4,
      },
    ],
  }

  const monthlyContabilidadChartData = {
    labels: monthlyLabelsContabilidad,
    datasets: [
      {
        label: 'Ingresos',
        data: monthlyIncomeContabilidad,
        borderColor: '#43D478',
        backgroundColor: '#43D478',
        fill: false,
        tension: 0.3,
      },
      {
        label: 'Egresos',
        data: monthlyExpensesContabilidad,
        borderColor: '#E53935',
        backgroundColor: '#E53935',
        fill: false,
        tension: 0.3,
      },
    ],
  }

  const categoryChartData =
    categoryData &&
    categoryData.labels &&
    categoryData.labels.length > 0 &&
    categoryData.income &&
    categoryData.expenses
      ? {
          labels: categoryData.labels,
          datasets: [
            {
              label: 'Ingresos',
              data: categoryData.income.map((val) => val || 0),
              backgroundColor: ['#00A86B', '#43D478', '#95E1D3', '#F7B731', '#F73D47', '#78103C'],
              hoverOffset: 4,
            },
            {
              label: 'Egresos',
              data: categoryData.expenses.map((val) => val || 0),
              backgroundColor: ['#E53935', '#870D17', '#F06292', '#A7004B', '#004772', '#0087D0'],
              hoverOffset: 4,
            },
          ],
        }
      : null

  const showAdminStats = userRole === 'admin' || userRole === 'encargado'
  const showChecklist = userRole === 'admin' || userRole === 'encargado'
  const showClientStats = userRole === 'client'

  const handleTaskCompletionChange = async (taskId: string, completed: boolean) => {
    const todayDate = new Date().toISOString().split('T')[0]
    try {
      const taskDocRef = doc(db, 'tasks', taskId)
      await updateDoc(taskDocRef, {
        [`dailyCompletions.${todayDate}`]: completed,
        completionDate: completed ? new Date() : null,
      })

      setTasks((currentTasks) =>
        currentTasks.map((task) => {
          if (task.id === taskId) {
            return {
              ...task,
              dailyCompletions: {
                ...task.dailyCompletions,
                [todayDate]: completed,
              },
              completionDate: completed ? new Date() : null,
            }
          }
          return task
        }),
      )
    } catch (error) {
      console.error('Error updating task completion:', error)
    }
  }

  const last7Days = Array.from({ length: 7 }, (_, i) => {
    const day = new Date()
    day.setDate(day.getDate() - i)
    return day
  }).reverse()

  const last7DaysFormatted = last7Days.map((day) => day.toISOString().split('T')[0])

  const formatPriceCOP = (price: number) => {
    return price.toLocaleString('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    })
  }

  if (loading || loadingTasks) {
    return (
      <div className="pt-20 p-4 text-center">
        <p className="text-xl animate-pulse">Cargando Dashboard...</p>
      </div>
    )
  }

  if (showClientStats) {
    return (
      <div className="pt-20 p-4 md:p-6 bg-gray-100 min-h-screen">
        <h1 className="text-3xl font-bold text-gray-900 mb-4 transition-all duration-300 hover:scale-105">
          Bienvenido a SrPol! <span className="text-sm ml-2">({user?.email})</span>
        </h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-700 font-semibold text-lg mb-2">Descubre nuestro Menú</p>
            <p className="text-gray-600">Explora deliciosos platos y arma tu pedido.</p>
            <p className="text-2xl font-bold text-indigo-600 mt-4">¡Haz tu pedido ahora!</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-700 font-semibold text-lg mb-2">Acumula Puntos</p>
            <p className="text-gray-600">Cada pedido te da puntos para descuentos.</p>
            <p className="text-2xl font-bold text-green-600 mt-4">Tienes {points} puntos.</p>
          </div>
        </div>

        <div className="bg-white rounded shadow p-4 mb-6 text-center">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">¿Listo para ordenar?</h2>
          <p className="text-gray-600 mb-4">
            Navega por nuestro menú, personaliza tu pedido y disfruta de la mejor comida.
          </p>
          <p className="text-lg text-indigo-700 font-semibold">
            ¡Empieza a explorar nuestro menú hoy mismo!
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="pt-20 p-4 md:p-6 bg-gray-100 min-h-screen">
      <h1 className="text-3xl font-bold text-gray-900 mb-4 transition-all duration-300 hover:scale-105">
        Dashboard {user?.email && <span className="text-sm ml-2">({user.email})</span>}
      </h1>

      {showAdminStats && (
        <div className="flex flex-wrap items-center mb-6 gap-2">
          <button
            onClick={() => setSelectedStatus('todos')}
            className={`px-4 py-2 rounded-md text-sm font-medium shadow-sm transition transform hover:scale-105
              ${
                selectedStatus === 'todos'
                  ? 'bg-indigo-600 text-white'
                  : 'bg-white text-gray-800 hover:bg-gray-200'
              }`}
          >
            Todos
          </button>
          {ALL_STATUSES.map((status) => (
            <button
              key={status}
              onClick={() => setSelectedStatus(status)}
              className={`px-4 py-2 rounded-md text-sm font-medium shadow-sm transition transform hover:scale-105
                  ${
                    selectedStatus === status
                      ? 'bg-indigo-600 text-white'
                      : 'bg-white text-gray-800 hover:bg-gray-200'
                  }`}
            >
              {status.charAt(0).toUpperCase() + status.slice(1)}
            </button>
          ))}
        </div>
      )}

      {showAdminStats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Total de Pedidos</p>
            <p className="text-2xl font-bold text-indigo-600">{totalOrders}</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Ventas Hoy</p>
            <p className="text-2xl font-bold text-indigo-600">{formatPriceCOP(todaySales)}</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Ventas del Mes</p>
            <p className="text-2xl font-bold text-indigo-600">{formatPriceCOP(monthSales)}</p>
          </div>
          <div className="bg-white rounded shadow p-4 text-center transition transform hover:scale-105">
            <p className="text-gray-600">Pedidos Pendientes</p>
            <p className="text-2xl font-bold text-indigo-600">{pendingOrdersCount}</p>
          </div>
        </div>
      )}

      {showAdminStats && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
          <div className="bg-white rounded shadow p-4">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">
              Resumen de Contabilidad Mensual
            </h2>
            <p className="text-gray-700">
              <strong>Ingresos Totales:</strong> {formatPriceCOP(monthlyIncome)}
            </p>
            <p className="text-gray-700">
              <strong>Egresos Totales:</strong> {formatPriceCOP(monthlyExpenses)}
            </p>
            <p className="text-gray-700 font-semibold">
              <strong>Balance Neto:</strong> {formatPriceCOP(monthlyBalance)}
            </p>
            <div className="h-64">
              {monthlyBalance > 0 ? (
                <Bar
                  data={{
                    labels: ['Balance Neto'],
                    datasets: [
                      { label: 'Balance Neto', data: [monthlyBalance], backgroundColor: '#22C55E' },
                    ],
                  }}
                  options={chartOptions}
                />
              ) : (
                <Bar
                  data={{
                    labels: ['Balance Neto'],
                    datasets: [
                      { label: 'Balance Neto', data: [monthlyBalance], backgroundColor: '#E53935' },
                    ],
                  }}
                  options={chartOptions}
                />
              )}
            </div>
          </div>
          {showAdminStats &&
          categoryData &&
          categoryData.labels?.length &&
          Array.isArray(categoryData.income) &&
          Array.isArray(categoryData.expenses) ? (
            <div className="bg-white rounded shadow p-4">
              <h2 className="text-xl font-semibold mb-4 text-gray-800">Análisis por Categoría</h2>
              <div className="h-64 relative">
                {categoryChartData &&
                categoryChartData.labels &&
                Array.isArray(categoryChartData.labels) &&
                categoryChartData.datasets &&
                Array.isArray(categoryChartData.datasets) ? (
                  <Pie data={categoryChartData} options={categoryChartOptions} />
                ) : (
                  <p className="text-gray-500 italic text-center">
                    Error al preparar datos para el gráfico de categorías.
                  </p>
                )}
              </div>
            </div>
          ) : null}
          {contabilityError && (
            <div className="bg-white rounded shadow p-4 text-center">
              <p className="text-red-500 font-semibold">Error al cargar datos de contabilidad.</p>
              <p className="text-gray-600 text-sm">
                Por favor, intenta recargar la página o contacta al administrador.
              </p>
            </div>
          )}
        </div>
      )}

      {showAdminStats && (
        <div className="bg-white rounded shadow p-4 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Comparativa de Ingresos y Egresos Mensuales
          </h2>
          <div className="h-64">
            <Line
              data={monthlyContabilidadChartData}
              options={monthlyContabilidadChartOptions}
              ref={chartRef}
            />
          </div>
        </div>
      )}

      {showAdminStats && (
        <div className="bg-white rounded shadow p-4 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Ventas diarias (últimos 7 días)
          </h2>
          <div className="h-64">
            <Bar data={dailyChartData} options={chartOptions} />
          </div>
        </div>
      )}

      {showAdminStats && (
        <div className="bg-white rounded shadow p-4 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Ventas mensuales (últimos 6 meses)
          </h2>
          <div className="h-64">
            <Bar data={monthlyChartData} options={chartOptions} />
          </div>
        </div>
      )}

      {showChecklist && (
        <div className="bg-white rounded shadow p-4 mb-6">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">
            Checklist Diario de Tareas (Hoy)
          </h2>
          <ul>
            {tasks.map((task) => (
              <li key={task.id} className="py-2 border-b border-gray-200 last:border-b-0">
                <div className="flex items-center justify-between">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      className="form-checkbox h-5 w-5 text-indigo-600 rounded focus:ring-indigo-500"
                      checked={
                        task.dailyCompletions[new Date().toISOString().split('T')[0]] === true
                      }
                      onChange={(e) => {
                        const x = handleTaskCompletionChange(task.id, e.target.checked)
                        console.log(x)
                      }}
                    />
                    <span className="ml-2 text-gray-700">{task.taskName}</span>
                  </label>
                </div>
                {task.subtasks && task.subtasks.length > 0 && (
                  <ul className="ml-6 mt-1">
                    {task.subtasks.map((subtask, index) => (
                      <li key={index} className="text-sm text-gray-500 list-disc ml-4">
                        {subtask}
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}

      {showChecklist && (
        <div className="bg-white rounded shadow p-4 mb-6 overflow-x-auto">
          <h2 className="text-xl font-semibold mb-4 text-gray-800">Estado de Tareas Semanal</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full table-fixed border-collapse border border-gray-200">
              <thead>
                <tr>
                  <th className="border border-gray-200 px-4 py-2 text-left">Tarea</th>
                  {last7Days.map((day) => (
                    <th
                      key={day.toISOString().split('T')[0]}
                      className="border border-gray-200 px-4 py-2 text-center"
                    >
                      {day.toLocaleDateString('es-ES', { weekday: 'short' })}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody>
                {tasks.map((task) => (
                  <tr key={task.taskId}>
                    <td className="border border-gray-200 px-4 py-2">{task.taskName}</td>
                    {last7DaysFormatted.map((date) => (
                      <td
                        key={`${task.taskId}-${date}`}
                        className="border border-gray-200 px-4 py-2 text-center"
                      >
                        {task.dailyCompletions[date] ? '✅' : '❌'}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  )
}

export default Dashboard

/* Fin src\pages\Dashboard.tsx */

/* Inicio src\pages\GestionMenu.tsx */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-misused-promises */
/* Inicio src\pages\GestionMenu.tsx */
// src/pages/GestionMenu.tsx
import { addDoc, collection, deleteDoc, doc, getDocs, updateDoc } from 'firebase/firestore'
import React, { useEffect, useRef, useState } from 'react'
import { COLLECTIONS } from '../utils/constants'
import { db } from '../utils/firebase'

import { createDefaultMenuItemsAndCombos, deleteAllMenuItems } from '../utils/menu-scripts'; // Importa las funciones

/* =====================================================
   INTERFACES Y TIPOS
===================================================== */

// Para costos adicionales (aplica a ítems y combos)
export interface AdditionalCost {
  description: string
  amount: number
}

// Interfaz de producto (MenuItemType)
export interface MenuItemType {
  id?: string
  name: string
  description: string
  price: number // Precio de venta
  cost: number // Costo interno
  points: number // Puntos asignados
  imageUrls: string[]
  available: boolean
  recommendation: string
  observations: string
  availabilityStatus: 'disponible' | 'noDisponibleMomento' | 'noDisponibleLargoPlazo'
  // Para combos:
  isCombo?: boolean
  components?: string[] // IDs de productos individuales seleccionados
  minimumPrice?: number // Precio mínimo (suma de los costos base y adicionales)
  comboSellingPrice?: number // Precio de venta configurado para el combo
  comboPoints?: number // Puntos asignados para el combo
  // Costos adicionales (opcional)
  additionalCosts?: AdditionalCost[]
}

// Valores iniciales para el formulario
const initialFormValues: Partial<MenuItemType> = {
  name: '',
  description: '',
  price: 0,
  cost: 0,
  points: 0,
  imageUrls: [],
  available: true,
  recommendation: '',
  observations: '',
  availabilityStatus: 'disponible',
  isCombo: false,
  components: [],
  minimumPrice: 0,
  comboSellingPrice: 0,
  comboPoints: 0,
  additionalCosts: [],
}

/* =====================================================
   COMPONENTES AUXILIARES
===================================================== */

// Componente para agregar y eliminar imágenes individualmente
const ImageInputList: React.FC<{
  images: string[]
  onChange: (imgs: string[]) => void
}> = ({ images, onChange }) => {
  const [newUrl, setNewUrl] = useState<string>('')

  const addImage = () => {
    if (newUrl.trim() !== '') {
      onChange([...images, newUrl.trim()])
      setNewUrl('')
    }
  }

  const removeImage = (index: number) => {
    const updated = images.filter((_, i) => i !== index)
    onChange(updated)
  }

  return (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700 mb-1">Imágenes</label>
      <div className="space-y-2">
        {images.map((url, index) => (
          <div key={index} className="flex items-center border rounded p-1 bg-gray-50">
            <input
              type="text"
              value={url}
              readOnly
              className="flex-1 p-1 bg-transparent focus:outline-none text-sm"
            />
            <button type="button" onClick={() => removeImage(index)} className="text-red-500 px-2">
              ×
            </button>
          </div>
        ))}
      </div>
      <div className="mt-2 flex gap-2">
        <input
          type="text"
          value={newUrl}
          onChange={(e) => setNewUrl(e.target.value)}
          placeholder="Nueva URL de imagen"
          className="flex-1 p-1 border rounded focus:outline-none text-sm"
        />
        <button
          type="button"
          onClick={addImage}
          className="bg-blue-500 text-white px-3 py-1 rounded text-sm"
        >
          Agregar
        </button>
      </div>
    </div>
  )
}

// Componente para gestionar costos adicionales
const AdditionalCostsInput: React.FC<{
  costs: AdditionalCost[]
  onChange: (costs: AdditionalCost[]) => void
}> = ({ costs, onChange }) => {
  const [desc, setDesc] = useState<string>('')
  const [amount, setAmount] = useState<number>(0)

  const addCost = () => {
    if (desc.trim() !== '' && amount > 0) {
      onChange([...costs, { description: desc.trim(), amount }])
      setDesc('')
      setAmount(0)
    }
  }

  const removeCost = (index: number) => {
    const updated = costs.filter((_, i) => i !== index)
    onChange(updated)
  }

  return (
    <div className="mb-4">
      <label className="block text-sm font-medium text-gray-700 mb-1">Costos adicionales</label>
      {costs.length > 0 && (
        <ul className="space-y-1">
          {costs.map((cost, index) => (
            <li
              key={index}
              className="flex items-center justify-between border p-1 rounded bg-gray-50 text-sm"
            >
              <span>
                {cost.description}:{' '}
                {cost.amount.toLocaleString('es-CO', {
                  style: 'currency',
                  currency: 'COP',
                  minimumFractionDigits: 0,
                })}
              </span>
              <button type="button" onClick={() => removeCost(index)} className="text-red-500 px-2">
                ×
              </button>
            </li>
          ))}
        </ul>
      )}
      <div className="mt-2 grid grid-cols-2 gap-2">
        <input
          type="text"
          value={desc}
          onChange={(e) => setDesc(e.target.value)}
          placeholder="Descripción"
          className="p-1 border rounded focus:outline-none text-sm"
        />
        <input
          type="number"
          min="0"
          value={amount || ''}
          onChange={(e) => setAmount(Number(e.target.value))}
          placeholder="Monto"
          className="p-1 border rounded focus:outline-none text-sm"
        />
      </div>
      <button
        type="button"
        onClick={addCost}
        className="mt-2 bg-blue-500 text-white px-3 py-1 rounded text-sm"
      >
        Agregar costo
      </button>
    </div>
  )
}

// Componente Carousel sencillo para mostrar imágenes con animación
const Carousel: React.FC<{ images: string[] }> = ({ images }) => {
  const imgs = images || []
  const [current, setCurrent] = useState(0)
  const timeoutRef = useRef<NodeJS.Timeout | null>(null)

  useEffect(() => {
    if (imgs.length === 0) return
    const next = () => {
      setCurrent((prev) => (prev + 1) % imgs.length)
    }
    timeoutRef.current = setInterval(next, 3000)
    return () => {
      if (timeoutRef.current) clearInterval(timeoutRef.current)
    }
  }, [imgs])

  if (imgs.length === 0) {
    return (
      <div className="w-full h-48 bg-gray-200 flex items-center justify-center">
        <span className="text-gray-500 text-sm">Sin imagen</span>
      </div>
    )
  }
  return (
    <div className="relative">
      <img
        src={imgs[current]}
        alt="Producto"
        className="w-full h-48 object-cover transition-all duration-500"
      />
    </div>
  )
}

/* =====================================================
   COMPONENTE PRINCIPAL: GestionMenu
===================================================== */
const GestionMenu: React.FC = () => {
  // Estados principales
  const [menuItems, setMenuItems] = useState<MenuItemType[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [modalOpen, setModalOpen] = useState<boolean>(false)
  const [editingItem, setEditingItem] = useState<MenuItemType | null>(null)
  const [formValues, setFormValues] = useState<Partial<MenuItemType>>(initialFormValues)
  const [alert, setAlert] = useState<{ type: 'success' | 'error'; message: string } | null>(null)
  // Validaciones reactivas por campo
  const [formErrors, setFormErrors] = useState<{ [key: string]: string }>({})
  // Modo: 'item' o 'combo'
  const [mode, setMode] = useState<'item' | 'combo'>('item')
  // Para combos: flujo en 2 pasos
  const [comboStep, setComboStep] = useState<number>(1)

  /* --- CARGA DE DATOS --- */
  // Define fetchMenu outside useEffect to be reusable
    const fetchMenu = async () => {
      setLoading(true)
      try {
        const querySnapshot = await getDocs(collection(db, COLLECTIONS.MENU))
        const items: MenuItemType[] = querySnapshot.docs.map((docSnap) => ({
          id: docSnap.id,
          ...docSnap.data(),
        })) as MenuItemType[]
        setMenuItems(items)
      } catch (error) {
        console.error('Error al cargar el menú:', error)
        setAlert({ type: 'error', message: 'Error al cargar el menú' })
      } finally {
        setLoading(false)
      }
    }

  useEffect(() => {
    fetchMenu() // Call fetchMenu on component mount
  }, [])

  const handleBulkDeleteMenu = async () => {
    const success = await deleteAllMenuItems()
    if (success) {
      // Recargar menú si la eliminación fue exitosa
      fetchMenu() // Use the defined fetchMenu function
    }
  }

  const handleBulkCreateDefaultMenu = async () => {
    const success = await createDefaultMenuItemsAndCombos()
    if (success) {
      // Recargar menú si la creación fue exitosa
      fetchMenu() // Use the defined fetchMenu function
    }
  }
  /* --- VALIDACIONES REACTIVAS --- */
  useEffect(() => {
    const errors: { [key: string]: string } = {}
    // Validaciones generales
    if (!formValues.name || formValues.name.trim() === '') {
      errors.name = 'El nombre es obligatorio'
    }
    if (formValues.price !== undefined && formValues.price < 0) {
      errors.price = 'El precio no puede ser negativo'
    }
    if (formValues.cost !== undefined && formValues.cost < 0) {
      errors.cost = 'El costo no puede ser negativo'
    }
    if (formValues.points !== undefined && formValues.points < 0) {
      errors.points = 'Los puntos no pueden ser negativos'
    }
    // Validaciones para combos
    if (mode === 'combo') {
      if (!formValues.components || formValues.components.length === 0) {
        errors.components = 'Debes seleccionar al menos un producto para el combo' // Mensaje más descriptivo
      }
      const baseCost = computeBaseCost()
      if ((Number(formValues.comboSellingPrice) || 0) < baseCost) {
        errors.comboSellingPrice =
          'El precio de venta del combo no puede ser menor que la suma de los costos base' // Mensaje más claro
      }
      const compPoints = computeComponentsPoints()
      if ((Number(formValues.comboPoints) || 0) < compPoints) {
        errors.comboPoints =
          'Los puntos del combo no pueden ser menores que la suma de los puntos de los productos' // Mensaje más claro
      }
      if (formValues.comboSellingPrice !== undefined && formValues.comboSellingPrice < 0) {
        // Validación precio combo negativo
        errors.comboSellingPrice = 'El precio de venta del combo no puede ser negativo'
      }
      if (formValues.comboPoints !== undefined && formValues.comboPoints < 0) {
        // Validación puntos combo negativos
        errors.comboPoints = 'Los puntos del combo no pueden ser negativos'
      }
    }
    setFormErrors(errors)
  }, [formValues, mode])

  /* --- MANEJO DEL FORMULARIO --- */
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormValues((prev) => ({
      ...prev,
      [name]:
        name === 'price' ||
        name === 'cost' ||
        name === 'points' ||
        name === 'minimumPrice' ||
        name === 'comboSellingPrice' ||
        name === 'comboPoints'
          ? Number(value) || 0
          : value,
    }))
  }

  // Cambio entre modos (producto o combo)
  const handleModeChange = (newMode: 'item' | 'combo') => {
    setMode(newMode)
    if (newMode === 'combo') {
      setComboStep(1)
    }
    setFormValues((prev) => ({
      ...prev,
      isCombo: newMode === 'combo',
      components: newMode === 'item' ? [] : prev.components,
      minimumPrice: newMode === 'item' ? 0 : prev.minimumPrice,
      comboSellingPrice: newMode === 'item' ? 0 : prev.comboSellingPrice,
      comboPoints: newMode === 'item' ? 0 : prev.comboPoints,
      additionalCosts: [],
    }))
  }

  // Selección de productos para el combo (solo productos individuales)
  const handleComponentToggle = (componentId: string) => {
    const current = formValues.components || []
    if (current.includes(componentId)) {
      setFormValues((prev) => ({
        ...prev,
        components: current.filter((id) => id !== componentId),
      }))
    } else {
      setFormValues((prev) => ({
        ...prev,
        components: [...current, componentId],
      }))
    }
  }

  // Funciones para calcular totales a partir de los productos seleccionados
  const computeBaseCost = () => {
    if (!formValues.components || menuItems.length === 0) return 0
    const compCost = menuItems
      .filter((item) => !item.isCombo && formValues.components.includes(item.id))
      .reduce((sum, item) => sum + (Number(item.cost) || 0), 0)
    const additional = formValues.additionalCosts
      ? formValues.additionalCosts.reduce((sum, cost) => sum + (Number(cost.amount) || 0), 0)
      : 0
    return compCost + additional
  }

  const computeSuggestedSellingPrice = () => {
    if (!formValues.components || menuItems.length === 0) return 0
    const sumPrice = menuItems
      .filter((item) => !item.isCombo && formValues.components.includes(item.id))
      .reduce((sum, item) => sum + (Number(item.price) || 0), 0)
    const additional = formValues.additionalCosts
      ? formValues.additionalCosts.reduce((sum, cost) => sum + (Number(cost.amount) || 0), 0)
      : 0
    return sumPrice + additional
  }

  const computeComponentsPoints = () => {
    if (!formValues.components || menuItems.length === 0) return 0
    return menuItems
      .filter((item) => !item.isCombo && formValues.components.includes(item.id))
      .reduce((sum, item) => sum + (Number(item.points) || 0), 0)
  }

  // Nueva función para calcular puntos sugeridos del combo (similar a computeSuggestedSellingPrice pero con puntos)
  const computeSuggestedPoints = () => {
    if (!formValues.components || menuItems.length === 0) return 0
    return menuItems
      .filter((item) => !item.isCombo && formValues.components.includes(item.id))
      .reduce((sum, item) => sum + (Number(item.points) || 0), 0)
  }

  /* --- APERTURA Y EDICIÓN DEL MODAL --- */
  const openAddModal = (newMode: 'item' | 'combo') => {
    handleModeChange(newMode)
    setFormValues({ ...initialFormValues, isCombo: newMode === 'combo' })
    setEditingItem(null)
    setModalOpen(true)
  }

  const openEditModal = (item: MenuItemType) => {
    setEditingItem(item)
    setMode(item.isCombo ? 'combo' : 'item')
    // Para combo editado, ir directamente a la vista final (paso 2)
    if (item.isCombo) {
      setComboStep(2)
    }
    setFormValues(item)
    setModalOpen(true)
  }

  /* --- OPERACIONES CON FIRESTORE --- */
  const handleDelete = async (item: MenuItemType) => {
    if (window.confirm(`¿Eliminar el item "${item.name}"?`)) {
      try {
        await deleteDoc(doc(db, COLLECTIONS.MENU, item.id))
        setMenuItems((prev) => prev.filter((i) => i.id !== item.id))
        setAlert({ type: 'success', message: 'Item eliminado correctamente' })
      } catch (error) {
        console.error(error)
        setAlert({ type: 'error', message: 'Error al eliminar el item' })
      }
    }
  }

  const handleSave = async () => {
    if (Object.keys(formErrors).length > 0) {
      setAlert({
        type: 'error',
        message: 'Corrige los errores antes de guardar',
      })
      return
    }
    if (!formValues.name || formValues.name.trim() === '') {
      setAlert({ type: 'error', message: 'El nombre es obligatorio' })
      return
    }
    try {
      if (editingItem) {
        await updateDoc(doc(db, COLLECTIONS.MENU, editingItem.id), formValues)
        setMenuItems((prev) =>
          prev.map((i) =>
            i.id === editingItem.id ? ({ ...i, ...formValues } as MenuItemType) : i,
          ),
        )
        setAlert({ type: 'success', message: 'Item actualizado correctamente' })
      } else {
        const docRef = await addDoc(collection(db, COLLECTIONS.MENU), formValues)
        setMenuItems((prev) => [...prev, { id: docRef.id, ...formValues } as MenuItemType])
        setAlert({ type: 'success', message: 'Item agregado correctamente' })
      }
      setModalOpen(false)
    } catch (error) {
      console.error(error)
      setAlert({
        type: 'error',
        message: (error as { message: string }).message || 'Error al guardar el item',
      })
    }
  }

  const handleMarkUnavailable = async (
    item: MenuItemType,
    type: 'noDisponibleMomento' | 'noDisponibleLargoPlazo',
  ) => {
    try {
      await updateDoc(doc(db, COLLECTIONS.MENU, item.id), {
        availabilityStatus: type,
        available: false,
      })
      setMenuItems((prev) =>
        prev.map((i) =>
          i.id === item.id
            ? ({ ...i, availabilityStatus: type, available: false } as MenuItemType)
            : i,
        ),
      )
      setAlert({
        type: 'success',
        message:
          type === 'noDisponibleMomento'
            ? 'Item marcado como no disponible ahora'
            : 'Item marcado como no disponible a largo plazo',
      })
    } catch (error) {
      console.error(error)
      setAlert({
        type: 'error',
        message: (error as { message: string }).message || 'Error al actualizar la disponibilidad',
      })
    }
  }

  const closeAlert = () => setAlert(null)

  // Helper para formatear precios
  const formatPrice = (value: number | undefined) => {
    const num = Number(value)
    if (isNaN(num)) return 'N/A'
    return num.toLocaleString('es-CO', {
      style: 'currency',
      currency: 'COP',
      minimumFractionDigits: 0,
    })
  }

  /* =====================================================
     RENDERIZADO PRINCIPAL
  ====================================================== */
  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-bold text-gray-800">Gestionar Menú</h1>
      </header>

      {alert && (
        <div
          className={`mb-4 p-3 rounded flex justify-between items-center ${
            alert.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }`}
        >
          <span>{alert.message}</span>
          <button onClick={closeAlert} className="font-bold text-xl">
            ×
          </button>
        </div>
      )}

      <div className="flex flex-col sm:flex-row sm:justify-between mb-4 gap-2">
        <div className="flex space-x-2">
          <button
            onClick={() => openAddModal('item')}
            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded flex-1"
          >
            Nuevo Producto
          </button>
          <button
            onClick={() => openAddModal('combo')}
            className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded flex-1"
          >
            Nuevo Combo
          </button>
        </div>
        {/* Aquí se agregan los nuevos botones */}
        <div className="flex space-x-2 mt-2 sm:mt-0">
          <button
            onClick={handleBulkDeleteMenu}
            className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded flex-1"
          >
            Eliminar Todo el Menú
          </button>
          <button
            onClick={handleBulkCreateDefaultMenu}
            className="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded flex-1"
          >
            Crear Menú por Defecto
          </button>
        </div>
      </div>

      {loading ? (
        <p className="text-center text-gray-600">Cargando menú...</p>
      ) : (
        <div className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
          {menuItems.map((item) => (
            <div key={item.id} className="bg-white rounded-lg shadow-lg overflow-hidden">
              <div className="relative">
                <Carousel images={item.imageUrls ?? []} />
                <div className="absolute top-2 right-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded">
                  {item.availabilityStatus === 'disponible'
                    ? 'Disponible'
                    : item.availabilityStatus === 'noDisponibleMomento'
                      ? 'No Disponible Ahora'
                      : 'No Disponible a Largo Plazo'}
                </div>
              </div>
              <div className="p-4">
                <h2 className="text-xl font-semibold text-gray-800">{item.name}</h2>
                <p className="text-gray-600 text-sm mt-1">{item.description}</p>
                <div className="mt-2">
                  <span className="font-medium text-gray-700">Precio:</span>{' '}
                  <span className="text-gray-900">{formatPrice(item.price)}</span>
                </div>
                <div className="mt-1">
                  <span className="font-medium text-gray-700">Costo:</span>{' '}
                  <span className="text-gray-900">{formatPrice(item.cost)}</span>
                </div>
                <div className="mt-1">
                  <span className="font-medium text-gray-700">Puntos:</span>{' '}
                  <span className="text-gray-900">{item.points}</span>
                </div>
                {item.isCombo && (
                  <div className="mt-2 p-2 border rounded bg-gray-50">
                    <p className="text-sm font-medium text-gray-800 mb-1">Combo</p>
                    <p className="text-xs text-gray-600">
                      Componentes:{' '}
                      {item.components &&
                        item.components
                          .map((compId) => {
                            const comp = menuItems.find((m) => m.id === compId)
                            return comp ? comp.name : ''
                          })
                          .join(', ')}
                    </p>
                    <p className="text-xs text-gray-600">
                      Base:{' '}
                      <span className="bg-red-100 px-1 rounded">{formatPrice(item.cost)}</span> |
                      Mínimo:{' '}
                      <span className="bg-red-100 px-1 rounded">
                        {formatPrice(item.minimumPrice || 0)}
                      </span>
                    </p>
                    <p className="text-xs text-gray-600">
                      Venta: {formatPrice(item.comboSellingPrice || item.price)} | Puntos:{' '}
                      {item.comboPoints || item.points}
                    </p>
                  </div>
                )}
                <div className="flex flex-wrap justify-between mt-4 gap-2">
                  <button
                    onClick={() => openEditModal(item)}
                    className="bg-green-500 hover:bg-green-600 text-white font-bold py-1 px-3 rounded text-sm flex-1"
                  >
                    Editar
                  </button>
                  <button
                    onClick={() => handleDelete(item)}
                    className="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded text-sm flex-1"
                  >
                    ✕
                  </button>
                </div>
                <div className="flex flex-wrap justify-between mt-2 gap-2">
                  <button
                    onClick={() => handleMarkUnavailable(item, 'noDisponibleMomento')}
                    className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-1 px-3 rounded text-xs flex-1"
                  >
                    No Disponible Ahora
                  </button>
                  <button
                    onClick={() => handleMarkUnavailable(item, 'noDisponibleLargoPlazo')}
                    className="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-3 rounded text-xs flex-1"
                  >
                    No Disponible Largo Plazo
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* MODAL: Agregar/Editar Producto o Combo */}
      {modalOpen && (
        <div
          className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 overflow-y-auto"
          onClick={() => setModalOpen(false)}
        >
          <div
            className="bg-white rounded-lg shadow-lg w-full max-w-lg p-6 my-4 mx-2 overflow-y-auto max-h-[90vh] animate-fade-in"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-2xl font-bold text-gray-800">
                {editingItem ? 'Editar Item' : 'Agregar Item'}
              </h2>
              {/* Botones para seleccionar modo */}
              <div className="flex space-x-2">
                <button
                  onClick={() => handleModeChange('item')}
                  className={`py-1 px-3 rounded ${
                    mode === 'item' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'
                  }`}
                >
                  Producto
                </button>
                <button
                  onClick={() => handleModeChange('combo')}
                  className={`py-1 px-3 rounded ${
                    mode === 'combo' ? 'bg-purple-500 text-white' : 'bg-gray-200 text-gray-700'
                  }`}
                >
                  Combo
                </button>
              </div>
            </div>

            {Object.keys(formErrors).length > 0 && (
              <div className="mb-4 p-2 bg-red-50 border border-red-200 text-red-600 text-sm rounded">
                Corrige los errores en el formulario.
              </div>
            )}

            {mode === 'combo' ? (
              <>
                {comboStep === 1 ? (
                  // Paso 1: Selección de productos e imágenes
                  <div className="space-y-4">
                    <p className="text-lg font-semibold text-gray-700">
                      Paso 1: Selecciona los productos para el combo
                    </p>
                    {formErrors.components && (
                      <p className="text-red-500 text-xs">{formErrors.components}</p>
                    )}
                    <div className="max-h-60 overflow-y-auto border rounded p-2">
                      {menuItems
                        .filter((item) => !item.isCombo)
                        .map((item) => (
                          <label key={item.id} className="flex items-center space-x-2 mb-1">
                            <input
                              type="checkbox"
                              checked={formValues.components?.includes(item.id) || false}
                              onChange={() => handleComponentToggle(item.id)}
                              className="h-4 w-4 text-blue-600 border-gray-300 rounded"
                            />
                            <span className="text-sm text-gray-700">
                              {item.name} ({formatPrice(item.cost)})
                            </span>
                          </label>
                        ))}
                    </div>
                    {/* Resumen de productos seleccionados */}
                    {formValues.components && formValues.components.length > 0 && (
                      <div className="mt-4 p-2 border rounded bg-white shadow">
                        <p className="font-semibold text-gray-700 mb-1">Productos Seleccionados:</p>
                        <ul className="divide-y divide-gray-200 text-sm">
                          {formValues.components.map((compId) => {
                            const product = menuItems.find((m) => m.id === compId)
                            if (!product) return null
                            return (
                              <li key={compId} className="flex justify-between py-1">
                                <span>{product.name}</span>
                                <span>{formatPrice(product.cost)}</span>
                              </li>
                            )
                          })}
                        </ul>
                        <div className="mt-2 text-right font-bold text-red-600">
                          Total Base: {formatPrice(computeBaseCost())}
                        </div>
                      </div>
                    )}
                    {/* Agregar imágenes para el combo */}
                    <ImageInputList
                      images={formValues.imageUrls || []}
                      onChange={(imgs) => setFormValues((prev) => ({ ...prev, imageUrls: imgs }))}
                    />
                    <div className="flex justify-end space-x-4">
                      <button
                        onClick={() => setModalOpen(false)}
                        className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
                        type="button"
                      >
                        Cancelar
                      </button>
                      <button
                        onClick={() => {
                          if (!formValues.components || formValues.components.length === 0) {
                            setAlert({
                              type: 'error',
                              message: 'Debes seleccionar al menos un producto.',
                            })
                          } else {
                            // Pre-cargar sugerencias: precio de venta sugerido y puntos sugeridos
                            setFormValues((prev) => ({
                              ...prev,
                              comboSellingPrice: computeSuggestedSellingPrice(),
                              comboPoints: computeSuggestedPoints(), // Usar la función correcta aquí
                            }))
                            setComboStep(2)
                            setAlert(null)
                          }
                        }}
                        className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                        type="button"
                      >
                        Siguiente
                      </button>
                    </div>
                  </div>
                ) : (
                  // Paso 2: Ingresar información básica, costos adicionales y preview
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Nombre</label>
                      <input
                        type="text"
                        name="name"
                        value={formValues.name || ''}
                        onChange={handleChange}
                        className="mt-1 block w-full p-2 border rounded focus:outline-none"
                      />
                      {formErrors.name && (
                        <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>
                      )}
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Descripción</label>
                      <textarea
                        name="description"
                        value={formValues.description || ''}
                        onChange={handleChange}
                        className="mt-1 block w-full p-2 border rounded focus:outline-none"
                      ></textarea>
                    </div>
                    <AdditionalCostsInput
                      costs={formValues.additionalCosts || []}
                      onChange={(costs) =>
                        setFormValues((prev) => ({ ...prev, additionalCosts: costs }))
                      }
                    />
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700">
                          Precio de Venta del Combo
                        </label>
                        <input
                          type="number"
                          name="comboSellingPrice"
                          min="0"
                          value={formValues.comboSellingPrice || 0}
                          onChange={handleChange}
                          className="mt-1 block w-full p-2 border rounded focus:outline-none"
                        />
                        {formErrors.comboSellingPrice && (
                          <p className="text-red-500 text-xs mt-1">
                            {formErrors.comboSellingPrice}
                          </p>
                        )}
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">
                          Puntos del Combo
                        </label>
                        <input
                          type="number"
                          name="comboPoints"
                          min="0"
                          value={formValues.comboPoints || 0}
                          onChange={handleChange}
                          className="mt-1 block w-full p-2 border rounded focus:outline-none"
                        />
                        {formErrors.comboPoints && (
                          <p className="text-red-500 text-xs mt-1">{formErrors.comboPoints}</p>
                        )}
                      </div>
                    </div>
                    {/* Preview del combo */}
                    <div className="p-4 border rounded bg-gray-50 shadow">
                      <p className="font-semibold text-gray-700 mb-1">Preview del Combo</p>
                      <p className="text-sm text-gray-600">
                        <strong>Nombre:</strong> {formValues.name || '(Sin nombre)'}
                      </p>
                      <p className="text-sm text-gray-600">
                        <strong>Descripción:</strong>{' '}
                        {formValues.description || '(Sin descripción)'}
                      </p>
                      <div className="mt-2">
                        <p className="text-sm font-semibold text-gray-700">
                          Productos Seleccionados:
                        </p>
                        <ul className="divide-y divide-gray-200 text-sm">
                          {formValues.components?.map((compId) => {
                            const product = menuItems.find((m) => m.id === compId)
                            if (!product) return null
                            return (
                              <li key={compId} className="flex justify-between py-1">
                                <span>{product.name}</span>
                                <span>{formatPrice(product.cost)}</span>
                              </li>
                            )
                          })}
                        </ul>
                      </div>
                      <div className="mt-2">
                        <p className="text-sm text-gray-700">
                          <strong>Costos adicionales:</strong>{' '}
                          {formValues.additionalCosts && formValues.additionalCosts.length > 0
                            ? formValues.additionalCosts
                                .map(
                                  (c) =>
                                    `${c.description}: ${c.amount.toLocaleString('es-CO', {
                                      style: 'currency',
                                      currency: 'COP',
                                      minimumFractionDigits: 0,
                                    })}`,
                                )
                                .join(' | ')
                            : 'Ninguno'}
                        </p>
                      </div>
                      <div className="mt-2">
                        <p className="text-sm text-red-600 font-bold">
                          Costo Base Sugerido: {formatPrice(computeBaseCost())}
                        </p>
                        <p className="text-sm text-green-600 font-bold">
                          Precio de Venta Sugerido: {formatPrice(computeSuggestedSellingPrice())}
                        </p>
                        <p className="text-sm text-indigo-600 font-bold">
                          Puntos Sugeridos: {computeSuggestedPoints()}
                        </p>
                      </div>
                    </div>
                    <div className="flex justify-between mt-6 space-x-4">
                      <button
                        onClick={() => setComboStep(1)}
                        className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
                        type="button"
                      >
                        Volver
                      </button>
                      <button
                        onClick={handleSave}
                        disabled={Object.keys(formErrors).length > 0}
                        className={`${
                          Object.keys(formErrors).length > 0
                            ? 'opacity-50 cursor-not-allowed'
                            : 'bg-blue-500 hover:bg-blue-600'
                        } text-white font-bold py-2 px-4 rounded`}
                        type="button"
                      >
                        Guardar Combo
                      </button>
                    </div>
                  </div>
                )}
              </>
            ) : (
              // Modo Producto: formulario único
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Nombre</label>
                  <input
                    type="text"
                    name="name"
                    value={formValues.name || ''}
                    onChange={handleChange}
                    className="mt-1 block w-full p-2 border rounded focus:outline-none"
                  />
                  {formErrors.name && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.name}</p>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Descripción</label>
                  <textarea
                    name="description"
                    value={formValues.description || ''}
                    onChange={handleChange}
                    className="mt-1 block w-full p-2 border rounded focus:outline-none"
                  ></textarea>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">
                      Precio de Venta
                    </label>
                    <input
                      type="number"
                      name="price"
                      min="0"
                      value={formValues.price || 0}
                      onChange={handleChange}
                      className="mt-1 block w-full p-2 border rounded focus:outline-none"
                    />
                    {formErrors.price && (
                      <p className="text-red-500 text-xs mt-1">{formErrors.price}</p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Costo</label>
                    <input
                      type="number"
                      name="cost"
                      min="0"
                      value={formValues.cost || 0}
                      onChange={handleChange}
                      className="mt-1 block w-full p-2 border rounded focus:outline-none"
                    />
                    {formErrors.cost && (
                      <p className="text-red-500 text-xs mt-1">{formErrors.cost}</p>
                    )}
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">Puntos</label>
                  <input
                    type="number"
                    name="points"
                    min="0"
                    value={formValues.points || 0}
                    onChange={handleChange}
                    className="mt-1 block w-full p-2 border rounded focus:outline-none"
                  />
                  {formErrors.points && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.points}</p>
                  )}
                </div>
                <div className="mt-2">
                  <ImageInputList
                    images={formValues.imageUrls || []}
                    onChange={(imgs) => setFormValues((prev) => ({ ...prev, imageUrls: imgs }))}
                  />
                </div>
                <div className="mt-4">
                  <AdditionalCostsInput
                    costs={formValues.additionalCosts || []}
                    onChange={(costs) =>
                      setFormValues((prev) => ({ ...prev, additionalCosts: costs }))
                    }
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Recomendación</label>
                    <input
                      type="text"
                      name="recommendation"
                      value={formValues.recommendation || ''}
                      onChange={handleChange}
                      className="mt-1 block w-full p-2 border rounded focus:outline-none"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Observaciones</label>
                    <input
                      type="text"
                      name="observations"
                      value={formValues.observations || ''}
                      onChange={handleChange}
                      className="mt-1 block w-full p-2 border rounded focus:outline-none"
                    />
                  </div>
                </div>
                <div className="mt-2">
                  <label className="block text-sm font-medium text-gray-700">Disponibilidad</label>
                  <div className="flex gap-2 mt-1">
                    <button
                      type="button"
                      onClick={() =>
                        setFormValues((prev) => ({
                          ...prev,
                          availabilityStatus: 'disponible',
                          available: true,
                        }))
                      }
                      className={`flex-1 py-2 rounded ${
                        formValues.availabilityStatus === 'disponible'
                          ? 'bg-blue-500 text-white'
                          : 'bg-gray-200 text-gray-700'
                      }`}
                    >
                      Disponible
                    </button>
                    <button
                      type="button"
                      onClick={() =>
                        setFormValues((prev) => ({
                          ...prev,
                          availabilityStatus: 'noDisponibleMomento',
                          available: false,
                        }))
                      }
                      className={`flex-1 py-2 rounded ${
                        formValues.availabilityStatus === 'noDisponibleMomento'
                          ? 'bg-yellow-500 text-white'
                          : 'bg-gray-200 text-gray-700'
                      }`}
                    >
                      No Disponible Ahora
                    </button>
                    <button
                      type="button"
                      onClick={() =>
                        setFormValues((prev) => ({
                          ...prev,
                          availabilityStatus: 'noDisponibleLargoPlazo',
                          available: false,
                        }))
                      }
                      className={`flex-1 py-2 rounded ${
                        formValues.availabilityStatus === 'noDisponibleLargoPlazo'
                          ? 'bg-red-600 text-white'
                          : 'bg-gray-200 text-gray-700'
                      }`}
                    >
                      No Disponible Largo Plazo
                    </button>
                  </div>
                </div>
                <div className="flex justify-end mt-6 space-x-4">
                  <button
                    onClick={() => setModalOpen(false)}
                    className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded"
                    type="button"
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={handleSave}
                    disabled={Object.keys(formErrors).length > 0}
                    className={`${
                      Object.keys(formErrors).length > 0
                        ? 'opacity-50 cursor-not-allowed'
                        : 'bg-blue-500 hover:bg-blue-600'
                    } text-white font-bold py-2 px-4 rounded`}
                    type="button"
                  >
                    Guardar Producto
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default GestionMenu

/* Fin src\pages\GestionMenu.tsx */

/* Fin src\pages\GestionMenu.tsx */

/* Inicio src\pages\GestionUsuarios.tsx */
// src/pages/GestionUsuarios.tsx
import {
    Button,
    Container,
    List,
    ListItem,
    ListItemText,
    Typography,
} from "@mui/material";
import { collection, doc, getDocs, updateDoc } from "firebase/firestore";
import React, { useEffect, useState } from "react";
import { db } from "../utils/firebase";

interface Usuario {
  uid: string;
  email: string;
  role: string;
  points: number;
}

const GestionUsuarios: React.FC = () => {
  const [usuarios, setUsuarios] = useState<Usuario[]>([]);

  useEffect(() => {
    const fetchUsuarios = async () => {
      const usuariosCol = collection(db, "users");
      const usuariosSnapshot = await getDocs(usuariosCol);
      const usuariosList = usuariosSnapshot.docs.map((doc) => ({
        uid: doc.id,
        email: doc.data().email || "No email",
        role: doc.data().role,
        points: doc.data().points || 0,
      }));
      setUsuarios(usuariosList);
    };

    fetchUsuarios();
  }, []);

  const cambiarRol = async (uid: string, nuevoRol: string) => {
    const usuarioRef = doc(db, "users", uid);
    await updateDoc(usuarioRef, { role: nuevoRol });
    setUsuarios((prevUsuarios) =>
      prevUsuarios.map((usuario) =>
        usuario.uid === uid ? { ...usuario, role: nuevoRol } : usuario
      )
    );
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Gestión de Usuarios
      </Typography>
      <List>
        {usuarios.map((usuario) => (
          <ListItem key={usuario.uid}>
            <ListItemText
              primary={`Correo: ${usuario.email}`}
              secondary={`Rol: ${usuario.role} | Puntos: ${usuario.points}`}
            />
            <Button
              variant="contained"
              color="secondary"
              onClick={() =>
                cambiarRol(
                  usuario.uid,
                  usuario.role === "admin" ? "client" : "admin"
                )
              }
            >
              Cambiar a {usuario.role === "admin" ? "Cliente" : "Administrador"}
            </Button>
          </ListItem>
        ))}
      </List>
    </Container>
  );
};

export default GestionUsuarios;

/* Fin src\pages\GestionUsuarios.tsx */

/* Inicio src\pages\Login.tsx */
// src/pages/Login.tsx
import React, { useState } from 'react'
import LoginForm from '../components/auth/LoginForm'
import RegisterForm from '../components/auth/RegisterForm'
import PublicLayout from '../components/layout/PublicLayout'
import '../styles/login.css' // Importa el archivo CSS específico para el login

const Login: React.FC = () => {
  const [tabValue, setTabValue] = useState(0)

  const handleChange = (newValue: number) => {
    setTabValue(newValue)
  }

  return (
    <PublicLayout>
      <div className="login-container">
        <div className="login-card">
          <div className="login-header">
            <img src="/SrPol.png" alt="Logo SrPol" className="login-logo" />
            <h1 className="login-title">SrPol</h1>
          </div>

          <div className="login-tabs">
            <button
              className={`login-tab ${tabValue === 0 ? 'active' : ''}`}
              onClick={() => handleChange(0)}
            >
              Iniciar Sesión
            </button>
            <button
              className={`login-tab ${tabValue === 1 ? 'active' : ''}`}
              onClick={() => handleChange(1)}
            >
              Registrarse
            </button>
          </div>

          <div
            className={`login-form-container ${tabValue === 0 ? 'slide-in-left' : 'slide-in-right'}`}
          >
            {tabValue === 0 && <LoginForm />}
            {tabValue === 1 && <RegisterForm />}
          </div>
        </div>
      </div>
    </PublicLayout>
  )
}

export default Login

/* Fin src\pages\Login.tsx */

/* Inicio src\pages\MenuPage.tsx */
/* Inicio src\pages\MenuPage.tsx */
/* src\pages\MenuPage.tsx */
/* src\pages\MenuPage.tsx */
import { Typography } from "@mui/material";
import { addDoc, collection, getDocs, query, where } from "firebase/firestore";
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";

import { Person } from "../components/menu/GroupOrderPage"; // Importa interfaces
import JoinOrderModal from "../components/menu/JoinOrderModal";
import PedidoForm from "../components/pedidos/PedidoForm";
import Button from "../components/ui/Button";
import Container from "../components/ui/Container";
import TextField from "../components/ui/TextField";
import { MenuItemType } from "../context/AppContext"; // Importa MenuItemType
import { useAuth } from "../hooks/useAuth";
import { useMenu } from "../hooks/useMenu";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

const MenuPage: React.FC = () => {
  const { menu } = useMenu();
  const [numPeople, setNumPeople] = useState<number>(1);
  const [people, setPeople] = useState<Person[]>(() => {
    // Initialize people here
    return Array.from({ length: 1 }, (_, index) => ({
      personIndex: index,
      userId: null,
      name: `Persona ${index + 1}`, // Default name for initial render
      items: [],
      locked: false,
      finished: false,
    }));
  });
  const [showMenu, setShowMenu] = useState(false);
  const [, setOpenPedidoModal] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [isCreatingSharedOrder, setIsCreatingSharedOrder] = useState(false);
  const [isJoiningOrder, setIsJoiningOrder] = useState(false);
  const [, setJoinCode] = useState("");
  const navigate = useNavigate();
  const { user } = useAuth();

  const handleNumPeopleChange = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    const num = Number(event.target.value);
    setNumPeople(num);

    // Initialize people array here based on numPeople
    const initialPeople = Array.from({ length: num }, (_, index) => ({
      personIndex: index,
      userId: null,
      name: `Persona ${index + 1}`, // Default name
      items: [],
      locked: false,
      finished: false,
    }));
    setPeople(initialPeople);
  };

  const handleNameChange = (index: number, value: string) => {
    const updatedPeople = [...people];
    if (updatedPeople[index]) {
      // Check if updatedPeople[index] is defined
      updatedPeople[index].name = value;
      setPeople(updatedPeople);
    }
  };

  const handleStartOrder = async () => {
    setIsCreatingSharedOrder(true);
    setShowMenu(true);

    const code = generateCode();
    try {
      if (!user) {
        setMessage("Debes iniciar sesión para crear un pedido compartido.");
        setTimeout(() => setMessage(null), 5000);
        setIsCreatingSharedOrder(false);
        return;
      }
      const groupOrderRef = await addDoc(
        collection(db, COLLECTIONS.GROUP_ORDERS),
        {
          code: code,
          ownerId: user.uid,
          status: "open",
          maxPeople: numPeople,
          createdAt: new Date(),
          participants: people, // Use the 'people' state which is now initialized
          sharedItems: [],
        }
      );
      navigate(`/menu/${groupOrderRef.id}?code=${code}`);
    } catch (error) {
      console.error("Error al crear pedido compartido en Firestore:", error);
      setMessage("Error al crear el pedido compartido.");
      setTimeout(() => setMessage(null), 5000);
      setIsCreatingSharedOrder(false);
    }
  };

  const handleAddItemToPerson = (personIndex: number, item: MenuItemType) => {
    setPeople(
      (prevPeople) =>
        prevPeople.map((person, index) =>
          index === personIndex
            ? {
                ...person,
                items: [...person.items, { itemId: item.id, quantity: 1 }], // Usa itemId en lugar de id
              }
            : person
        ) as Person[]
    );
  };

  const handlePersonOrderItemQuantityChange = (
    personIndex: number,
    itemId: string,
    quantity: string
  ) => {
    const quantityNumber = parseInt(quantity, 10);
    if (isNaN(quantityNumber) || quantityNumber < 0) {
      return;
    }

    setPeople((prevPeople) =>
      prevPeople.map((person, index) =>
        index === personIndex
          ? {
              ...person,
              items: person.items.map((item) =>
                item.id === itemId // Usa itemId para comparar
                  ? { ...item, quantity: quantityNumber }
                  : item
              ),
            }
          : person
      )
    );
  };

  const handleRemoveItemFromPerson = (personIndex: number, itemId: string) => {
    setPeople((prevPeople) =>
      prevPeople.map((person, index) =>
        index === personIndex
          ? {
              ...person,
              items: person.items.filter((item) => item.id !== itemId), // Usa itemId para filtrar
            }
          : person
      )
    );
  };

  const handleOpenPedidoModal = () => {
    setOpenPedidoModal(true);
  };

  const handleClosePedidoModal = () => {
    setOpenPedidoModal(false);
  };

  const generateCode = () => {
    return Math.floor(1000 + Math.random() * 9000).toString();
  };

  const handleJoinOrder = () => {
    setIsJoiningOrder(true);
  };

  const processJoinOrder = async (code: string) => {
    setIsJoiningOrder(false);
    setJoinCode(code);
    const q = query(
      collection(db, COLLECTIONS.GROUP_ORDERS),
      where("code", "==", code),
      where("status", "==", "open")
    );
    try {
      const querySnapshot = await getDocs(q);
      if (!querySnapshot.empty) {
        const groupOrderDoc = querySnapshot.docs[0];
        navigate(`/menu/${groupOrderDoc.id}?code=${code}`);
      } else {
        setMessage(
          "No hay pedido activo con este código o el código es incorrecto."
        );
        setTimeout(() => setMessage(null), 5000);
      }
    } catch (error) {
      console.error("Error al buscar pedido compartido:", error);
      setMessage("Error al unirse al pedido compartido.");
      setTimeout(() => setMessage(null), 5000);
    }
  };

  const formatPriceCOP = (price: number) => {
    return price.toLocaleString("es-CO", {
      style: "currency",
      currency: "COP",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    });
  };

  return (
    <Container className="my-8">
      <div className="text-center mb-8">
        <Typography
          variant="h4"
          component="h1"
          className="text-3xl font-bold text-gray-900 mb-2"
        >
          ¡Descubre nuestro Menú y Pide Fácil!
        </Typography>
        <Typography className="text-gray-600">
          Crea un pedido compartido con amigos o únete a uno existente.
        </Typography>
      </div>

      <div className="mb-8 grid grid-cols-1 md:grid-cols-2 gap-6 max-w-lg mx-auto">
        <Button
          variant="contained"
          color="primary"
          onClick={() => setIsCreatingSharedOrder(true)}
          className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
        >
          🎉 Crear Pedido Compartido
        </Button>
        <Button
          variant="outlined"
          color="primary"
          onClick={handleJoinOrder}
          className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
        >
          🤝 Unirme a Pedido Existente
        </Button>
      </div>

      {message && (
        <div className="mb-4 text-center text-red-500">{message}</div>
      )}

      {isCreatingSharedOrder && !showMenu && (
        <div className="max-w-md mx-auto p-6 rounded-xl shadow-lg bg-white animate-slide-down overflow-hidden">
          <Typography variant="h6" className="text-gray-800 mb-4 text-center">
            Configura tu Pedido Compartido
          </Typography>
          <div className="mb-4">
            <label
              htmlFor="numPeople"
              className="block text-gray-700 text-sm font-bold mb-2"
            >
              ¿Cuántas personas?
            </label>
            <TextField
              type="number"
              id="numPeople"
              value={numPeople}
              onChange={handleNumPeopleChange}
              min="1"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            />
          </div>
          {Array.from({ length: numPeople }).map((_, index) => (
            <div key={index} className="mb-4">
              <label
                htmlFor={`personName-${index}`}
                className="block text-gray-700 text-sm font-bold mb-2"
              >
                Nombre de la persona {index + 1} (Opcional):
              </label>
              <TextField
                type="text"
                id={`personName-${index}`}
                value={people[index]?.name}
                onChange={(e) => handleNameChange(index, e.target.value)}
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              />
            </div>
          ))}
          <div className="mt-6 text-center">
            <Button
              variant="contained"
              color="primary"
              onClick={handleStartOrder}
              className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300"
            >
              Comenzar a Pedir
            </Button>
          </div>
        </div>
      )}

      {showMenu && (
        <div className="mt-10">
          <Typography
            variant="h5"
            className="font-bold text-gray-900 mb-6 text-center"
          >
            Nuestro Menú para Hoy
          </Typography>
          <div className="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {people.map((person, personIndex) => (
              <div
                key={person.personIndex} // Usa personIndex como key
                className="p-6 border rounded-xl shadow-md bg-white hover:shadow-lg transition-shadow duration-300"
              >
                <h2 className="text-xl font-semibold text-gray-900 mb-4">
                  {person.name || `Persona ${personIndex + 1}`}
                </h2>
                <p className="text-gray-700 mb-3">
                  Selecciona tus items del menú:
                </p>
                <ul className="mb-4 space-y-3">
                  {person.items.length > 0 ? (
                    person.items.map((item) => {
                      const menuItem = menu.find(
                        (menuItem) => menuItem.id === item.id // Usa itemId para buscar
                      );
                      return menuItem ? (
                        <li
                          key={item.id}
                          className="py-2 px-4 rounded-md bg-gray-100 flex items-center justify-between"
                        >
                          <Typography className="text-gray-800">
                            {menuItem.name} x {item.quantity}
                          </Typography>
                          <div className="flex items-center space-x-2">
                            <TextField
                              type="number"
                              value={item.quantity}
                              onChange={(e) =>
                                handlePersonOrderItemQuantityChange(
                                  personIndex,
                                  item.id,
                                  e.target.value
                                )
                              }
                              min="1"
                              className="shadow appearance-none border rounded w-16 py-1 px-2 text-gray-700 leading-tight focus:outline-none focus:shadow-outline text-center"
                            />
                            <Button
                              variant="contained"
                              color="error"
                              onClick={() =>
                                handleRemoveItemFromPerson(personIndex, item.id)
                              }
                              className="py-1 px-3 text-sm rounded-md"
                            >
                              Eliminar
                            </Button>
                          </div>
                        </li>
                      ) : null;
                    })
                  ) : (
                    <Typography className="text-gray-500">
                      Aún no has seleccionado items.
                    </Typography>
                  )}
                </ul>
                <div className="grid gap-4 grid-cols-1 md:grid-cols-2">
                  {menu.map((item) => (
                    <Button
                      key={item.id}
                      variant="outlined"
                      color="primary"
                      onClick={() => handleAddItemToPerson(personIndex, item)}
                      className="py-2 px-4 rounded-md transition-colors duration-300 border-blue-500 text-blue-500 hover:bg-blue-50"
                    >
                      {item.name} - {formatPriceCOP(item.price)}
                    </Button>
                  ))}
                </div>
              </div>
            ))}
          </div>
          <div className="mt-12 text-center">
            <Button
              variant="contained"
              color="success"
              onClick={handleOpenPedidoModal}
              className="py-3 px-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 text-xl"
            >
              ¡Realizar Pedido Grupal!
            </Button>
          </div>
          <PedidoForm onClose={handleClosePedidoModal} people={people} />
        </div>
      )}

      <JoinOrderModal
        open={isJoiningOrder}
        onClose={() => setIsJoiningOrder(false)}
        onJoinOrder={processJoinOrder}
      />
    </Container>
  );
};

export default MenuPage;
/* Fin src\pages\MenuPage.tsx */

/* Fin src\pages\MenuPage.tsx */

/* Inicio src\pages\PedidosPage.tsx */

import { Container, Typography } from "@mui/material";
import React from "react";
import PedidoList from "../components/pedidos/PedidoList";

const PedidosPage: React.FC = () => {
  return (
    <Container sx={{ marginY: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Pedidos
      </Typography>
      <PedidoList />
    </Container>
  );
};

export default PedidosPage;

/* Fin src\pages\PedidosPage.tsx */

/* Inicio src\pages\Perfil.tsx */
// src/pages/Perfil.tsx
import {
  Alert,
  Avatar,
  Button,
  Container,
  Grid,
  Paper,
  Snackbar,
  Typography,
} from "@mui/material";
import React, { useState } from "react";
import { useAuth } from "../hooks/useAuth";

const Perfil: React.FC = () => {
  const { user, addPoints, points } = useAuth();
  const [snackbar, setSnackbar] = useState<{
    open: boolean;
    message: string;
    severity: "success" | "error";
  }>({ open: false, message: "", severity: "success" });

  const handleAddPoints = async () => {
    try {
      await addPoints();
      setSnackbar({
        open: true,
        message: "Puntos agregados exitosamente.",
        severity: "success",
      });
    } catch {
      setSnackbar({
        open: true,
        message: "Error al agregar puntos.",
        severity: "error",
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  return (
    <Container sx={{ marginY: 3 }}>
      <Paper sx={{ padding: 4 }}>
        <Grid container spacing={4}>
          <Grid item xs={12} sm={4} sx={{ textAlign: "center" }}>
            <Avatar
              alt={user?.email}
              src="/static/images/avatar/1.jpg"
              sx={{ width: 120, height: 120, margin: "0 auto" }}
            />
            <Typography variant="h6" sx={{ mt: 2 }}>
              {user?.email}
            </Typography>
          </Grid>
          <Grid item xs={12} sm={8}>
            <Typography variant="h5" gutterBottom>
              Información del Perfil
            </Typography>
            <Typography variant="body1">
              <strong>UID:</strong> {user?.uid}
            </Typography>
            <Typography variant="body1">
              <strong>Puntos:</strong> {points}
            </Typography>
            <Button
              variant="contained"
              color="primary"
              onClick={handleAddPoints}
              sx={{ mt: 2 }}
            >
              Sumar 10 Puntos
            </Button>
          </Grid>
        </Grid>
      </Paper>
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          sx={{ width: "100%" }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default Perfil;

/* Fin src\pages\Perfil.tsx */

/* Inicio src\pages\Success.tsx */
// src/pages/Success.tsx
import { Container, Typography } from "@mui/material";
import React, { useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { handlePaymentNotification } from "../payment/payment";
import "../styles/global.css";

const Success: React.FC = () => {
  const [searchParams] = useSearchParams();
  const sessionId = searchParams.get("session_id");
  const navigate = useNavigate();

  useEffect(() => {
    const handleSuccessPayment = async () => {
      if (sessionId) {
        try {
          await handlePaymentNotification(sessionId);
          navigate("/pedidos");
        } catch (error) {
          console.log(
            "Error al procesar el pago:",
            (error as { message: string }).message
          );
          navigate("/pedidos");
        }
      } else {
        navigate("/pedidos");
      }
    };
    handleSuccessPayment();
  }, [navigate, sessionId]);

  return (
    <Container>
      <Typography variant="h4">Pago exitoso, gracias por tu compra</Typography>
    </Container>
  );
};

export default Success;

/* Fin src\pages\Success.tsx */

/* Inicio src\payment\payment.ts */
// src/payment/payment.ts
import { doc, updateDoc } from "firebase/firestore";
import { COLLECTIONS } from "../utils/constants";
import { db } from "../utils/firebase";

export const updateOrderStatus = async (orderId: string, status: string) => {
    try {
        await updateDoc(doc(db, COLLECTIONS.PEDIDOS, orderId), { status: status });
        return true;
    } catch (error) {
        console.error("Error al actualizar el estado del pedido:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al actualizar el estado del pedido");
    }
};

export const handlePaymentNotification = async (session_id: string) => {
    console.log("Manejando notificacion de pago:", session_id);
    try {
        // Aquí debes implementar la lógica para verificar el pago con Stripe
        // Por ejemplo, puedes hacer una llamada a tu backend para verificar el estado del pago
        // Luego, actualizar el estado del pedido en Firestore
        // Este es un ejemplo simplificado:

        // Simulación de verificación de pago
        const paymentVerified = true; // Reemplaza con la lógica real

        if (paymentVerified) {
            // Supongamos que tienes el orderId en los metadatos de la sesión
            const orderId = "orderId_from_metadata"; // Reemplaza con el valor real
            await updateOrderStatus(orderId, "enviado");
            return true;
        } else {
            throw new Error("Pago no verificado");
        }
    } catch (error) {
        console.log("Error", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || "Error al manejar la notificacion");
    }
};

declare const window;

export const createCheckoutSession = async (amount: number, orderId: string) => {
    try {
        const response = await fetch('https://api.stripe.com/v1/checkout/sessions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer YOUR_STRIPE_SECRET_KEY`,
            },
            body: JSON.stringify({
                line_items: [
                    {
                        price_data: {
                            currency: 'usd',
                            unit_amount: amount * 100,
                            product_data: {
                                name: 'Pedido',
                            },
                        },
                        quantity: 1,
                    }
                ],
                mode: 'payment',
                success_url: `${window.location.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
                cancel_url: window.location.origin,
                metadata: {
                    orderId: orderId,
                },
            }),
        });
        const data = await response.json();
        if (!response.ok) {
            throw new Error(data.message || 'Error al crear sesion');
        }
        return data.id;
    } catch (error) {
        console.error("Error al crear la sesion de checkout:", (error as { message: string }).message);
        throw new Error((error as { message: string }).message || 'Error al crear sesion');
    }
};

export const processPayment = async (sessionId: string, publicKey: string) => {
    const stripe = window.Stripe(publicKey);
    stripe.redirectToCheckout({ sessionId });
};

/* Fin src\payment\payment.ts */

/* Inicio src\types\css.d.ts */
declare module '*.css'

/* Fin src\types\css.d.ts */

/* Inicio src\types\global.d.ts */
// src/types/global.d.ts
import { MenuItem } from '../context/AppContext'

declare global {
  interface Window {
    MercadoPago?: MercadoPago
    Stripe: (publicKey: string) => void
  }
  export type MenuItemType = MenuItem // Exporta MenuItemType
}

interface MercadoPago {
  new(
    publicKey: string,
    options?,
  ): {
    checkout: (params) => void
  }
}

export { }; // Exporta un objeto vacío para evitar error de módulo

declare module '*.svg?url' {
  const content: string;
  export default content;
}
declare module '*.svg' {
  const content: string;
  export default content;
}

/* Fin src\types\global.d.ts */

/* Inicio src\utils\constants.ts */
/* src\utils\constants.ts */
export const COLLECTIONS = {
  MENU: 'menu',
  PEDIDOS: 'pedidos',
  GROUP_ORDERS: 'groupOrders', // Añadida la nueva colección
};
/* Fin src\utils\constants.ts */

/* Inicio src\utils\firebase.ts */
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const firebaseConfig = {
  apiKey: "AIzaSyCKnLLXRtyfyLwVDVs05-q1NLR2JidFzus",
  authDomain: "alacartes.firebaseapp.com",
  projectId: "alacartes",
  storageBucket: "alacartes.firebasestorage.app",
  messagingSenderId: "145893311915",
  appId: "1:145893311915:web:9cd7cb44eba542ffda3eee"
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
/* Fin src\utils\firebase.ts */

/* Inicio src\utils\menu-scripts.ts */
// src/utils/menu-scripts.ts
import { addDoc, collection, deleteDoc, doc, getDocs } from 'firebase/firestore';
import { MenuItemType } from '../context/AppContext'; // Asegúrate de la ruta correcta
import { COLLECTIONS } from './constants';
import { auth, db } from './firebase';

export const deleteAllMenuItems = async () => {
    if (!auth.currentUser) {
        alert('Debes estar autenticado para eliminar el menú.');
        return;
    }
    if (!window.confirm('¿Estás seguro de que quieres eliminar TODO el menú? Esta acción es irreversible.')) {
        return;
    }
    try {
        const querySnapshot = await getDocs(collection(db, COLLECTIONS.MENU));
        const batch = [];
        querySnapshot.forEach((docSnap) => {
            batch.push(deleteDoc(doc(db, COLLECTIONS.MENU, docSnap.id)));
        });
        await Promise.all(batch);
        alert('Menú eliminado completamente.');
        return true; // Indica éxito
    } catch (error) {
        console.error('Error al eliminar el menú:', error);
        alert('Error al eliminar el menú.');
        return false; // Indica fallo
    }
};

export const createDefaultMenuItemsAndCombos = async () => {
    if (!auth.currentUser) {
        alert('Debes estar autenticado para crear el menú por defecto.');
        return;
    }
    if (!window.confirm('¿Estás seguro de que quieres crear el menú por defecto? Esto reemplazará el menú actual.')) {
        return;
    }

    try {
        const menuCollection = collection(db, COLLECTIONS.MENU);

        // Productos base
        const productosBase: Partial<MenuItemType>[] = [
            {
                name: 'Jugo Natural Naranja',
                description: 'Jugo refrescante de naranja natural.',
                price: 8000,
                cost: 3000,
                points: 10,
                imageUrls: ['https://bognermex.com/cdn/shop/articles/500x500.jpg?v=1683239129', 'https://cdnx.jumpseller.com/el-kiosco-golosinas/image/24547259/El_Kiosco_jugos_naturales.jpg?1653862612', 'https://lirp.cdn-website.com/586fb047/dms3rep/multi/opt/jugos+naturales-1920w.jpg'],
                available: true,
                recommendation: 'Bebida refrescante',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Jugo Natural Fresa',
                description: 'Jugo refrescante de fresa natural.',
                price: 9000,
                cost: 3500,
                points: 10,
                imageUrls: ['https://bognermex.com/cdn/shop/articles/500x500.jpg?v=1683239129', 'https://cdnx.jumpseller.com/el-kiosco-golosinas/image/24547259/El_Kiosco_jugos_naturales.jpg?1653862612', 'https://lirp.cdn-website.com/586fb047/dms3rep/multi/opt/jugos+naturales-1920w.jpg'],
                available: true,
                recommendation: 'Bebida dulce y refrescante',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Limonada Natural',
                description: 'Clásica limonada refrescante.',
                price: 7000,
                cost: 2500,
                points: 10,
                imageUrls: ['https://www.hersheyland.mx/content/dam/Hersheyland_Mexico/es_mx/recipes/recipe-images/limonada.jpg', 'https://i.blogs.es/27a047/limonadas-variadas/1366_2000.jpg', 'https://i.blogs.es/5b3c0d/1366_2000-1-/1366_2000.jpg'],
                available: true,
                recommendation: 'Ideal para acompañar comidas',
                observations: 'Se puede pedir sin azúcar',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Limonada Cerezada',
                description: 'Limonada con un toque dulce de cereza.',
                price: 8000,
                cost: 3000,
                points: 10,
                imageUrls: ['https://www.hersheyland.mx/content/dam/Hersheyland_Mexico/es_mx/recipes/recipe-images/limonada.jpg', 'https://i.blogs.es/27a047/limonadas-variadas/1366_2000.jpg', 'https://i.blogs.es/5b3c0d/1366_2000-1-/1366_2000.jpg'],
                available: true,
                recommendation: 'Dulce y refrescante',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Pollo Broaster Personal',
                description: 'Delicioso pollo broaster, crujiente y jugoso, porción personal.',
                price: 15000,
                cost: 7000,
                points: 20,
                imageUrls: ['https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQG3B7ysBd_tXYPFKXQVjss1BipZ9Id-xr2QA&s', 'https://www.gourmet.com.co/wp-content/uploads/2023/12/Gourmet-Pollo-broaster.webp', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ-vxztR7cg3LVOqUYHrUVBErD96T17RhL621TK5PE0IfPUXoVLT8sLneFQKeEmVQeYQtc&usqp=CAU'],
                available: true,
                recommendation: 'Nuestro plato estrella',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Porción Papas Fritas Pequeña',
                description: 'Porción pequeña de papas fritas, crujientes y doradas.',
                price: 6000,
                cost: 2000,
                points: 10,
                imageUrls: ['https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQprKoqyoxNcntQpFeC9Lu1ve5UxUe0Pe6PHg&s', 'https://www.paulinacocina.net/wp-content/uploads/2015/08/p1140112-640x480.jpg', 'https://imagenes.eltiempo.com/files/image_1200_600/uploads/2021/04/15/6078c68c2f49b.jpeg'],
                available: true,
                recommendation: 'Acompañante perfecto',
                observations: 'Se puede pedir con sal o sin sal',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Alitas BBQ (6 unidades)',
                description: '6 unidades de alitas de pollo en salsa BBQ.',
                price: 12000,
                cost: 5000,
                points: 10,
                imageUrls: ['https://assets.unileversolutions.com/recipes-v2/237633.jpg', 'https://cdn0.uncomo.com/es/posts/6/0/7/como_hacer_alitas_bbq_sin_horno_50706_600.jpg', 'https://www.unileverfoodsolutions.com.co/dam/global-ufs/mcos/NOLA/calcmenu/recipes/col-recipies/fruco/ALITAS-SALSA-1024X1024-px.jpg'],
                available: true,
                recommendation: 'Para picar y compartir',
                observations: 'Salsa BBQ casera',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Alipapas Personal',
                description: 'Combinación de alitas BBQ (3 unidades) y papas fritas porción personal.',
                price: 18000,
                cost: 8000,
                points: 20,
                imageUrls: ['https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTE9vs5PvwBQ3EDf3oHaFjNlGTylZQQ76Zpag&s', 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ7StXb9BxAu9eDibcKlWihfQZKbSD1Aaf0M-mf3ZaxZUQzMvrURw4TJCKyjuU4S5QkeQY&usqp=CAU'],
                available: true,
                recommendation: 'Ideal para una persona',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
            {
                name: 'Porción Arroz Pequeña',
                description: 'Porción pequeña de arroz blanco.',
                price: 4000,
                cost: 1500,
                points: 10,
                imageUrls: ['https://img.freepik.com/fotos-premium/porcion-arroz-cocido-adornar_219193-12145.jpg', 'https://huertalejandro.com/wp-content/uploads/2020/05/arroz.jpg'],
                available: true,
                recommendation: 'Acompañante para platos fuertes',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: false,
                components: [],
                minimumPrice: 0,
                comboSellingPrice: 0,
                comboPoints: 0,
                additionalCosts: [],
            },
        ];

        // Combos
        const combos: Partial<MenuItemType>[] = [
            {
                name: 'Combo Pollo Jugo',
                description: '1 Pollo broaster personal + 1 Jugo natural a elección.',
                price: 20000,
                cost: 10000,
                points: 30,
                imageUrls: ['https://www.gourmet.com.co/wp-content/uploads/2023/12/Gourmet-Pollo-broaster.webp', 'https://lirp.cdn-website.com/586fb047/dms3rep/multi/opt/jugos+naturales-1920w.jpg'],
                available: true,
                recommendation: 'Combo clásico y completo',
                observations: 'Elige el sabor del jugo',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 20000,
                comboPoints: 30,
                additionalCosts: [],
            },
            {
                name: 'Combo Alitas Papas',
                description: 'Alitas BBQ (6 unidades) + Porción de papas fritas pequeña.',
                price: 16000,
                cost: 7000,
                points: 20,
                imageUrls: ['https://assets.unileversolutions.com/recipes-v2/237633.jpg', 'https://www.paulinacocina.net/wp-content/uploads/2015/08/p1140112-640x480.jpg'],
                available: true,
                recommendation: 'Perfecto para compartir',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 16000,
                comboPoints: 20,
                additionalCosts: [],
            },
            // ... (Combos adicionales - puedes agregar más siguiendo el mismo patrón)
            {
                name: 'Combo Familiar Broaster',
                description: '2 Pollos broaster personales + 2 Porciones de papas fritas pequeñas + 2 Jugos naturales grandes.',
                price: 50000,
                cost: 25000,
                points: 60,
                imageUrls: ['https://www.gourmet.com.co/wp-content/uploads/2023/12/Gourmet-Pollo-broaster.webp', 'https://www.paulinacocina.net/wp-content/uploads/2015/08/p1140112-640x480.jpg', 'https://lirp.cdn-website.com/586fb047/dms3rep/multi/opt/jugos+naturales-1920w.jpg'],
                available: true,
                recommendation: 'Ideal para familias o grupos',
                observations: 'Incluye aderezos y salsas',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 50000,
                comboPoints: 60,
                additionalCosts: [],
            },
            {
                name: 'Combo Individual Alipapas',
                description: '1 Alipapas Personal + 1 Limonada Natural.',
                price: 24000,
                cost: 12000,
                points: 30,
                imageUrls: ['https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTE9vs5PvwBQ3EDf3oHaFjNlGTylZQQ76Zpag&s', 'https://www.hersheyland.mx/content/dam/Hersheyland_Mexico/es_mx/recipes/recipe-images/limonada.jpg'],
                available: true,
                recommendation: 'Opción rápida y deliciosa',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 24000,
                comboPoints: 30,
                additionalCosts: [],
            },
            {
                name: 'Combo Doble Pollo',
                description: '2 Pollos broaster personales + Porción de arroz pequeña.',
                price: 38000,
                cost: 18000,
                points: 40,
                imageUrls: ['https://www.gourmet.com.co/wp-content/uploads/2023/12/Gourmet-Pollo-broaster.webp', 'https://img.freepik.com/fotos-premium/porcion-arroz-cocido-adornar_219193-12145.jpg'],
                available: true,
                recommendation: 'Para compartir o para mucho apetito',
                observations: 'Incluye salsas',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 38000,
                comboPoints: 40,
                additionalCosts: [],
            },
            {
                name: 'Combo Alitas y Arroz',
                description: 'Alitas BBQ (6 unidades) + Porción de arroz pequeña.',
                price: 17000,
                cost: 8000,
                points: 20,
                imageUrls: ['https://assets.unileversolutions.com/recipes-v2/237633.jpg', 'https://img.freepik.com/fotos-premium/porcion-arroz-cocido-adornar_219193-12145.jpg'],
                available: true,
                recommendation: 'Combinación sabrosa y económica',
                observations: '',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 17000,
                comboPoints: 20,
                additionalCosts: [],
            },
            {
                name: 'Super Combo Pollo Completo',
                description: '2 Pollos broaster personales + Alitas BBQ (6 unidades) + Porción de papas fritas pequeña + 2 Limonadas Cerezadas.',
                price: 65000,
                cost: 30000,
                points: 80,
                imageUrls: ['https://www.gourmet.com.co/wp-content/uploads/2023/12/Gourmet-Pollo-broaster.webp', 'https://assets.unileversolutions.com/recipes-v2/237633.jpg', 'https://www.paulinacocina.net/wp-content/uploads/2015/08/p1140112-640x480.jpg', 'https://www.hersheyland.mx/content/dam/Hersheyland_Mexico/es_mx/recipes/recipe-images/limonada.jpg'],
                available: true,
                recommendation: 'El combo más completo para compartir',
                observations: 'Incluye todas las salsas y aderezos',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 65000,
                comboPoints: 80,
                additionalCosts: [],
            },
            {
                name: 'Combo Ahorro Alitas',
                description: 'Alitas BBQ (12 unidades) + Porción de papas fritas pequeña.',
                price: 22000,
                cost: 11000,
                points: 30,
                imageUrls: ['https://assets.unileversolutions.com/recipes-v2/237633.jpg', 'https://www.paulinacocina.net/wp-content/uploads/2015/08/p1140112-640x480.jpg'],
                available: true,
                recommendation: 'Más alitas, más sabor',
                observations: 'Ideal para reuniones informales',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 22000,
                comboPoints: 30,
                additionalCosts: [],
            },
            {
                name: 'Combo Refrescante Limonada',
                description: 'Limonada Natural + Porción de papas fritas pequeña.',
                price: 12000,
                cost: 5000,
                points: 10,
                imageUrls: ['https://www.hersheyland.mx/content/dam/Hersheyland_Mexico/es_mx/recipes/recipe-images/limonada.jpg', 'https://www.paulinacocina.net/wp-content/uploads/2015/08/p1140112-640x480.jpg'],
                available: true,
                recommendation: 'Ligero y refrescante',
                observations: 'Perfecto para días calurosos',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 12000,
                comboPoints: 10,
                additionalCosts: [],
            },
            {
                name: 'Combo Doble Jugo',
                description: '2 Jugos naturales a elección + Porción de arroz pequeña.',
                price: 18000,
                cost: 7000,
                points: 20,
                imageUrls: ['https://lirp.cdn-website.com/586fb047/dms3rep/multi/opt/jugos+naturales-1920w.jpg', 'https://img.freepik.com/fotos-premium/porcion-arroz-cocido-adornar_219193-12145.jpg'],
                available: true,
                recommendation: 'Para los amantes de los jugos naturales',
                observations: 'Elige tus sabores favoritos',
                availabilityStatus: 'disponible',
                isCombo: true,
                components: [], // Se llenará dinámicamente
                minimumPrice: 0, // Se calculará dinámicamente
                comboSellingPrice: 18000,
                comboPoints: 20,
                additionalCosts: [],
            },
        ];

        // Añadir productos base
        const productIdsMap: { [key: string]: string } = {}; // Mapa para guardar IDs de productos base
        for (const producto of productosBase) {
            const docRef = await addDoc(menuCollection, producto);
            productIdsMap[producto.name] = docRef.id; // Guardar ID usando el nombre del producto como clave
        }

        // Añadir combos y referenciar componentes
        for (const combo of combos) {
            const comboComponents: string[] = [];
            if (combo.name === 'Combo Pollo Jugo') {
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Jugo Natural Naranja']); // Puedes elegir un jugo por defecto o dejar la elección al usuario
            } else if (combo.name === 'Combo Alitas Papas') {
                comboComponents.push(productIdsMap['Alitas BBQ (6 unidades)']);
                comboComponents.push(productIdsMap['Porción Papas Fritas Pequeña']);
            } else if (combo.name === 'Combo Familiar Broaster') {
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Porción Papas Fritas Pequeña']);
                comboComponents.push(productIdsMap['Porción Papas Fritas Pequeña']);
                comboComponents.push(productIdsMap['Jugo Natural Naranja']); // Puedes elegir un jugo por defecto o dejar la elección al usuario
                comboComponents.push(productIdsMap['Jugo Natural Naranja']); // Puedes elegir un jugo por defecto o dejar la elección al usuario
            } else if (combo.name === 'Combo Individual Alipapas') {
                comboComponents.push(productIdsMap['Alipapas Personal']);
                comboComponents.push(productIdsMap['Limonada Natural']);
            } else if (combo.name === 'Combo Doble Pollo') {
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Porción Arroz Pequeña']);
            } else if (combo.name === 'Combo Alitas y Arroz') {
                comboComponents.push(productIdsMap['Alitas BBQ (6 unidades)']);
                comboComponents.push(productIdsMap['Porción Arroz Pequeña']);
            } else if (combo.name === 'Super Combo Pollo Completo') {
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Pollo Broaster Personal']);
                comboComponents.push(productIdsMap['Alitas BBQ (6 unidades)']);
                comboComponents.push(productIdsMap['Porción Papas Fritas Pequeña']);
                comboComponents.push(productIdsMap['Limonada Cerezada']);
                comboComponents.push(productIdsMap['Limonada Cerezada']);
            } else if (combo.name === 'Combo Ahorro Alitas') {
                comboComponents.push(productIdsMap['Alitas BBQ (6 unidades)']);
                comboComponents.push(productIdsMap['Alitas BBQ (6 unidades)']);
                comboComponents.push(productIdsMap['Porción Papas Fritas Pequeña']);
            } else if (combo.name === 'Combo Refrescante Limonada') {
                comboComponents.push(productIdsMap['Limonada Natural']);
                comboComponents.push(productIdsMap['Porción Papas Fritas Pequeña']);
            } else if (combo.name === 'Combo Doble Jugo') {
                comboComponents.push(productIdsMap['Jugo Natural Naranja']);
                comboComponents.push(productIdsMap['Jugo Natural Naranja']);
                comboComponents.push(productIdsMap['Porción Arroz Pequeña']);
            }

            const comboToSave = { ...combo, components: comboComponents };
            await addDoc(menuCollection, comboToSave);
        }

        alert('Menú por defecto creado exitosamente.');
        return true; // Indica éxito
    } catch (error) {
        console.error('Error al crear el menú por defecto:', error);
        alert('Error al crear el menú por defecto.');
        return false; // Indica fallo
    }


};


/* Fin src\utils\menu-scripts.ts */

/* Inicio src\utils\theme.ts */
// src/utils/theme.ts
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
    palette: {
        primary: {
            main: '#1976d2', // Color primario
        },
        secondary: {
            main: '#dc004e', // Color secundario
        },
        background: {
            default: '#f4f6f8', // Fondo general
            paper: '#ffffff', // Fondos de componentes
        },
    },
    typography: {
        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
        h5: {
            fontWeight: 600,
        },
    },
    components: {
        MuiButton: {
            styleOverrides: {
                root: {
                    textTransform: 'none', // Mantener el texto en su forma original
                },
            },
        },
        MuiTextField: {
            styleOverrides: {
                root: {
                    marginTop: '8px',
                    marginBottom: '8px',
                },
            },
        },
    },
});

export default theme;

/* Fin src\utils\theme.ts */

/* Inicio tailwind.config.js */
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
}

/* Fin tailwind.config.js */

/* Inicio tsconfig.app.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "noImplicitAny": false,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

/* Fin tsconfig.app.json */

/* Inicio tsconfig.json */
{
  "compilerOptions": {
    "typeRoots": [
      "src/types",
      "./node_modules/@types"
    ],
    "outDir": "dist",
    "rootDir": "src",
    "strict": false,
    "noImplicitAny": false,
    "allowJs": true,
    "skipLibCheck": true,
    "target": "ES2020",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "isolatedModules": true,
    "jsx": "react-jsx",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "src"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "eslint.config.js"
  ]
}
/* Fin tsconfig.json */

/* Inicio tsconfig.node.json */
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

/* Fin tsconfig.node.json */

/* Inicio vite.config.ts */
import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'
import { VitePWA } from 'vite-plugin-pwa'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      manifest: {
        name: 'SrPol',
        short_name: 'SrPol',
        description: 'Aplicación para restaurantes',
        theme_color: '#ffffff',
        icons: [
          {
            src: '/logo192.png',
            sizes: '192x192',
            type: 'image/png',
          },
          {
            src: '/logo512.png',
            sizes: '512x512',
            type: 'image/png',
          },
        ],
        start_url: '.',
        display: 'standalone',
        background_color: '#ffffff',
      },
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],
      },
    }),
  ],
  server: {
    host: '0.0.0.0', // Escucha en todas las interfaces de red
    port: 5173, // O el puerto que estés usando (por defecto es 5173)
  },
})
/* Fin vite.config.ts */
